Ниже приведены наиболее часто используемые провайдеры:

    -   Microsoft-Windows-Kernel-Process
        Эот поставщик ETW играет важную роль в мониторинге активности, связанной с процессами, в ядре Windows.
        Он может помочь обнаружить необычное поведение процесса, такое как внедрение процесса, очистка процесса и другие тактики, обычно используемые вредоносным ПО и усовершенствованными постоянными угрозами (APT).

    -   Microsoft-Windows-Kernel-File
        Как следует из названия, этот поставщик фокусируется на операциях, связанных с файлами.
        Его можно использовать для сценариев обнаружения, включающих несанкционированный доступ к файлам, изменения критических системных файлов или подозрительные операции с файлами, указывающие на эксфильтрацию или активность программ-вымогателей.

    -   Microsoft-Windows-Kernel-Network
        Этот поставщик ETW обеспечивает видимость сетевой активности на уровне ядра.
        Он особенно полезен для обнаружения сетевых атак, таких как эксфильтрация данных, несанкционированные сетевые подключения и потенциальные признаки связи команд и управления (C2).

    -   Microsoft-Windows-SMBClient/SMBServer
        Эти поставщики отслеживают активность клиента и сервера Server Message Block (SMB), предоставляя информацию о совместном доступе к файлам и сетевой связи.
        Они могут использоваться для обнаружения необычных шаблонов трафика SMB, потенциально указывающих на боковое перемещение или утечку данных.

    -   Microsoft-Windows-DotNETRuntime
        Этот поставщик фокусируется на событиях среды выполнения .NET
        Что делает его идеальным для выявления аномалий в выполнении приложений .NET, потенциальной эксплуатации уязвимостей .NET или вредоносной загрузки сборок .NET.

    -   OpenSSH
        Мониторинг поставщика OpenSSH ETW может предоставить важную информацию о попытках подключения Secure Shell (SSH), успешных и неудачных аутентификациях и потенциальных атаках методом подбора.

    -   Microsoft-Windows-VPN-Client
        Этот поставщик позволяет отслеживать события клиента виртуальной частной сети (VPN).
        Он может быть полезен для выявления несанкционированных или подозрительных подключений VPN.

    -   Microsoft-Windows-PowerShell
        Этот поставщик ETW отслеживает выполнение PowerShell и активность команд
        Что делает его бесценным для обнаружения подозрительного использования PowerShell, регистрации блоков скриптов и потенциального нецелевого использования или эксплуатации.

    -   Microsoft-Windows-Kernel-Registry
        Этот поставщик отслеживает операции реестра, что делает его полезным для сценариев обнаружения, связанных с изменениями в разделах реестра, часто связанных с механизмами сохранения, установкой вредоносного ПО или изменениями конфигурации системы.

    -   Microsoft-Windows-CodeIntegrity
        Этот поставщик отслеживает проверки целостности кода и драйверов, что может быть ключевым фактором в выявлении попыток загрузки неподписанных или вредоносных драйверов или кода.

    -   Microsoft-Antimalware-Service
        Этот поставщик ETW может использоваться для обнаружения потенциальных проблем со службой защиты от вредоносного ПО, включая отключенные службы, изменения конфигурации или потенциальные методы уклонения, используемые вредоносным ПО.

    -   WinRM
        Мониторинг поставщика удаленного управления Windows (WinRM) может выявить несанкционированную или подозрительную активность удаленного управления, часто указывающую на боковое перемещение или удаленное выполнение команд.

    -   Microsoft-Windows-TerminalServices-LocalSessionManager
        Этот поставщик отслеживает локальные сеансы служб терминалов, что делает его полезным для обнаружения несанкционированной или подозрительной активности удаленного рабочего стола.

    -   Microsoft-Windows-Security-Mitigations
        Этот поставщик следит за эффективностью и работой имеющихся мер по снижению рисков.
        Это необходимо для выявления потенциальных попыток обхода этих мер безопасности.

    -   Microsoft-Windows-DNS-Client
        Этот поставщик ETW обеспечивает видимость активности DNS-клиента
        Это имеет решающее значение для обнаружения атак на основе DNS, включая DNS-туннелирование или необычные DNS-запросы, которые могут указывать на связь C2.

    -   Microsoft-Antimalware-Protection
        Этот поставщик отслеживает работу механизмов защиты от вредоносного ПО.
        Его можно использовать для обнаружения любых проблем с этими механизмами, таких как отключенные функции защиты, изменения конфигурации или признаки методов уклонения, используемых злоумышленниками.
    
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    + Detection Example 1: Detecting Strange Parent-Child Relationships +
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    Ненормальные родительско-дочерние отношения между процессами могут быть признаком вредоносной деятельности.
    В стандартных средах Windows некоторые процессы никогда не вызывают и не порождают другие.
    Например, крайне маловероятно, что "calc.exe" порождает "cmd.exe" в обычной среде Windows.
    Понимание этих типичных родительско-дочерних отношений может помочь в обнаружении аномалий.
    Самир Буссеаден поделился проницательной ментальной картой, представляющей общие родительско-дочерние отношения, на которую можно сослаться здесь.

    Используя Process Hacker 2 (или System Informer), мы можем исследовать родительско-дочерние отношения в Windows.
    Сортировка процессов по раскрывающимся спискам в представлении "Processes" показывает иерархическое представление отношений.
    Анализ взаимосвязей в стандартных и пользовательских средах позволяет нам выявлять отклонения от нормальных шаблонов.
    Например, если мы наблюдаем, как процесс "spoolsv.exe" создает "whoami.exe" вместо ожидаемого поведения создания "conhost", это вызывает подозрение.

    Чтобы продемонстрировать странную связь родитель-потомок, где "cmd.exe" создается "spoolsv.exe" без сопутствующих аргументов, мы воспользуемся атакующей техникой, называемой подменой родительского PID.
    Подмена родительского PID может быть выполнена через PowerShell скрипт "psgetsystem" следующим образом.
    *** Скрипт можно скачать по адресу  -   https://github.com/decoder-it/psgetsystem

        PS C:\....\....\psgetsystem> powershell -ep bypass
        PS C:\....\....\psgetsystem> Import-Module .\psgetsys.ps1 
        PS C:\....\....\sgetsystem> [MyProcess]::CreateProcessFromParent([Process ID of spoolsv.exe],"C:\Windows\System32\cmd.exe","")
    
    В результате применения данного скрипта (подмены родительского PID), событие Sysmon 1 неправильно отображает spoolsv.exe как родительский объект cmd.exe.
    Однако на самом деле cmd.exe создал powershell.exe.

    Как мы уже обсуждали ранее, хотя Sysmon и журналы событий предоставляют ценную телеметрию для поиска и создания правил оповещения, они не являются единственными источниками информации.
    Давайте начнем со сбора данных от поставщика Microsoft-Windows-Kernel-Process с помощью SilkETW

    SilkETW и SilkService — это гибкие оболочки C# для ETW, они предназначены для абстрагирования сложностей ETW и предоставления людям простого интерфейса для проведения исследований и интроспекции.
    Хотя оба проекта имеют очевидные защитные (и наступательные) приложения, их следует в первую очередь рассматривать как исследовательские инструменты.
    Скачать можно тут   -   https://github.com/mandiant/SilkETW

    Необходимого поставщика (в нашем случае это - Microsoft-Windows-Kernel-Process) оставщика можно определить с помощью logman, как мы описали ранее,
    
        C:\....\....\logman.exe query providers | findstr "Process".
    
    После этого мы можем снова приступить к моделированию атаки, чтобы оценить, может ли ETW предоставить нам более точную информацию относительно выполнения cmd.exe.

        C:\....\....\SilkETW_SilkService_v8\v8\SilkETW>SilkETW.exe -t user -pn Microsoft-Windows-Kernel-Process -ot file -p C:\windows\temp\etw.json
    
    Файл etw.json (который включает данные от поставщика Microsoft-Windows-Kernel-Process), по-видимому, содержит информацию о том, что powershell.exe является тем, кто создал cmd.exe
    Следует отметить, что журналы событий SilkETW могут быть загружены и просмотрены средством просмотра событий Windows через SilkService, что обеспечивает более глубокое и полное представление о действиях, выполняемых в системе.

    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    + Detection Example 2: Detecting Malicious .NET Assembly Loading +
    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    Традиционно злоумышленники использовали стратегию, известную как «Living off the Land» (LotL), эксплуатируя легитимные системные инструменты, такие как PowerShell, для выполнения своих вредоносных операций.
    Такой подход снижает риск обнаружения, поскольку он предполагает использование инструментов, которые являются собственными для системы и, следовательно, с меньшей вероятностью вызовут подозрения.
    Однако сообщество кибербезопасности адаптировало и разработало контрмеры против этой стратегии.

    В ответ на эти защитные достижения злоумышленники разработали новый подход, который называется «Bring Your Own Land» (BYOL).
    Вместо того чтобы полагаться на инструменты, уже имеющиеся в системе жертвы, субъекты угроз и тестировщики на проникновение, эмулирующие эту тактику, теперь используют сборки .NET, выполняемые полностью в памяти.
    Это включает создание специально разработанных инструментов с использованием таких языков, как C#, что делает их независимыми от уже существующих инструментов в целевой системе.
    Lands «Bring Your Own Land» весьма эффективны по следующим причинам:

        -   Каждая система Windows оснащена определенной версией .NET, предустановленной по умолчанию.

        -   Значимой особенностью .NET является его управляемая природа, что устраняет необходимость для программистов вручную управлять памятью.
            Этот атрибут является частью процесса выполнения управляемого кода фреймворка, где среда выполнения Common Language Runtime (CLR) берет на себя ответственность за ключевые операции на системном уровне, такие как сборка мусора, устранение утечек памяти и обеспечение более эффективного использования ресурсов.

        -   Одним из интригующих преимуществ использования сборок .NET является их способность загружаться непосредственно в память.
            Это означает, что исполняемый файл или DLL не нужно физически записывать на диск — вместо этого он выполняется непосредственно в памяти.
            Такое поведение минимизирует артефакты, остающиеся в системе, и может помочь обойти некоторые формы обнаружения, которые полагаются на проверку файлов, записанных на диск.

        -   Microsoft интегрировала широкий спектр библиотек в фреймворк .NET для решения многочисленных распространенных проблем программирования.
            Эти библиотеки включают функции для установления HTTP-соединений, реализации криптографических операций и включения межпроцессного взаимодействия (IPC), например именованных каналов.
            Эти готовые инструменты оптимизируют процесс разработки, снижают вероятность ошибок и упрощают создание надежных и эффективных приложений.
            Кроме того, для субъекта угрозы эти богатые функции предоставляют набор инструментов для создания более сложных и скрытых методов атак.
    
    Яркой иллюстрацией этой стратегии BYOL является команда «execute-assembly», реализованная в CobaltStrike, широко используемой программной платформе для Adversary Simulations и Red Team Operations.
    Команда «execute-assembly» CobaltStrike позволяет пользователю выполнять сборки .NET непосредственно из памяти, что делает ее идеальным инструментом для реализации стратегии BYOL.
    
    Подобным образом, как мы обнаружили выполнение неуправляемых скриптов PowerShell посредством наблюдения за аномальной активностью загрузки clr.dll и clrjit.dll в процессах, которые обычно не требуют их, мы можем использовать аналогичный подход для выявления загрузки вредоносной сборки .NET.
    Это достигается путем тщательного изучения активности, связанной с загрузкой связанных с .NET DLL, в частности clr.dll и mscoree.dll.
    Мониторинг загрузки таких библиотек может помочь выявить попытки выполнить сборки .NET в необычных или неожиданных контекстах, что может быть признаком вредоносной активности.
    Этот тип поведения загрузки DLL часто можно обнаружить, используя идентификатор события Sysmon 7, который соответствует событиям «Image Loaded».

    Для наглядности давайте сымитируем загрузку вредоносной сборки .NET, выполнив предварительно скомпилированную версию Seatbelt   -   https://github.com/GhostPack/Seatbelt
    Seatbelt — это известная сборка .NET, часто используемая злоумышленниками, которые загружают и выполняют ее в памяти, чтобы получить ситуационную осведомленность о скомпрометированной системе.

        PS C:\....\....\GhostPack Compiled Binaries>.\Seatbelt.exe TokenPrivileges

    Если предположить, что Sysmon настроен соответствующим образом для регистрации событий загрузки изображений (идентификатор события 7)
    То выполнение 'Seatbelt.exe' вызовет загрузку ключевых DLL, связанных с .NET, таких как 'clr.dll' и 'mscoree.dll'.
    Sysmon, внимательно наблюдающий за действиями системы, будет регистрировать эти операции загрузки DLL как записи с идентификатором события 7.
    
    Как уже упоминалось, полагаться исключительно на Sysmon Event ID 7 для обнаружения атак может быть сложно из-за большого объема событий, которые он генерирует.
    Кроме того, хотя он информирует нас о загружаемых DLL, он не предоставляет подробных сведений о фактическом содержании загруженной сборки .NET.
    Чтобы расширить нашу видимость и получить более глубокое представление о фактической загружаемой сборке, мы можем снова использовать Event Tracing for Windows (ETW) и, в частности, поставщика Microsoft-Windows-DotNETRuntime.

    Давайте используем SilkETW для сбора данных от поставщика Microsoft-Windows-DotNETRuntime.
    После этого мы можем снова приступить к моделированию атаки, чтобы оценить, может ли ETW предоставить нам более подробную и действенную информацию о загрузке и выполнении сборки .NET «Seatbelt».

        C:\....\....\SilkETW_SilkService_v8\v8\SilkETW>SilkETW.exe -t user -pn Microsoft-Windows-DotNETRuntime -uk 0x2038 -ot file -p C:\windows\temp\etw.json
    
    Стоит отметить, что в нашей текущей конфигурации SilkETW мы не захватываем все события от поставщика "Microsoft-Windows-DotNETRuntime".
    Вместо этого мы выборочно нацеливаемся на определенное подмножество (указанное как 0x2038), которое включает: JitKeyword, InteropKeyword, LoaderKeyword и NGenKeyword:

        -   JitKeyword относится к событиям компиляции Just-In-Time (JIT), предоставляя информацию о методах, компилируемых во время выполнения.
            Это может быть особенно полезно для понимания потока выполнения сборки .NET.

        -   InteropKeyword относится к событиям взаимодействия, которые вступают в игру, когда управляемый код взаимодействует с неуправляемым кодом.
            Эти события могут дать представление о потенциальных взаимодействиях с собственными API или другими неуправляемыми компонентами.

        -   События LoaderKeyword предоставляют сведения о процессе загрузки сборки в среде выполнения .NET, что может быть жизненно важно для понимания того, какие сборки .NET загружаются и потенциально выполняются.

        -   NGenKeyword соответствует событиям Native Image Generator (NGen), которые связаны с созданием и использованием предварительно скомпилированных сборок .NET.
            Их мониторинг может помочь обнаружить сценарии, в которых злоумышленники используют предварительно скомпилированные сборки .NET, чтобы обойти обнаружения, связанные с JIT.