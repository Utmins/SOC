=====================================================================
* Sysmon Overview *
*******************

Системный монитор (Sysmon) — это системная служба Windows и драйвер устройства, который после установки в системе остается постоянныс при перезагрузках системы для мониторинга и регистрации активности системы в журнале событий Windows.
Он предоставляет подробную информацию о создании процессов, сетевых подключениях и изменениях времени создания файлов.
Собирая события, которые он генерирует, с помощью сбора событий Windows или агентов SIEM и затем анализируя их, вы можете определить вредоносную или аномальную активность и понять, как злоумышленники и вредоносное ПО действуют в вашей сети.
Sysmon собирает подробные и высококачественные журналы, а также трассировку событий, которая помогает выявлять аномалии в вашей среде.

Sysmon чаще всего используется в сочетании с SIEM или другими решениями для анализа журналов, которые объединяют, фильтруют и визуализируют события.
При установке на конечной точке Sysmon запустится на ранней стадии процесса загрузки Windows.
В идеальном сценарии события будут пересылаться в SIEM для дальнейшего анализа.

События в Sysmon хранятся в -   Applications and Services Logs/Microsoft/Windows/Sysmon/Operational

Sysmon необходим файл конфигурации, чтобы указать двоичному файлу, как анализировать события, которые он получает.
Вы можете создать свой собственный файл конфигурации Sysmon или загрузить его.
Вот пример высококачественной конфигурации, которая хорошо подходит для выявления аномалий, созданных SwiftOnSecurity   -   https://github.com/SwiftOnSecurity/sysmon-config

Sysmon включает 29 различных типов идентификаторов событий, все из которых могут использоваться в конфигурации для указания того, как события должны обрабатываться и анализироваться.
При создании или изменении файлов конфигурации вы заметите, что большинство правил в sysmon-config будут исключать события, а не включать их.
Это поможет отфильтровать обычную активность в вашей среде, что, в свою очередь, уменьшит количество событий и оповещений, которые вам придется вручную проверять или искать в SIEM.

С другой стороны, существуют наборы правил, такие как ION-Storm sysmon-config fork, который использует более проактивный подход к своему набору правил, используя множество правил включения.
Возможно, вам придется изменить файлы конфигурации, чтобы найти тот подход, который вы предпочитаете.
Настройки конфигурации будут различаться в зависимости от команды SOC, поэтому будьте готовы проявить гибкость при мониторинге.

    ++++++++++++++++++++
    + Sysmon EvenidIDs +
    ++++++++++++++++++++

    Поскольку Sysmon анализирует так много идентификаторов событий, мы рассмотрим только несколько из них, которые наиболее важны для понимания.

    Использование любого идентификатора требует наличие конфигурационого файла, который в свою очередь ОБЯЗАН содержать следующую информацию в самом начале

    <Sysmon schemaversion="#.##"> <!-- #.## Должна соответсвовать версии установленношл SYSMON. Для определения версии установленного SYSMON используется следующая команда в комнадной строке sysmon -s | more  -->
		<HashAlgorithms>md5,sha256,IMPHASH</HashAlgorithms> <!-- Указываете HASH алгоритмы, которые вы хотите использовать. -->
	    <CheckRevocation/> <!-- Check loaded drivers, log if their code-signing certificate has been revoked, in case malware stole one to sign a kernel driver -->
        	<EventFiltering>
                И вот здесь уже вы можете разместить ваши идентификаторы, которые вы хотите применить к лог-файлу
                ...
                ...
                ...
            </EventFiltering>
    </Sysmon>

        ////////////////////////////////////
        /// Event ID 1: Process Creation ///
        ////////////////////////////////////

        Это событие будет искать все созданные процессы.
        Вы можете использовать это для поиска известных подозрительных процессов или процессов с опечатками, которые можно считать аномалией.
        
        Это событие будет использовать XML-теги CommandLine и Image.

        Приведенный ниже фрагмент кода указывает идентификатор события, из которого нужно извлечь данные, а также условие, которое нужно искать.
        В этом случае он исключает процесс svchost.exe из журналов событий

            <RuleGroup name="" groupRelation="or">
                <ProcessCreate onmatch="exclude">
                    <CommandLine condition="is">C:\Windows\system32\svchost.exe -k appmodel -p -s camsvc</CommandLine>
                </ProcessCreate>
            </RuleGroup>

        //////////////////////////////////////
        /// Event ID 3: Network Connection ///
        //////////////////////////////////////

        Событие сетевого подключения будет искать события, которые происходят удаленно.
        Это будет включать файлы и источники подозрительных двоичных файлов, а также открытые порты.
        
        Это событие будет использовать XML-теги Image и DestinationPort.

        Приведенный ниже фрагмент кода включает два способа определения подозрительной активности сетевого подключения.
        Сперва мы определяем файлы, передаваемые через открытые порты.
        *** В этом случае мы специально ищем nmap.exe, который затем будет отражен в журналах событий.
        Затем нам надо определить открытые порты и, в частности, порт 4444, который обычно используется с Metasploit.
        Если условие выполняется, будет создано событие и, в идеале, будет запущено оповещение для SOC для дальнейшего расследования.

            <RuleGroup name="" groupRelation="or">
                <NetworkConnect onmatch="include">
                    <Image condition="image">nmap.exe</Image>
                    <DestinationPort name="Alert,Metasploit" condition="is">4444</DestinationPort>
                </NetworkConnect>
            </RuleGroup>
        
        ////////////////////////////////
        /// Event ID 7: Image Loaded ///
        ////////////////////////////////

        Это событие будет искать загруженные процессами DLL, что полезно при поиске атак DLL Injection и DLL Hijacking.
        !!! Рекомендуется проявлять осторожность при использовании этого идентификатора события, поскольку он вызывает высокую нагрузку на систему.
        
        Это событие будет использовать XML-теги Image, Signed, ImageLoaded и Signature.

        Приведенный ниже фрагмент кода будет искать любые DLL, загруженные в каталог \Temp\.
        Если DLL загружена в этот каталог, это можно считать аномалией и требует дальнейшего изучения.

            <RuleGroup name="" groupRelation="or">
                <ImageLoad onmatch="include">
                    <ImageLoaded condition="contains">\Temp\</ImageLoaded>
                </ImageLoad>
            </RuleGroup>
    
        //////////////////////////////////////
        /// Event ID 8: CreateRemoteThread ///
        //////////////////////////////////////

        Идентификатор события CreateRemoteThread будет отслеживать процессы, внедряющие код в другие процессы.
        Функция CreateRemoteThread используется для законных задач и приложений.
        Однако она может использоваться вредоносным ПО для сокрытия вредоносной активности.
        
        Это событие будет использовать XML-теги SourceImage, TargetImage, StartAddress и StartFunction.

        В приведенном ниже фрагменте кода показаны два способа мониторинга CreateRemoteThread.
            1)  Первый метод будет искать адрес памяти для определенного конечного условия, которое может быть индикатором маяка Cobalt Strike.
            2)  Второй метод будет искать внедренные процессы, у которых нет родительского процесса. Это следует считать аномалией и требовать дальнейшего изучения.

            <RuleGroup name="" groupRelation="or">
                <CreateRemoteThread onmatch="include">
                    <StartAddress name="Alert,Cobalt Strike" condition="end with">0B80</StartAddress>
                    <SourceImage condition="contains">\</SourceImage>
                </CreateRemoteThread>
            </RuleGroup>

        /////////////////////////////////
        /// Event ID 11: File Created ///
        /////////////////////////////////

        Этот идентификатор события будет регистрировать события, когда файлы создаются или перезаписываются конечной точкой.
        Это может использоваться для идентификации имен файлов и подписей файлов, которые записываются на диск.
        
        Это событие использует XML-теги TargetFilename.

        Приведенный ниже фрагмент кода является примером монитора событий программы-вымогателя.
        Это всего лишь один пример из множества различных способов использования Event ID 11.

            <RuleGroup name="" groupRelation="or">
                <FileCreate onmatch="include">
                    <TargetFilename name="Alert,Ransomware" condition="contains">HELP_TO_SAVE_FILES</TargetFilename>
                </FileCreate>
            </RuleGroup> 
        
        /////////////////////////////////////////////
        /// Event ID 12 / 13 / 14: Registry Event ///
        /////////////////////////////////////////////

        Это событие ищет изменения или модификации в реестре.
        Вредоносная активность из реестра может включать в себя сохранение и злоупотребление учетными данными.
        
        Это событие использует XML-теги TargetObject.

        Приведенный ниже фрагмент кода будет искать объекты реестра, находящиеся в каталоге «Windows\System\Scripts», поскольку это обычный каталог, в котором злоумышленники размещают скрипты для обеспечения устойчивости.

            <RuleGroup name="" groupRelation="or">
                <RegistryEvent onmatch="include">
                    <TargetObject name="T1484" condition="contains">Windows\System\Scripts</TargetObject>
                </RegistryEvent>
            </RuleGroup>
        
        /////////////////////////////////////////
        /// Event ID 15: FileCreateStreamHash ///
        /////////////////////////////////////////

        Это событие будет искать любые файлы, созданные в альтернативном потоке данных.
        Это распространенный метод, используемый злоумышленниками для сокрытия вредоносного ПО.
        
        Это событие использует XML-теги TargetFilename.

        Приведенный ниже фрагмент кода будет искать файлы с расширением .hta, которые были помещены в альтернативный поток данных.

            <RuleGroup name="" groupRelation="or">
                <FileCreateStreamHash onmatch="include">
                    <TargetFilename condition="end with">.hta</TargetFilename>
                </FileCreateStreamHash>
            </RuleGroup> 
        
        //////////////////////////////
        /// Event ID 22: DNS Event ///
        //////////////////////////////

        Это событие будет регистрировать все запросы и события DNS для анализа.
        Наиболее распространенный способ борьбы с этими событиями — исключить все доверенные домены, которые, как вы знаете, будут очень распространенным «шумом» в вашей среде.
        После того, как вы избавитесь от шума, вы сможете искать аномалии DNS.
        
        Это событие использует теги XML QueryName.

        Приведенный ниже фрагмент кода исключит любые события DNS с запросом .microsoft.com.
        Это избавит вас от шума, который вы видите в среде.

            <RuleGroup name="" groupRelation="or">
                <DnsQuery onmatch="exclude">
                    <QueryName condition="end with">.microsoft.com</QueryName>
                </DnsQuery>
            </RuleGroup>
    
    ++++++++++++++++++++
    + Sysmon EvenidIDs +
    ++++++++++++++++++++

    Установка Sysmon довольно проста и требует только загрузки двоичного файла с веб-сайта Microsoft.

    Чтобы полностью использовать Sysmon, вам также потребуется загрузить конфигурацию Sysmon или создать свою собственную конфигурацию.
    Конфигурация Sysmon позволит осуществлять более детальный контроль над журналами, а также более детальную трассировку событий. 
    Мы предлагаем загрузить SwiftOnSecurity sysmon-config.

    Чтобы запустить Sysmon, вам нужно будет открыть новый PowerShell или командную строку от имени администратора.
    Затем выполните следующую команду, она выполнит двоичный файл Sysmon, примет лицензионное соглашение с конечным пользователем и использует файл конфигурации SwiftOnSecurity.

        Sysmon.exe -accepteula -i C:\path\to\the\Configuration\file.xml
    
    Дополнительные комнады, которые могут потребоваться для запуска Sysmon, можно найти тут     -   https://learn.microsoft.com/en-us/sysinternals/downloads/sysmon

    *** В любое время вы можете изменить используемый файл конфигурации, удалив или обновив текущую конфигурацию и заменив ее новым файлом конфигурации.
        Для получения дополнительной информации просмотрите меню справки Sysmon.

=====================================================================
* Practise Excersise *
**********************

Поскольку большая часть обычной активности или «шума», наблюдаемого в сети, исключается или отфильтровывается с помощью Sysmon, мы можем сосредоточиться на значимых событиях.
Это позволяет нам быстро выявлять и расследовать подозрительную активность.
При активном мониторинге сети вам нужно будет использовать несколько обнаружений и методов одновременно, чтобы выявить угрозы.

В представленных ниже примерах мы рассмотрим только то, как будут выглядеть подозрительные журналы с обеими конфигурациями Sysmon, и как оптимизировать вашу охоту, используя только Sysmon.
Мы рассмотрим, как обнаруживать:

    -   ransomware
    -   persistence
    -   Mimikatz
    -   Metasploit
    -   Command and Control (C2) beacons.

Очевидно, что это лишь небольшая часть событий, которые могут быть вызваны в среде.
Методология будет в значительной степени такой же для других угроз.
На самом деле все сводится к использованию обширного и эффективного файла конфигурации, поскольку он может сделать большую часть тяжелой работы за вас.

Sysmon предлагает довольно открытую и настраиваемую платформу для использования.
Существет несколько основных моментов, которые необхожимо всегда учитывать, когда работает над анализом того или иного события
Данные моменты позволят Вам гарантировать, что вы работаете эффективно и не упускаете ни одной потенциальной угрозы.
Вот некоторые из них:

    *)  Exclude > Include (Исключить > Включить)

        При создании правил для вашего файла конфигурации Sysmon обычно лучше всего отдавать приоритет исключению событий, а не включению событий.
        Это не позволит вам случайно пропустить важные события и увидеть только самые важные события.

    *)  Using CLI (использование коммандной строки)
    
        Как и в большинстве приложений, CLI дает вам максимальный контроль и фильтрацию, позволяя осуществлять более детальный контроль.
        Вы можете использовать Get-WinEvent или wevutil.exe для доступа к журналам и их фильтрации.
        По мере включения Sysmon в SIEM или другие решения по обнаружению эти инструменты станут менее используемыми и необходимыми.

        Командная строка обычно используется поверх графического интерфейса Event Viewer, поскольку она обеспечивает более детальный контроль и фильтрацию, в то время как графический интерфейс не позволяет.

    *)  Know your environment before implementation (Знайте свою среду перед внедрением)

        Знание своей среды важно при внедрении любой платформы или инструмента.
        Вам необходимо иметь четкое представление о сети или среде, в которой вы работаете, чтобы полностью понимать, что является нормой, а что подозрительным, и эффективно разрабатывать свои правила.

*** Event Viewer может быть не лучшим средством для фильтрации событий и предлагает ограниченный контроль над журналами.
    Основной фильтр, который вы будете использовать с Event Viewer, — это фильтрация EventID и ключевых слов.
    Вы также можете выбрать фильтрацию путем написания XML, но это утомительный процесс, который плохо масштабируется.

    Альтернативой являетя   -   меню фильтров (Filter Current Log)
    Оно находится в меню Actions.
    Из этого меню мы можем добавлять любые фильтры или категории по своему усмотрению.

*** Для просмотра и фильтрации событий с помощью PowerShell мы будем использовать Get-WinEvent вместе с запросами XPath.
    Мы будем использовать wevutil.exe для просмотра событий после фильтрации.

    Мы можем использовать любые запросы XPath, которые можно найти в представлении событий XML.
    Вот несколько фильтров XPath, которые нам могут пригодиться
    
        -   Filter by Event ID              -   */System/EventID=<ID>
        -   Filter by XML Attribute/Name    -   */EventData/Data[@Name="<XML Attribute/Name>"]
        -   Filter by Event Data            -   */EventData/Data=<Data>

    Мы можем объединить эти фильтры с различными атрибутами и данными, чтобы получить максимальный контроль над нашими журналами.
    
    Вот пример использования Get-WinEvent для поиска сетевых подключений, поступающих с порта 4444

        Get-WinEvent -Path <Path to Log> -FilterXPath '*/System/EventID=3 and */EventData/Data[@Name="DestinationPort"] and */EventData/Data=4444'

    ++++++++++++++++++++++
    + Hunting Metasploit +
    ++++++++++++++++++++++

    Metasploit можно использовать для легкого запуска эксплойтов на машине и обратного подключения к оболочке meterpreter.
    Поэтому мы будем охотиться за самой оболочкой meterpreter и используемыми ею функциями.
    
    Для начала мы будем искать сетевые соединения, которые исходят из подозрительных портов, таких как 4444 и 5555.
    По умолчанию Metasploit использует порт 4444.
    Если есть соединение с любым известным или неизвестным IP-адресом, его следует исследовать.
        
    Мы также можем искать созданные подозрительные процессы.
    Этот метод охоты можно применять к другим различным RAT и маякам C2.
    *** Для получения дополнительной информации об этой технике и используемых инструментах ознакомьтесь с программным обеспечением MITRE ATT&CK    -   https://attack.mitre.org/software/

    Для получения дополнительной информации о том, как вредоносные программы и полезные нагрузки взаимодействуют с сетью, ознакомьтесь с таблицей общих портов вредоносных программ.
    https://docs.google.com/spreadsheets/d/17pSTDNpa0sf6pHeRhusvWG6rThciE8CsXTSlDUAZDyo/edit?pli=1&gid=0#gid=0

    К примеру:
    
        *)  Сначала мы рассмотрим измененную конфигурацию Ion-Security для обнаружения создания новых сетевых подключений.
            Фрагмент кода ниже будет использовать идентификатор события 3 вместе с портом назначения для идентификации активных подключений, в частности подключений на порту 4444 и 5555.

                <RuleGroup name="" groupRelation="or">
                    <NetworkConnect onmatch="include">
                        <DestinationPort condition="is">4444</DestinationPort>
                        <DestinationPort condition="is">5555</DestinationPort>
                    </NetworkConnect>
                </RuleGroup>
        
        **) Вариант использования командлетов PowerShell будет выглядеть следующим образом (события будут отображены от самого последенего к самому первому)
            Только сперва необходимо подгрузить конфигурационный файл sysmon

                Get-WinEvent -Path <Path to Log> -FilterXPath '*/System/EventID=3 and */EventData/Data[@Name="DestinationPort"] and */EventData/Data=4444'
            
            В результате нам будет отображен список событий, подходящих под наше условие
            А чтобы посмотреть детальную информацию по каждому событию, нужно использовать следующий командлет
    
                Get-WinEvent -Path <Path to Log> -FilterXPath '*/System/EventID=3 and */EventData/Data[@Name="DestinationPort"] and */EventData/Data=4444' | Select-Object -Property *
            
            А для отображения только некоторых событий (допустим 3х последних)

                Get-WinEvent -Path <Path to Log> -FilterXPath '*/System/EventID=3 and */EventData/Data[@Name="DestinationPort"] and */EventData/Data=4444' -MaxEvents 3 | Select-Object -Property *
            
            А для отображения только некоторых событий (допустим 3х первых)

                Get-WinEvent -Path <Path to Log> -FilterXPath '*/System/EventID=3 and */EventData/Data[@Name="DestinationPort"] and */EventData/Data=4444' -Oldest -MaxEvents 3 | Select-Object -Property *

    ++++++++++++++++++++++
    + Detecting Mimikatz +
    ++++++++++++++++++++++

    Mimikatz хорошо известен и обычно используется для дампа учетных данных из памяти вместе с другой постэксплуатационной активностью Windows.
    Mimikatz в основном известен для дампа LSASS.
    Поэтому, мы можем охотиться за:
    
        -   созданным файлом
        -   выполнением файла из процесса с повышенными правами
        -   созданием удаленного потока и процессами, которые создает Mimikatz.
    
    Антивирус обычно обнаруживает Mimikatz, поскольку сигнатура очень хорошо известна, но злоумышленники все еще могут скрыть или использовать дропперы, чтобы загрузить файл на устройство.
    Для этого поиска мы будем использовать пользовательский файл конфигурации, чтобы минимизировать сетевой шум и сосредоточиться на поиске.

    Для получения дополнительной информации об этой технике и используемом программном обеспечении ознакомьтесь с MITRE ATTACK
        T1055   -   https://attack.mitre.org/techniques/T1055/
        S0002   -   https://attack.mitre.org/software/S0002/

    Вы можете загрузить журналы событий, используемые в этой комнате, из этой задачи или открыть их в папке Practice на предоставленной машине.

    К примеру:

        *)  Код, конфигурациооного файла для ПОИСКА ФАЙЛОВ, созданных с именем Mimikatz.
            Это простой метод, но он может позволить вам найти все, что могло обойти AV.
            В большинстве случаев при работе с продвинутой угрозой вам понадобятся более продвинутые методы поиска, такие как поиск поведения LSASS, но этот метод все равно может быть полезен.

            Это очень простой способ обнаружения активности Mimikatz, которая обошла антивирус или другие меры обнаружения.
            Но в большинстве случаев предпочтительнее использовать другие методы, такие как поиск специфичного поведения LSASS.

                <RuleGroup name="" groupRelation="or">
                    <FileCreate onmatch="include">
                        <TargetFileName condition="contains">mimikatz</TargetFileName>
                    </FileCreate>
                </RuleGroup>
            
            Код, конфигурациооного файла для ПОИС НЕНОРМАЛЬНОГО ПОВЕДЕНИЯ LSASS
            Это событие вместе с LSASS будет показывать потенциальное злоупотребление LSASS, которое обычно связано с Mimikatz, каким-либо другим инструментом сброса учетных данных.
            Если к LSASS обращается процесс, отличный от svchost.exe, это следует считать подозрительным поведением и следует изучить его более подробно.
            
            Чтобы помочь в поиске подозрительных событий, вы можете использовать фильтр, чтобы искать только процессы, помимо svchost.exe.
            Sysmon предоставит нам дополнительные сведения, которые помогут в проведении расследования, такие как путь к файлу, из которого возник процесс.
            Для помощи в обнаружении мы будем использовать пользовательский файл конфигурации. 

                <RuleGroup name="" groupRelation="or">
                    <ProcessAccess onmatch="exclude">
                        <SourceImage condition="image">svchost.exe</SourceImage>
                    </ProcessAccess>
                    <ProcessAccess onmatch="include">
                        <TargetImage condition="image">lsass.exe</TargetImage>
                    </ProcessAccess>
                </RuleGroup>

        **) Вариант использования командлетов PowerShell будет выглядеть следующим образом
            Приведенный ниже вариант комнадлете хорош тем, что позволяет нам отфильтровать события, даже если мы не знаем ID события

                Get-WinEvent -Path <Path to Log> -FilterXPath '*/System/EventID=10 and */EventData/Data[@Name="TargetImage"] and */EventData/Data="C:\Windows\system32\lsass.exe"'
            
            Если же мы знаем ID события, то его также модно добавить в комнадлет

                Get-WinEvent -Path <Path to Log> -FilterXPath '*/System/EventID=10 and */EventData/Data[@Name="TargetImage"] and */EventData/Data="C:\Windows\system32\lsass.exe"'
            
    +++++++++++++++++++
    + Hunting Malware +
    +++++++++++++++++++

    Вредоносное ПО имеет множество форм и вариаций с различными конечными целями.
    Два типа вредоносного ПО, на которых мы сосредоточимся, — это RAT и бэкдоры.
    
    RAT или трояны удаленного доступа используются так же, как и любая другая полезная нагрузка, для получения удаленного доступа к машине.
    Они обычно поставляются с другими антивирусными и методами уклонения от обнаружения, которые отличают их от других полезных нагрузок, таких как MSFVenom.
    Их обычно также использует модель клиент-сервер и поставляется с интерфейсом для простого администрирования пользователей.
    Примерами RAT являются Xeexe и Quasar.
    
    Чтобы помочь обнаружить и выследить вредоносное ПО, нам сначала нужно будет идентифицировать вредоносное ПО, которое мы хотим выследить или обнаружить, и определить способы, которыми мы можем изменить файлы конфигурации, это известно как поиск на основе гипотез.
    Конечно, существует множество других способов обнаружения и регистрации вредоносного ПО, однако мы рассмотрим только базовый способ обнаружения открытых портов обратного подключения.

    К примеру:

        *)  Первая техника, которую мы будем использовать для поиска вредоносного ПО, похожа на процесс поиска Metasploit.
            Используя известные подозрительные порты для включения в наши журналы, мы можем дополнить нашу методологию поиска, в которой мы можем использовать журналы для идентификации злоумышленников в нашей сети
            А затем использовать захваты пакетов или другие стратегии обнаружения для продолжения расследования.

            !!! При использовании файлов конфигурации в производственной среде вы должны быть осторожны и точно понимать, что происходит в файле конфигурации
                Злоумышленники начали использовать порт 53 как часть своего вредоносного ПО/полезной нагрузки, которая осталась бы незамеченной, если бы вы слепо использовали этот файл конфигурации как есть.
            
            Фрагмент кода показаный ниже будет оповещать, когда определенные порты, такие как 1034 и 1604, а также исключать общие сетевые соединения, такие как OneDrive

                <RuleGroup name="" groupRelation="or">
                    <NetworkConnect onmatch="include">
                        <DestinationPort condition="is">1034</DestinationPort>
                        <DestinationPort condition="is">1604</DestinationPort>
                    </NetworkConnect>
                    <NetworkConnect onmatch="exclude">
                        <Image condition="image">OneDrive.exe</Image>
                    </NetworkConnect>
                </RuleGroup>
        
        **) Вариант использования командлетов PowerShell будет выглядеть следующим образом

            Get-WinEvent -Path <Path to Log> -FilterXPath '*/System/EventID=3 and */EventData/Data[@Name="DestinationPort"] and */EventData/Data=<Port>'

    +++++++++++++++++++++++
    + Hunting Persistence +
    +++++++++++++++++++++++

    Persistence используется злоумышленниками для сохранения доступа к машине после ее взлома.
    Существует множество способов, с помощью которых злоумышленник может получить устойчивость на машине.
    Мы сосредоточимся на модификации реестра, а также на сценариях запуска.
    
    Мы можем отслеживать устойчивость с помощью Sysmon, ища события создания файлов, а также события изменения реестра.
    Файл конфигурации SwiftOnSecurity хорошо справляется с задачей целенаправленного определения устойчивости и используемых методов.
    Вы также можете фильтровать по именам правил, чтобы обойти сетевой шум и сосредоточиться на аномалиях в журналах событий.

    К примеру:

        *)  Сначала мы рассмотрим обнаружения для файла(-ов), помещенного в каталоги \Startup\ или \Start Menu.
            Ниже приведен фрагмент конфигурации, который поможет в отслеживании событий для этой техники.
            Для получения дополнительной информации об этой технике ознакомьтесь с MITRE ATT&CK T1547   -   https://attack.mitre.org/techniques/T1547/

                <RuleGroup name="" groupRelation="or">
                    <FileCreate onmatch="include">
                        <TargetFilename name="T1023" condition="contains">\Start Menu</TargetFilename>
                        <TargetFilename name="T1165" condition="contains">\Startup\</TargetFilename>
                    </FileCreate>
                </RuleGroup>
            
            В результате мы видим, что ФАЙЛ был помещен в папку Startup.
            Злоуышленники почти никогда не делают это настолько очевидным, но любые изменения в меню Start должны быть исследованы.
            
            Вы можете настроить файл конфигурации, чтобы он был более детализированным и создавать оповещения, выходящие за пределы тега File Created.
            Мы также можем фильтровать по имени правила T1023

                <RuleGroup name="" groupRelation="or">
                    <RegistryEvent onmatch="include">
                        <TargetObject name="T1060,RunKey" condition="contains">CurrentVersion\Run</TargetObject>
                        <TargetObject name="T1484" condition="contains">Group Policy\Scripts</TargetObject>
                        <TargetObject name="T1060" condition="contains">CurrentVersion\Windows\Run</TargetObject>
                    </RegistryEvent>
                </RuleGroup>

    ++++++++++++++++++++++++++++++++
    + Detecting Evasion Techniques +
    ++++++++++++++++++++++++++++++++

    Существует ряд методов уклонения, используемых авторами вредоносных программ для обхода как антивирусов, так и обнаружений.
    Вот некоторые из них:
        -   альтернативные потоки данных (Alternate Data Streams)
        -   инъекции (Injections)
        -   маскировка (Masquerading)
        -   упаковка/сжатие (Packing/Compression)
        -   перекомпиляция (Recompiling)
        -   обфускация (Obfuscation)
        -   методы предотвращения обратного выполнения (Anti-Reversing Techniques)
    
    Однако мы сосредоточимся на альтернативных потоках данных и инъекциях.
    
    Альтернативные потоки данных используются вредоносными программами для сокрытия своих файлов от обычной проверки путем сохранения файла в другом потоке, отличном от $DATA.
    Sysmon поставляется с идентификатором события для обнаружения недавно созданных и используемых потоков, что позволяет нам быстро обнаруживать и преследовать вредоносное ПО, использующее ADS.
    
    Методы инъекции бывают разных типов:
        -   перехват потока (Thread Hijacking)
        -   PE-инъекция (PE Injection)
        -   DLL-инъекция (DLL Injection)
        -   другие.
    
    Но мы сосредоточимся на DLL-инъекции и бэкдоринге DLL.
    Это делается путем взятия уже используемой DLL, используемой приложением, и перезаписи или включения вашего вредоносного кода в DLL.
    Для получения дополнительной информации об этой методике ознакомьтесь с MITRE ATT&CK T1564 (https://attack.mitre.org/techniques/T1564/004/) и T1055 (https://attack.mitre.org/techniques/T1055/)

    К примеру:

        *)  Alternate Data Streams

            Первая техника, которую мы рассмотрим, — это скрытие файлов с использованием альтернативных потоков данных с помощью Event ID 15.
            Event ID 15 будет хэшировать и регистрировать любые потоки NTFS, включенные в файл конфигурации Sysmon.
            Это позволит нам охотиться за вредоносным ПО, которое уклоняется от обнаружения с помощью ADS.
            
            Для помощи в охоте на ADS мы будем использовать файл конфигурации SwiftOnSecurity Sysmon.
            Фрагмент кода представлен ниже будет охотиться за файлами в папках Temp и Startup, а также с расширениями .hta и .bat.

                <RuleGroup name="" groupRelation="or">
                    <FileCreateStreamHash onmatch="include">
                        <TargetFilename condition="contains">Downloads</TargetFilename>
                        <TargetFilename condition="contains">Temp\7z</TargetFilename>
                        <TargetFilename condition="ends with">.hta</TargetFilename>
                        <TargetFilename condition="ends with">.bat</TargetFilename>
                    </FileCreateStreamHash>
                </RuleGroup>
            
        *)  Detecting Remote Threads 

            Злоумышленники также часто используют удаленные потоки для уклонения от обнаружения в сочетании с другими методами.
            Удаленные потоки создаются с помощью Windows API CreateRemoteThread и могут быть доступны с помощью OpenThread и ResumeThread.
            Это используется в нескольких методах уклонения, включая внедрение DLL, перехват потока и опустошение процесса.
            
            Мы будем использовать Sysmon event ID 8 из файла конфигурации SwiftOnSecurity.
            Фрагмент кода ниже из правила исключит общие удаленные потоки без включения каких-либо конкретных атрибутов, что позволяет создать более открытое и точное правило события.

                <RuleGroup name="" groupRelation="or">
                    <CreateRemoteThread onmatch="exclude">
                        <SourceImage condition="is">C:\Windows\system32\svchost.exe</SourceImage>
                        <TargetImage condition="is">C:\Program Files (x86)\Google\Chrome\Application\chrome.exe</TargetImage>
                    </CreateRemoteThread>
                </RuleGroup>
            
            В результате мы можем видеть (из представленного лога), powershell.exe создает удаленный поток и обращается к notepad.exe.
            Это, очевидно, PoC и теоретически может выполнить любой другой тип исполняемого файла или DLL.
            Конкретная техника, используемая в этом примере, называется Reflective PE Injection.
        
        **) Detecting Evasion Techniques with PowerShell

            Как и в предыдущих задачах, мы будем использовать Get-WinEvent вместе с XPath для фильтрации и поиска файлов
            В обоих событиях нам нужно будет фильтровать только по EventID, поскольку правило, используемое в файле конфигурации, уже выполняет большую часть тяжелой работы.

                Get-WinEvent -Path <Path to Log> -FilterXPath '*/System/EventID=8'