=====================================================================
* Руководство *
***************

Это пошаговое руководство, цель которой — продемонстрировать проблему, а не подробно описать атаку.

Атака будут выполняться с предоставленных машин Windows 10 (WS001) и Kali Linux.
Предполагается, что злоумышленник уже получил remote code execution (или что-то подобное) на этой машине Windows 10 (WS001).
Пользователь, который, как мы предполагаем, скомпрометирован, — это Боб, обычный пользователь в Active Directory без назначенных специальных разрешений.

Окружение состоит из следующих машин и соответствующих им IP-адресов:

	-	DC1			172.16.18.3
	-	DC2			172.16.18.4
	-	Server01	172.16.18.10
	-	PKI			172.16.18.15
	-	WS001		DHCP или 172.16.18.25 (в зависимости от раздела)
	-	Kali Linux	DHCP или 172.16.18.20 (в зависимости от раздела)

Если надо подключиться к любой из управляющих машин AD сервера (к примеру - DC1)

	i)			Поключаемся к хосту жертвы через RDP
	ii)			Пуск -> Windows Accessories -> Remote Desktop
	iii)		Computer	=	DC1 ip address
				User Name	=	Имя пользователя (к примеру htb-student)
	iv)			Пароль введем позже (будет предоставлен запрос)
	v)			Соглашаемся на устанвку соединения
	
=====================================================================
* Легенда *
***********

В Active Directory списки контроля доступа (ACL - access control list) представляют собой таблицы или простые списки, которые определяют доверенных лиц, имеющих доступ к определенному объекту, и их тип доступа.
Доверенным лицом может быть любой субъект безопасности, такой как учетная запись пользователя, группа или сеанс входа в систему.
Каждый список контроля доступа имеет набор записей контроля доступа (ACE - access control entries), и каждая ACE определяет доверенное лицо и тип доступа, который имеет доверенное лицо.
Таким образом, к объекту могут иметь доступ несколько доверенных лиц, поскольку могут быть различные ACE.

Списки контроля доступа также используются для целей аудита, таких как регистрация количества попыток доступа к защищаемому объекту и типа доступа.
Защищаемый объект — это любой именованный объект в Active Directory, содержащий дескриптор безопасности, который содержит информацию о безопасности объекта, включая ACL.

Примером записи контроля доступа является то, что по умолчанию AD предоставляет администраторам домена право изменять пароль каждого объекта.
Однако права также могут быть делегированы определенным пользователям или группам, которые могут выполнять определенное действие с другими объектами
Это может быть сброс пароля, изменение членства в группе или удаление объектов.
В крупных организациях, если практически невозможно избежать того, чтобы непривилегированные пользователи в конечном итоге получили делегированные права, то они должны исключить человеческие ошибки и иметь четко определенную документацию процесса.

Например, предположим, что сотрудник должен был (случайно/намеренно) сменить свой отдел с ИТ на операции по безопасности.
В этом случае организация должна иметь процесс отзыва всех прав и доступа к системам и приложениям.
В реальных средах AD мы часто будем сталкиваться с такими случаями, как:

	-	Все пользователи домена добавлены в качестве администраторов на все серверы
	-	Каждый может изменять все объекты (имея полные права на них).
	-	Все пользователи домена имеют доступ к расширенным свойствам компьютера, содержащим пароли LAPS.

=====================================================================
* Схема атаки *
***************

Чтобы выявить потенциально злоупотребляемые списки контроля доступа (ACL), мы воспользуемся

	-	BloodHound (https://github.com/SpecterOps/BloodHound-Legacy)
		Для построения графика взаимосвязей между объектами
	
	-	SharpHound (https://github.com/SpecterOps/SharpHound)
		Для сканирования среды и передачи All в параметр -c (короткая версия CollectionMethod):

Сперва SharpHound

	PS C:\...\...\...> .\SharpHound.exe -c All

В результате мы получаем ZIP-файл, созданный SharpHound, который затем можно визуализировать в BloodHound.

Вместо того, чтобы искать каждый неправильно настроенный ACL в среде, мы сосредоточимся на потенциальных путях эскалации, которые исходят от пользователя Bob (нашего первоначального пользователя, которого мы уже скомпрометировали и над которым имеем полный контроль).
Поэтому используя Bloodhound мы сможем получить графическую визуализацию различного доступа, который Bob имеет в данной среде
***	К сожалению, на демонстрационной машине не был предустановлен Bloodhound и мы не имеем доступ в интеренет, чтобы скачать его
	Но, по предоставленным изображениям мы можем увидеть, что данный пользователь (bob) имеет GenericAll Permissions (полные права) на двух других субъектов - Anni и Server01

Вот, что именно Боб может делать с каждым из них:

	1)	Случай 1 - Полные права на пользователя Anni.
		В этом случае Боб может изменить объект Anni, указав некоторое бонусное значение SPN, а затем выполнить атаку Kerberoast против него (если вы помните, успех этой атаки зависит от надежности пароля).
		Однако Боб также может изменить пароль пользователя Anni, а затем войти в систему под этой учетной записью, таким образом, напрямую наследуя и имея возможность выполнять все, что может Anni (если Anni является администратором домена, то у Боба будут те же права).

	2)	Случай 2 - Полный контроль над объектом компьютера (также может быть весьма полезен).
		Если в среде используется LAPS, то Боб может получить пароль, хранящийся в атрибутах, и аутентифицироваться как локальная учетная запись администратора на этом сервере.
		Другой путь эскалации — злоупотребление делегированием Kerberos на основе ресурсов, что позволяет Бобу аутентифицироваться как любой другой на этом сервере.
		Напомним, что если Server01 является доверенным для неограниченного делегирования, то Боб может получить административные права на этом сервере
		Следовательно у него будет потенциальный путь эскалации для компрометации личности контроллера домена или другого чувствительного компьютерного объекта.

Мы также можем использовать ADACLScanner для создания отчетов по спискам контроля дискреционного доступа (DACL) и спискам контроля системного доступа (SACL).

AD ACL Scanner — это мощный легкий PowerShell  скрипт (GUI и командной строки), который предоставит подробную информацию о ACL (списках управления доступом) в Active Directory или серверах Active Directory Lightweight Directory (AD LDS).
Используя S.DS.P (System.DirectoryServices.Protocols), AD ACL Scanner подключается к серверу каталогов и экспортирует, сравнивает и создает отчеты ACL на основе вашего поиска.

Найти его можно тут		-	https://github.com/canix1/ADACLScanner

=====================================================================
* Предотвращение/защита *
*************************

Мы можем сделать три вещи:

	1)	Начать непрерывную оценку, чтобы определить, является ли это проблемой в среде AD.

	2)	Обучить сотрудников с высокими привилегиями избегать этого.

	3)	Максимально автоматизировать процесс управления доступом и назначать привилегированный доступ только административным учетным записям;
		Это гарантирует, что администраторы не будут вручную редактировать учетные записи, что снижает риск предоставления делегированных прав непривилегированным пользователям.

=====================================================================
* Обнаружение *
***************

К счастью, у нас есть несколько способов определить, были ли изменены объекты AD.
Но бывает так, что события, сгенерированные для измененных объектов, неполны, так как они не обеспечивают детальной видимости того, что было изменено.

Например, в первом случае, описанном выше, Боб изменил Anni, добавив значение SPN.
Сделав это, Боб получит возможность выполнить Kerberoasting против Anni.
Когда добавляется значение SPN, генерируется событие с идентификатором 4738 (A user account was changed).
Однако это событие не демонстрирует все измененные свойства пользователя, включая SPN.
Поэтому событие только уведомляет об изменении пользователя, но не указывает, что именно было изменено (хотя у него есть довольно много полей, которые могут быть полезны).

Также, данное событие (4738) будет сгенерировано, если Боб добавит любое поддельное значение SPN в объект пользователя Anni
При нализе такого события особое внимение следует уделять следующим полям:

	-	Account Name (in Subject category)	-	Тот, кто вносил изменения
	-	Account Name (in Target category)	-	Тот, в отношении кого вносились изменения
	-	Changed Attributes category			-	Какие именно изменения были внесены

Поэтому, используя это событие, мы можем определить, выполняет ли непривилегированный пользователь привилегированные действия для другого пользователя.
Если, например, все привилегированные пользователи имеют соглашение об именовании, которое начинается с «adminxxxx», то любое изменение, не связанное с «adminxxxx», является подозрительным.

Если злоупотребление ACL приводит к сбросу пароля, будет зарегистрирован идентификатор события 4724 (An attempt was made to reset an account's password).

Аналогично, если бы Боб выполнил второй сценарий, было бы сгенерировано событие с идентификатором 4742 (A computer account was changed)
Которое, к сожалению, также ограничено в информации, которую оно может предоставить
Однако оно уведомляет о действии, что учетная запись пользователя Боба скомпрометирована и используется злонамеренно.

=====================================================================
* Ловушка/Honeypot *
********************

Неправильно настроенные списки контроля доступа могут быть эффективным механизмом обнаружения подозрительного поведения.
Есть два способа подойти к этому:

	1)	Назначьте относительно высокие списки контроля доступа учетной записи пользователя, используемой в качестве приманки, с помощью ранее обсуждавшейся техники
		Например, пользователю, чьи поддельные учетные данные указаны в поле описания.
		Назначение списков контроля доступа учетной записи может спровоцировать злоумышленника на попытку проверки действительности раскрытого пароля учетной записи, поскольку он имеет высокий потенциал.

	2)	Имейте учетную запись, которую может изменять каждый или многие пользователи.
		В идеале этот пользователь будет пользователем приманки, с некоторой активностью для имитации реальных пользователей.
		Любые изменения, происходящие с этим пользователем приманки, являются вредоносными, поскольку нет никаких веских причин для выполнения каких-либо действий с ним кем-либо (кроме администраторов, которым иногда может потребоваться сбросить пароль учетной записи, чтобы учетная запись выглядела реалистично).
		Поэтому любой идентификатор события 4738 (A user account was changed), связанный с пользователем приманки, должен вызывать оповещение.
		Кроме того, зрелые организации могут немедленно отключить пользователя, выполняющего изменение, и инициировать судебно-медицинское расследование на исходном устройстве.
		