=====================================================================
* Sysmon Overview *
*******************

Системный монитор (Sysmon) — это системная служба Windows и драйвер устройства, который после установки в системе остается постоянныс при перезагрузках системы для мониторинга и регистрации активности системы в журнале событий Windows.
Он предоставляет подробную информацию о создании процессов, сетевых подключениях и изменениях времени создания файлов.
Собирая события, которые он генерирует, с помощью сбора событий Windows или агентов SIEM и затем анализируя их, вы можете определить вредоносную или аномальную активность и понять, как злоумышленники и вредоносное ПО действуют в вашей сети.
Sysmon собирает подробные и высококачественные журналы, а также трассировку событий, которая помогает выявлять аномалии в вашей среде.

События в Sysmon хранятся в -   Applications and Services Logs/Microsoft/Windows/Sysmon/Operational
Полный список идентификаторов событий Sysmon можно найти здесь  -   https://learn.microsoft.com/en-us/sysinternals/downloads/sysmon

Для более детального контроля над тем, какие события регистрируются, Sysmon использует файл конфигурации на основе XML.
Файл конфигурации позволяет включать или исключать определенные типы событий на основе различных атрибутов, таких как имена процессов, IP-адреса и т. д.
Вы можете создать свой собственный файл конфигурации Sysmon или загрузить его.
Вот пример высококачественной конфигурации, которая хорошо подходит для выявления аномалий, созданных SwiftOnSecurity   -   https://github.com/SwiftOnSecurity/sysmon-config
Другой вариант, который обеспечивает модульный подход   -   https://github.com/olafhartong/sysmon-modular

Sysmon включает 29 различных типов идентификаторов событий, все из которых могут использоваться в конфигурации для указания того, как события должны обрабатываться и анализироваться.
При создании или изменении файлов конфигурации вы заметите, что большинство правил в sysmon-config будут исключать события, а не включать их.
Это поможет отфильтровать обычную активность в вашей среде, что, в свою очередь, уменьшит количество событий и оповещений, которые вам придется вручную проверять или искать в SIEM.

С другой стороны, существуют наборы правил, такие как ION-Storm sysmon-config fork, который использует более проактивный подход к своему набору правил, используя множество правил включения.
Возможно, вам придется изменить файлы конфигурации, чтобы найти тот подход, который вы предпочитаете.
Настройки конфигурации будут различаться в зависимости от команды SOC, поэтому будьте готовы проявить гибкость при мониторинге.

Основные компоненты Sysmon включают:

    -   Служба Windows для мониторинга активности системы.
    -   Драйвер устройства, который помогает в сборе данных об активности системы.
    -   Журнал событий для отображения собранных данных активности.

    ++++++++++++++++++++++
    + Sysmon Instalation +
    ++++++++++++++++++++++

    Установка Sysmon довольно проста и требует только загрузки двоичного файла с веб-сайта Microsoft.

    Для начала вы можете установить Sysmon, загрузив его из официальной документации Microsoft (https://docs.microsoft.com/en-us/sysinternals/downloads/sysmon).
    После загрузки откройте командную строку администратора и выполните следующую команду для установки Sysmon из папки,где он находится

        C:\....\....\....\sysmon.exe -i -accepteula -h md5,sha256,imphash -l -n
    
    Чтобы использовать пользовательскую конфигурацию Sysmon, выполните следующее после установки Sysmon

        C:\....\....\....\sysmon.exe -c filename.xml
    
    Чтобы просмотреть события сгенерированные Sysmon, перейдите в Event Viewer и откройте "Applications and Services" -> "Microsoft" -> "Windows" -> "Sysmon"

    Чтобы полностью использовать Sysmon, вам также потребуется загрузить конфигурацию Sysmon или создать свою собственную конфигурацию.
    Конфигурация Sysmon позволит осуществлять более детальный контроль над журналами, а также более детальную трассировку событий. 
    Мы предлагаем загрузить SwiftOnSecurity sysmon-config.

    Чтобы запустить Sysmon, вам нужно будет открыть новый PowerShell или командную строку от имени администратора.
    Затем выполните следующую команду, она выполнит двоичный файл Sysmon, примет лицензионное соглашение с конечным пользователем и использует файл конфигурации SwiftOnSecurity.

        Sysmon.exe -accepteula -i C:\path\to\the\Configuration\file.xml
    
    Дополнительные комнады, которые могут потребоваться для запуска Sysmon, можно найти тут     -   https://learn.microsoft.com/en-us/sysinternals/downloads/sysmon

    *** В любое время вы можете изменить используемый файл конфигурации, удалив или обновив текущую конфигурацию и заменив ее новым файлом конфигурации.
        Для получения дополнительной информации просмотрите меню справки Sysmon.
    
    ++++++++++++++++++++
    + Sysmon EventIDs +
    ++++++++++++++++++++

    Поскольку Sysmon анализирует так много идентификаторов событий, мы рассмотрим только несколько из них, которые наиболее важны для понимания.

    Использование любого идентификатора требует наличие конфигурационого файла, который в свою очередь ОБЯЗАН содержать следующую информацию в самом начале

    <Sysmon schemaversion="#.##"> <!-- #.## Должна соответсвовать версии установленношл SYSMON. Для определения версии установленного SYSMON используется следующая команда в комнадной строке sysmon -s | more  -->
		<HashAlgorithms>md5,sha256,IMPHASH</HashAlgorithms> <!-- Указываете HASH алгоритмы, которые вы хотите использовать. -->
	    <CheckRevocation/> <!-- Check loaded drivers, log if their code-signing certificate has been revoked, in case malware stole one to sign a kernel driver -->
        	<EventFiltering>
                И вот здесь уже вы можете разместить ваши идентификаторы, которые вы хотите применить к лог-файлу
                ...
                ...
                ...
            </EventFiltering>
    </Sysmon>

        ////////////////////////////////////
        /// Event ID 1: Process Creation ///
        ////////////////////////////////////

        Это событие будет искать все созданные процессы.
        Вы можете использовать это для поиска известных подозрительных процессов или процессов с опечатками, которые можно считать аномалией.
        
        Это событие будет использовать XML-теги CommandLine и Image.

        Приведенный ниже фрагмент кода указывает идентификатор события, из которого нужно извлечь данные, а также условие, которое нужно искать.
        В этом случае он исключает процесс svchost.exe из журналов событий

            <RuleGroup name="" groupRelation="or">
                <ProcessCreate onmatch="exclude">
                    <CommandLine condition="is">C:\Windows\system32\svchost.exe -k appmodel -p -s camsvc</CommandLine>
                </ProcessCreate>
            </RuleGroup>

        //////////////////////////////////////
        /// Event ID 3: Network Connection ///
        //////////////////////////////////////

        Событие сетевого подключения будет искать события, которые происходят удаленно.
        Это будет включать файлы и источники подозрительных двоичных файлов, а также открытые порты.
        
        Это событие будет использовать XML-теги Image и DestinationPort.

        Приведенный ниже фрагмент кода включает два способа определения подозрительной активности сетевого подключения.
        Сперва мы определяем файлы, передаваемые через открытые порты.
        *** В этом случае мы специально ищем nmap.exe, который затем будет отражен в журналах событий.
        Затем нам надо определить открытые порты и, в частности, порт 4444, который обычно используется с Metasploit.
        Если условие выполняется, будет создано событие и, в идеале, будет запущено оповещение для SOC для дальнейшего расследования.

            <RuleGroup name="" groupRelation="or">
                <NetworkConnect onmatch="include">
                    <Image condition="image">nmap.exe</Image>
                    <DestinationPort name="Alert,Metasploit" condition="is">4444</DestinationPort>
                </NetworkConnect>
            </RuleGroup>
        
        ////////////////////////////////
        /// Event ID 7: Image Loaded ///
        ////////////////////////////////

        Это событие будет искать загруженные процессами DLL, что полезно при поиске атак DLL Injection и DLL Hijacking.
        !!! Рекомендуется проявлять осторожность при использовании этого идентификатора события, поскольку он вызывает высокую нагрузку на систему.
        
        Это событие будет использовать XML-теги Image, Signed, ImageLoaded и Signature.

        Приведенный ниже фрагмент кода будет искать любые DLL, загруженные в каталог \Temp\.
        Если DLL загружена в этот каталог, это можно считать аномалией и требует дальнейшего изучения.

            <RuleGroup name="" groupRelation="or">
                <ImageLoad onmatch="include">
                    <ImageLoaded condition="contains">\Temp\</ImageLoaded>
                </ImageLoad>
            </RuleGroup>
    
        //////////////////////////////////////
        /// Event ID 8: CreateRemoteThread ///
        //////////////////////////////////////

        Идентификатор события CreateRemoteThread будет отслеживать процессы, внедряющие код в другие процессы.
        Функция CreateRemoteThread используется для законных задач и приложений.
        Однако она может использоваться вредоносным ПО для сокрытия вредоносной активности.
        
        Это событие будет использовать XML-теги SourceImage, TargetImage, StartAddress и StartFunction.

        В приведенном ниже фрагменте кода показаны два способа мониторинга CreateRemoteThread.
            1)  Первый метод будет искать адрес памяти для определенного конечного условия, которое может быть индикатором маяка Cobalt Strike.
            2)  Второй метод будет искать внедренные процессы, у которых нет родительского процесса. Это следует считать аномалией и требовать дальнейшего изучения.

            <RuleGroup name="" groupRelation="or">
                <CreateRemoteThread onmatch="include">
                    <StartAddress name="Alert,Cobalt Strike" condition="end with">0B80</StartAddress>
                    <SourceImage condition="contains">\</SourceImage>
                </CreateRemoteThread>
            </RuleGroup>

        /////////////////////////////////
        /// Event ID 11: File Created ///
        /////////////////////////////////

        Этот идентификатор события будет регистрировать события, когда файлы создаются или перезаписываются конечной точкой.
        Это может использоваться для идентификации имен файлов и подписей файлов, которые записываются на диск.
        
        Это событие использует XML-теги TargetFilename.

        Приведенный ниже фрагмент кода является примером монитора событий программы-вымогателя.
        Это всего лишь один пример из множества различных способов использования Event ID 11.

            <RuleGroup name="" groupRelation="or">
                <FileCreate onmatch="include">
                    <TargetFilename name="Alert,Ransomware" condition="contains">HELP_TO_SAVE_FILES</TargetFilename>
                </FileCreate>
            </RuleGroup> 
        
        /////////////////////////////////////////////
        /// Event ID 12 / 13 / 14: Registry Event ///
        /////////////////////////////////////////////

        Это событие ищет изменения или модификации в реестре.
        Вредоносная активность из реестра может включать в себя сохранение и злоупотребление учетными данными.
        
        Это событие использует XML-теги TargetObject.

        Приведенный ниже фрагмент кода будет искать объекты реестра, находящиеся в каталоге «Windows\System\Scripts», поскольку это обычный каталог, в котором злоумышленники размещают скрипты для обеспечения устойчивости.

            <RuleGroup name="" groupRelation="or">
                <RegistryEvent onmatch="include">
                    <TargetObject name="T1484" condition="contains">Windows\System\Scripts</TargetObject>
                </RegistryEvent>
            </RuleGroup>
        
        /////////////////////////////////////////
        /// Event ID 15: FileCreateStreamHash ///
        /////////////////////////////////////////

        Это событие будет искать любые файлы, созданные в альтернативном потоке данных.
        Это распространенный метод, используемый злоумышленниками для сокрытия вредоносного ПО.
        
        Это событие использует XML-теги TargetFilename.

        Приведенный ниже фрагмент кода будет искать файлы с расширением .hta, которые были помещены в альтернативный поток данных.

            <RuleGroup name="" groupRelation="or">
                <FileCreateStreamHash onmatch="include">
                    <TargetFilename condition="end with">.hta</TargetFilename>
                </FileCreateStreamHash>
            </RuleGroup> 
        
        //////////////////////////////
        /// Event ID 22: DNS Event ///
        //////////////////////////////

        Это событие будет регистрировать все запросы и события DNS для анализа.
        Наиболее распространенный способ борьбы с этими событиями — исключить все доверенные домены, которые, как вы знаете, будут очень распространенным «шумом» в вашей среде.
        После того, как вы избавитесь от шума, вы сможете искать аномалии DNS.
        
        Это событие использует теги XML QueryName.

        Приведенный ниже фрагмент кода исключит любые события DNS с запросом .microsoft.com.
        Это избавит вас от шума, который вы видите в среде.


    
