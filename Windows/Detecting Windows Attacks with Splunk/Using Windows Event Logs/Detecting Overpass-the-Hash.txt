=====================================================================
* Введение *
************

Это пошаговое руководство, цель которой — продемонстрировать проблему, а не подробно описать атаку

Однако, дам один полезнй совет  -   если Вы застряли на каком-то этапе, так как фильтр, который Вы используете не дает нужного ответа, то просто удалите его, НО оставьте только те моменты в которых Вы полностью усовершенствованный
К примеру, Вам надо найти сервис, который был отакован скопроментированным полователем, но используемый фильтр, который вывел Вас на скопроментированного пользователя, не отображает нужную Вам информацию
Тогда, Вам надо удалить все, но оставить только index, username, soureimage (если используете), earliest/latest (если точно уверены во временном диапозоне)
И уже вычленять информацию из предоставленного результата
Более того, желательно знать значение EvenCode or EventID, но на крайний случай спросить интеренет

=====================================================================
* Overpass-the-Hash *
*********************

Злоумышленники могут использовать технику Overpass-the-Hash для получения Kerberos TGT, используя украденные хэши паролей для бокового скольжения в пределах среды или для обхода типичных системных средств контроля доступа.
Overpass-the-Hash (также известный как Pass-the-Key) позволяет выполнять аутентификацию через Kerberos, а не NTLM.
Как NTLM-хэши, так и ключи AES могут служить основой для запроса Kerberos TGT.

Данный тип атаки выглядит как симбиоз Pass-The-Hash & Pass-The-Ticket
Вот как выглядит атака по шагам:

    -   Атакующий использует такие инструменты, как Mimikatz, для извлечения NTLM-хэша пользователя, который в данный момент вошел в скомпрометированную систему.
        Атакующий должен иметь как минимум привилегии локального администратора в системе, чтобы иметь возможность извлечь хэш пользователя.

            mimikatz # sekurlsa::logonpasswords
    
    -   Атакующий использует такой инструмент, как Rubeus, для создания сырого запроса AS-REQ для указанного пользователя, чтобы запросить билет TGT.
        Этот шаг не требует повышенных привилегий на хосте для запроса TGT, что делает его более скрытным подходом, чем атака Mimikatz Pass-the-Hash.

            C:\Users\johndoe\tools> .\Rubeus.exe asktgt /user:<target_username> /domain:<target.domain.name /rc4:<NTLM_hash_value> ptt
        
    -   Аналогично технике Pass-the-Ticket злоумышленник отправляет запрошенный билет для текущего сеанса входа в систему.

            C:\Users\johndoe\tools> .\Rubeus.exe ptt /ticket:<Base64EncodedTicket_value>

    +++++++++++++++++++++++++++++++++++++++++++++
    + Overpass-the-Hash Detection Opportunities +
    +++++++++++++++++++++++++++++++++++++++++++++

    Использование утилиты Mimikatz для атаки типа Overpass-the-Hash оставляет те же артефакты, что и атака Pass-the-Hash, и может быть обнаружена с использованием тех же стратегий.

    Однако использование Rubeus представляет собой несколько иной сценарий.
    Если запрошенный TGT не используется на другом хосте, механизмы обнаружения Pass-the-Ticket могут быть неэффективны
    Поскольку Rubeus отправляет запрос AS-REQ непосредственно на контроллер домена (DC), генерируя Event ID 4768 (Kerberos TGT Request).
    Однако связь с DC (порт TCP/UDP 88) от необычного процесса может служить индикатором потенциальной атаки Overpass-the-Hash.

    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    + Detecting Overpass-the-Hash With Splunk (Targeting Rubeus) +
    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    Теперь давайте рассмотрим, как можно идентифицировать Overpass-the-Hash с помощью Splunk.

    Представленный ниже фильтр ищет и анализирует события Sysmon из журнала Windows, чтобы выявить сетевые подключения к порту 88 (Kerberos) не от процесса lsass.exe, а также создание процессов, и связывает их с сетевыми активностями.

        index=main earliest=1690443407 latest=1690443544 source="XmlWinEventLog:Microsoft-Windows-Sysmon/Operational" (EventCode=3 dest_port=88 Image!=*lsass.exe) OR EventCode=1
        | eventstats values(process) as process by process_id
        | where EventCode=3
        | stats count by _time, Computer, dest_ip, dest_port, Image, process
        | fields - count
    
    Вот расшифровка ключевых моментов фильтра:

        -   eventstats
            Формирует статистику по указанному элементу
            В нашем случае статистика будет формироваться по процессу
            Для каждой уникальной группы process_id (PID), собирает все связанные значения поля process.
            Сохраняет их в новое поле process, доступное для следующих шагов.
            Это помогает сопоставить сетевое соединение с командной строкой или другим атрибутом процесса.
        
        -   fields
            Убирает указанное поле из вывода, оставляя только содержательные поля
    
    Таким образом, цель данного фильтра     -   обнаружить подозрительные сетевые подключения к порту 88 (Kerberos), сделанные не lsass.exe, а другими процессами, которые были недавно запущены (отфильтрованы через EventCode=1 и сопоставлены по PID).