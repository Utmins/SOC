=====================================================================
* Введение *
************

Хотя в данном обзоре будут представленные способы, которые можно использовать для проникновения/взлома домена
Тем не менее, основной фокус будет направлен на демонстрацию возможности противостоять описанным уязвимостяму.

Список интернет ресурсов, которые могут быть полезны в данном вопросе:

	-	Список фильтров LDAP-запросов составленный Microsoft Defender ATP Research Team 
		https://techcommunity.microsoft.com/blog/microsoftdefenderatpblog/hunting-for-reconnaissance-activities-using-ldap-search-filters/824726

	++++++++++++++++
	+ Domain Recon +
	++++++++++++++++

	Разведка домена Active Directory (AD) представляет собой ключевой этап в жизненном цикле кибератаки.
	На этом этапе злоумышленники пытаются собрать информацию о целевой среде, стремясь понять ее архитектуру, топологию сети, меры безопасности и потенциальные уязвимости.

	Проводя разведку домена AD, злоумышленники сосредотачиваются на выявлении важнейших компонентов, таких как:

		-	контроллеры домена
		-	учетные записи пользователей
		-	группы
		-	доверительные отношения
		-	организационные подразделения (OU)
		-	групповые политики
		-	и другие важные объекты.

	Получая информацию о среде AD, злоумышленники могут потенциально точно определить высокоценные цели, повысить свои привилегии и перемещаться по сети.

	Рассмотрим некоторые (общеизвестные) методы, используемые для анализа/разведки пользователей/домена

		////////////////////////////////////////
		/// Using Native Windows Executables ///
		////////////////////////////////////////

		Самым "простым" примером разведки домена AD является случай, когда злоумышленник выполняет команду net group для получения списка администраторов домена

			PS C:\Users\<user_name> > net group "Domains Admins" /domain

			The request will be processed at a domain controller for domain KFAero.ca.

Group name     Domain Admins
Comment        Designated administrators of the domain

Members

-------------------------------------------------------------------------------
<name>.admin             Administrator            <name>.admin
<name>             

The command completed successfully.

		Помимо того, что было продемонстрированно, следующие инструменты/команды, также часто используются для разведки домена:

			-	whoami /all
			-	wmic computersystem get domain
			-	net user /domain
			-	arp -a
			-	nltest /domain_trusts

		Для обнаружения администраторы могут использовать PowerShell для мониторинга необычных скриптов или командлетов и мониторинга командной строки.

		///////////////////////////////////
		/// Using BloodHound/SharpHound ///
		///////////////////////////////////

		BloodHound — это инструмент разведки домена с открытым исходным кодом, созданный для анализа и визуализации среды Active Directory (AD).
		Он часто используется злоумышленниками для выявления путей атак и потенциальных рисков безопасности в инфраструктуре AD организации.
		BloodHound использует графическое (схематическое) отображение связей для выяснения доверительных отношений, разрешений и членства в группах в домене AD.

		Sharphound — это сборщик данных C# для BloodHound.
		Для этого злоумышленнику необходимо запустить одноименный исполнительный файл на скомпроментированной учетной записи с ключом (-c all)

			PS C:\Users\<user_name> > .\Sharphound3.exe -c all

		Принцип работы BloodHound заключается в следующем - он выполняет многочисленные запросы LDAP, направленные на контроллер домена, с целью сбора информации о домене.

		Однако мониторинг запросов LDAP может быть сложной задачей.
		По умолчанию журнал событий Windows не записывает их.
		Лучший вариант, который может предложить Windows — это использование события 1644 (журнала мониторинга производительности LDAP // the LDAP performance monitoring log)
		Тем не менне, даже при его включении BloodHound может не генерировать многие из ожидаемых событий.

		Более надежный подход — использовать Windows ETW (Event Tracing for Windows)-провайдер Microsoft-Windows-LDAP-Client.
		Как Вы можете уже знать, SilkETW и SilkService — это универсальные C#-оболочки для ETW, разработанные для упрощения тонкостей ETW, предоставляя доступный интерфейс для исследования и интроспекции.
		SilkService поддерживает вывод в журнал событий Windows, что упрощает обработку журналов.
		Еще одной полезной функцией является возможность использовать правила Yara для поиска подозрительных запросов LDAP.

		Исследовательская группа Microsoft Defender ATP составила список подозрительных запросов поисковых фильтров, которые, как было обнаружено, используются в дикой природе товарными и разведывательными инструментами.
		Этот список дает представление и выделяет интересные фильтры запросов LDAP, происходящие из безфайловых или основанных на файлах исполнений
		Вооружившись этим списком фильтров LDAP, можно более эффективно обнаруживать активность BloodHound.

		Recon tool					Filter

		enum_ad_user_comments (Metasploit)		(&(&(objectCategory=person)(objectClass=user))(|(description=*pass*)(comment=*pass*)))
		enum_ad_computers (Metasploit)			(&(objectCategory=computer)(operatingSystem=*server*))
		enum_ad_groups (Metasploit)			(&(objectClass=group))
								(&(objectClass=group)(managedBy=*))
		enum_ad_managedby_groups(Metasploit)		(&(objectClass=group)(managedBy=*)(groupType:1.2.840.113556.1.4.803:=2147483648))
		Get-NetComputer (PowerView)			(&(sAMAccountType=805306369)(dnshostname=*))
		Get-NetUser - Users (Powerview)			(&(samAccountType=805306368)(samAccountName=*)
		Get-NetUser - SPNs (Powerview)			(&(samAccountType=805306368)(servicePrincipalName=*)
		Get-DFSshareV2 (Powerview)			(&(objectClass=msDFS-Linkv2))
		Get-NetOU (PowerView)				(&(objectCategory =organizationalUnit)(name=*))
		Get-DomainSearcher (Empire)			(samAccountType=805306368)

	+++++++++++++++++++++++++++++++++++++++++++
	+ Detecting User/Domain Recon With Splunk +
	+++++++++++++++++++++++++++++++++++++++++++
	
	Теперь давайте рассмотрим, как можно идентифицировать рассмотренные ранее методы разведки с помощью Splunk.

		///////////////////////////////////////////////////////////////
		/// Detecting Recon By Targeting Native Windows Executables ///
		///////////////////////////////////////////////////////////////

		Следующий синтаксис может быть использоан для обнаружения встроенных спосбов анализа домена

			index=main source="XmlWinEventLog:Microsoft-Windows-Sysmon/Operational" EventID=1 earliest=1690447949 latest=1690450687
			| search process_name IN (arp.exe,chcp.com,ipconfig.exe,net.exe,net1.exe,nltest.exe,ping.exe,systeminfo.exe,whoami.exe) OR (process_name IN (cmd.exe,powershell.exe) AND process IN (*arp*,*chcp*,*ipconfig*,*net*,*net1*,*nltest*,*ping*,*systeminfo*,*whoami*))
			| stats values(process) as process, min(_time) as _time by parent_process, parent_process_id, dest, user
			| where mvcount(process) > 3

		Давайте подробно разберем его состав

			-	Index and Source
				Поиск начинается с выбора событий из основного индекса, где источником является XmlWinEventLog:Microsoft-Windows-Sysmon/Operational, который представляет собой журнал событий Windows в формате XML для событий Sysmon (системный монитор).
				Sysmon — это служба и драйвер устройства, который регистрирует системную активность в журнале событий.

			-	EventID Filter
				Поиск дополнительно фильтруется для выбора только событий с идентификатором события 1.
				В Sysmon идентификатор события 1 соответствует событиям создания процесса, которые регистрируют данные о вновь созданных процессах.

			-	Time Range Filter (earliset / latest)
				Поиск ограничивает временной диапазон событий теми, которые происходят между временными метками Unix 1690447949 и 1690450687.
				Эти временные метки представляют самое раннее (earliest) и самое позднее (latest) время, когда произошли события.

			-	process_name Filter процесса
				Фильтр событий/процессов исползуется чтобы включить только те, где поле process_name является одним из списка определенных имен процессов (например, arp.exe, chcp.com, ipconfig.exe и т. д.
				Или где поле process_name является cmd.exe или powershell.exe, а поле process содержит определенные подстроки.
				На этом этапе выполняется поиск событий, которые включают определенные системные или сетевые команды, а также событий, где эти команды были запущены из командной строки или сеанса PowerShell.

			-	Stats Filter
				Команда stats используется для агрегирования событий на основе полей parent_process, parent_process_id, dest и user.
				Для каждой уникальной комбинации этих полей поиск вычисляет следующую статистику:

					*	values(process) as process
						это фиксирует все уникальные значения поля process как многозначное поле с именем process.

					*	min(_time) as _time
						это фиксирует самое раннее время (_time), когда событие произошло в каждой группе.

			-	Filtering by Process Count (where)
				Команда where используется для фильтрации результатов с целью включения только тех, у которых количество процессов в поле больше 3.
				На этом этапе ищутся случаи, когда несколько процессов (более трех) были выполнены одним и тем же родительским процессом.

		///////////////////////////////////////////////
		/// Detecting Recon By Targeting BloodHound ///
		///////////////////////////////////////////////
	
		Следующий синтаксис может быть использоан для обнаружения BloodHound сканирования домена

			index=main earliest=1690195896 latest=1690285475 source="WinEventLog:SilkService-Log"
			| spath input=Message 
			| rename XmlEventData.* as * 
			| table _time, ComputerName, ProcessName, ProcessId, DistinguishedName, SearchFilter
			| sort 0 _time
			| search SearchFilter="*(samAccountType=805306368)*"
			| stats min(_time) as _time, max(_time) as maxTime, count, values(SearchFilter) as SearchFilter by ComputerName, ProcessName, ProcessId
			| where count > 10
			| convert ctime(maxTime)

		Давайте подробно разберем его состав

			-	Index Filter
				Поиск начинается с выбора событий из основного индекса, где источником является WinEventLog:SilkService-Log.
				Этот источник представляет данные журнала событий Windows, собранные SilkETW.

			-	Time Range Filter
				Поиск ограничивает временной диапазон событий теми, которые происходят между временными метками Unix 1690195896 и 1690285475.
				Эти временные метки представляют самое раннее и самое позднее время, когда произошли события.

			-	spath Filter (extraction)
				Команда spath используется для извлечения полей из поля сообщения, которое, вероятно, содержит структурированные данные, такие как XML или JSON.
				Она автоматически идентифицирует и извлекает поля на основе структуры данных.

			-	Rename Filter
				Команда rename используется для переименования полей, начинающихся с XmlEventData., в эквивалентные имена полей без префикса XmlEventData.
				Это делается для более легкой ссылки на поля на более поздних этапах поиска.

			-	Table Filter
				Команда table используется для отображения результатов в табличном формате со следующими столбцами: _time, ComputerName, ProcessName, ProcessId, DistinguishedName и SearchFilter.
				Она включает в вывод только эти поля.

			-	Sort Filter
				Команда sort используется для сортировки результатов на основе поля _time в порядке возрастания (от самого старого к самому новому).
				Аргумент 0 означает, что нет ограничений на количество результатов для сортировки.

			-	Search Filter
				Команда search используется для фильтрации результатов, чтобы включить только события, в которых поле SearchFilter содержит строку *(samAccountType=805306368)*.
				На этом этапе выполняется поиск событий, связанных с запросами LDAP с определенным условием фильтра.

			-	Stats Filter
				Команда stats используется для агрегации событий на основе полей ComputerName, ProcessName и ProcessId.
				Для каждой уникальной комбинации этих полей поиск вычисляет следующую статистику:

					*	min(_time) as _time
						самое раннее время (_time), когда событие произошло в каждой группе.

					*	max(_time) as maxTime
						самое позднее время (_time), когда событие произошло в каждой группе.

					*	count
						количество событий в каждой группе.

					*	values(SearchFilter) as SearchFilter
						все уникальные значения поля SearchFilter в каждой группе.

			-	Where Filter
				Команда where используется для фильтрации результатов, чтобы включить только те, у которых поле count больше 10.
				На этом этапе ищутся случаи, когда один и тот же процесс на одном и том же компьютере сделал более десяти поисковых запросов с указанным условием фильтра.

			-	Convert Filter
				Команда convert используется для преобразования поля maxTime из формата временной метки Unix в удобный для чтения формат (ctime).

