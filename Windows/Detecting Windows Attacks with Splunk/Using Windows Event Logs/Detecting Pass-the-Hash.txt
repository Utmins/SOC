=====================================================================
* Введение *
************

Это пошаговое руководство, цель которой — продемонстрировать проблему, а не подробно описать атаку

=====================================================================
* Pass-the-Hash *
*****************

Pass-the-Hash   -   это метод, используемый злоумышленниками для аутентификации в сетевой системе с использованием NTLM-хеша пароля пользователя вместо открытого пароля.
Атака использует способ, которым Windows хранит хеши паролей в памяти, позволяя злоумышленникам с административным доступом перехватывать хеш и повторно использовать его для горизонтального перемещения в сети.

Вот как выглядит атака по шагам:

    -   Атакующий использует такие инструменты, как Mimikatz, для извлечения NTLM-хэша пользователя, который в данный момент вошел в скомпрометированную систему.
        Обратите внимание, что для извлечения хеша пользователя в системе требуются привилегии локального администратора.

            mimikatz # sekurlsa::logonpasswords
    
    -   Вооружившись хэшем NTLM, злоумышленник может аутентифицироваться как целевой пользователь в других системах или сетевых ресурсах, не зная при этом фактический пароль.

            mimikatz # sekurlsa::pth /user:Administrator /ntlm:<NTLM_hash_value> /domain:<domain_name>.local
    
    -   Используя аутентифицированный сеанс, злоумышленник может перемещаться по сети, получая несанкционированный доступ к другим системам и ресурсам.

    +++++++++++++++++++++++++++++++++++++++++++++++++
    + Windows Access Tokens & Alternate Credentials +
    +++++++++++++++++++++++++++++++++++++++++++++++++

    Токен доступа   -   это структура данных, которая определяет контекст безопасности процесса или потока.
    Он содержит информацию об идентификаторе и привилегиях связанной учетной записи пользователя.
    Когда пользователь входит в систему, система проверяет пароль пользователя, сравнивая его с информацией, хранящейся в базе данных безопасности.
    Если пароль аутентифицирован, система генерирует токен доступа.
    Впоследствии любой процесс, выполняемый от имени этого пользователя, обладает копией этого токена доступа.

    Альтернативные учетные данные предоставляют способ предоставления различных учетных данных для входа (имя пользователя и пароль) для определенных действий или процессов без изменения основного сеанса входа пользователя.
    Это позволяет пользователю или процессу выполнять определенные команды или получать доступ к ресурсам КАК ДРУГОЙ пользователь без выхода из системы или переключения учетных записей пользователей.
    
    Команда runas   -   это инструмент командной строки Windows, который позволяет пользователям выполнять команды как другой пользователь.
    При выполнении команды runas генерируется новый токен доступа, который можно проверить с помощью команды whoami.
    К примеру, приведенная ниже команда позволяет запустить командную строку (cmd.exe) от имени другого пользователя указанного домена, не выходя из сессии текущего пользователя (при наличии пароля того самого другого пользователя)

        C:\Users\johndoe> runas/user:<domain.name>\<other_user_name> cmd.exe
        Enter the password for <domain.name>\<other_user_nameuser_name>:
        Attempting to start cmd.exe as user "<domain.name>\<other_user_nameuser_name>" ...

    Если пароль был введен правильно, то откроется новое окно командно строки, которое будет называться "<other_user_name>: cmd.exe (running as <domain.name>\<other_user_nameuser_name>)"

        C:\Widows\system32> whoami
        <domain.name>\<other_user_name>
    
    Команда runas также содержит интересный флаг /netonly.
    Этот флаг указывает, что указанная информация пользователя предназначена только для удаленного доступа.
    Несмотря на то, что команда whoami возвращает исходное имя пользователя, порожденный cmd.exe все еще может получить доступ к корневой папке контроллера домена.

        C:\Users\johndoe> runas/user:<domain.name>\<other_user_name> /netonly cmd.exe
        Enter the password for <domain.name>\<other_user_nameuser_name>:
        Attempting to start cmd.exe as user "<domain.name>\<other_user_nameuser_name>" ...

        C:\Widows\system32> whoami
        <domain.name>\johndoe

    Каждый токен доступа ссылается на LogonSession, сгенерированный при входе пользователя в систему.
    Эта структура безопасности LogonSession содержит такую ​​информацию, как имя пользователя, домен и AuthenticationID (NTHash/LMHash), и используется, когда процесс пытается получить доступ к удаленным ресурсам.
    Когда используется флаг netonly, процесс имеет тот же токен доступа, но другой LogonSession.

    +++++++++++++++++++++++++++++++++++++++++
    + Pass-the-Hash Detection Opportunities +
    +++++++++++++++++++++++++++++++++++++++++

    С точки зрения журнала событий Windows при выполнении команды runas генерируются следующие журналы:

        -   Event ID 4624 (Logon) with LogonType 2
            При выполнении команды runas без флага /netonly
        
        -   Event ID 4624 (Logon) with LogonType 9
            Когда команда runas выполняется с флагом /netonly
    
    Простое обнаружение будет включать поиск Event ID 4624 и LogonType 9, но, как упоминалось ранее, могут быть некоторые ложные срабатывания, связанные с использованием runas.

    Главное различие между runas с флагом netonly и атакой Pass-the-Hash заключается в том, что в последнем случае Mimikatz будет получать доступ к памяти процесса LSASS для изменения материалов учетных данных LogonSession.
    Таким образом, первоначальное обнаружение может быть улучшено путем сопоставления событий User Logon with NewCredentials с кодом события Sysmon Process Access 10.

    +++++++++++++++++++++++++++++++++++++++
    + Detecting Pass-the-Hash With Splunk +
    +++++++++++++++++++++++++++++++++++++++

    Прежде чем перейти к рассмотрению поисков, обратитесь к этому источнику, чтобы лучше понять, откуда взялась часть поиска Logon_Process=seclogo.

        https://blog.netwrix.com/2021/11/30/how-to-detect-pass-the-hash-attacks/
    
    Теперь давайте рассмотрим, как можно определить Pass-the-Hash с помощью Splunk.

        index=main earliest=1690450708 latest=1690451116 source="WinEventLog:Security" EventCode=4624 Logon_Type=9 Logon_Process=seclogo
        | table _time, ComputerName, EventCode, user, Network_Account_Domain, Network_Account_Name, Logon_Type,
    
    Данный фильтр находит все успешные входы типа RunAs/NewCredentials на указанном промежутке времени
    Тем самым Позволяет быстро увидеть, кто именно запускал процессы или подключался с альтернативными учётными данными в этот временной промежуток
    
    Так как многие моменты фильтра уже были разобраны в других типах атак, то я разясню, только уникальные элемент(ы) данного фильтра:

        -   Logon_Type=9
            Тип входа 9 (NewCredentials / RunAs) – когда пользователь предъявляет новые учётные данные, не разрывая существующую сессию.
            Это своего рода устранение лишнего «шума» (видим только 4624 с типом 9, а не все успешные логины).
        
        -   Logon_Process=seclogo
            Доп-фильтр по полю Logon Process (в событиях типа 9 обычно «seclogo»/«seclogon»)
    
    Однако, мы можем улучшить поиск, добавив к нему доступ к памяти LSASS следующим образом.

        index=main earliest=1690450689 latest=1690451116 (source="XmlWinEventLog:Microsoft-Windows-Sysmon/Operational" EventCode=10 TargetImage="C:\\Windows\\system32\\lsass.exe" SourceImage!="C:\\ProgramData\\Microsoft\\Windows Defender\\platform\\*\\MsMpEng.exe") OR (source="WinEventLog:Security" EventCode=4624 Logon_Type=9 Logon_Process=seclogo)
        | sort _time, RecordNumber
        | transaction host maxspan=1m endswith=(EventCode=4624) startswith=(EventCode=10)
        | stats count by _time, Computer, SourceImage, SourceProcessId, Network_Account_Domain, Network_Account_Name, Logon_Type, Logon_Process
        | fields - count
    
    Помимо выявления подозрительных попыток доступа к процессу LSASS (lsass.exe), данный фильтр также выявляет последующие попытки сетевого входа в систему (Logon Type 9) (credentials dumping),
    Что может указывать, например, на попытку извлечения учётных данных (credentials dumping), например с использованием tools типа Mimikatz, PSEXEC, Cobalt Strike и др.

    Вот расшифровка ключевых моментов фильтра:

        -   source="..." EventCode=10 TargetImage="..." SourceImage!="...")
            Фильтрует поиск, чтобы включить только события журнала операций Sysmon с EventCode 10 (Process Access).
            Он дополнительно сужает результаты до событий, где TargetImage — это C:\Windows\system32\lsass.exe (что указывает на то, что осуществляется доступ к процессу lsass.exe)
            А SourceImage — это не известный легитимный процесс из каталога Защитника Windows.

        -   OR (source="..." EventCode=4624 Logon_Type=9 Logon_Process=seclogo)
            Фильтрует поиск, чтобы также включить события журнала событий безопасности с EventCode 4624 (Logon), Logon_Type 9 (NewCredentials) и Logon_Process seclogo.

        -   sort 
            Сортирует события на основе выбранных полей

        -   transaction
            Группирует связанные события на основе выбранного поля (в нашем случае это поле -   host)
            Эта команда используется для связывания событий доступа к процессу, нацеленных на lsass.exe, с событиями удаленного входа.

        -   stats 
            Объединяет события на основе указанных полей, подсчитывая количество вхождений для каждой комбинации значений полей.

        -   fields
            Удаляет выбранное поле (в нешем пример это- count) из результатов.
    
    Проще говоря усовершенствованный фильтр находит потенциально вредоносную активность, где:

        -   Некий процесс (не Defender) получил доступ к lsass.exe (EventCode=10),
        -   И в течение одной минуты после этого был зафиксирован сетевой логон (4624, Logon Type 9),
        -   что может указывать на успешное похищение и использование учётных данных.