=====================================================================
* Введение *
************

Это пошаговое руководство, цель которой — продемонстрировать проблему, а не подробно описать атаку

Однако, дам один полезнй совет  -   если Вы застряли на каком-то этапе, так как фильтр, который Вы используете не дает нужного ответа, то просто удалите его, НО оставьте только те моменты в которых Вы полностью усовершенствованный
К примеру, Вам надо найти сервис, который был отакован скопроментированным полователем, но используемый фильтр, который вывел Вас на скопроментированного пользователя, не отображает нужную Вам информацию
Тогда, Вам надо удалить все, но оставить только index, username, soureimage (если используете), earliest/latest (если точно уверены во временном диапозоне)
И уже вычленять информацию из предоставленного результата
Более того, желательно знать значение EvenCode or EventID, но на крайний случай спросить интеренет

=====================================================================
* Pass-the-Ticket *
*******************

Pass-the-Ticket (PtT) — это метод бокового перемещения, используемый злоумышленниками для бокового перемещения в сети путем злоупотребления билетами Kerberos TGT (Ticket Granting Ticket) и TGS (Ticket Granting Service).
Вместо использования хэшей NTLM, PtT использует билеты Kerberos для аутентификации в других системах и доступа к сетевым ресурсам без необходимости знать пароли пользователей.
Этот метод позволяет злоумышленникам бокового перемещения и получать несанкционированный доступ к нескольким системам.

Вот как выглядит атака по шагам:

    -   Злоумышленник получает административный доступ к системе либо посредством первоначального взлома, либо посредством повышения привилегий.

    -   Затем злоумышленник использует такие инструменты, как Mimikatz или Rubeus, для извлечения действительных билетов TGT или TGS из памяти скомпрометированной системы.
        Покажу на примере Rubeus, который будет проверять систему на наличие новых Kerberos-билетов каждые 30 секунд.

            PS C:\Users\johndoe\tools> .\Rubeus.exe monitor /interval:30
        
        В результате мы можем получить следующую информацию:

            *   User                    :   Administrator@<domain.name.local>
            *   Flags                   :   name_canonicalize, pre_authent, initial, renewable, forardable
            *   Base64EncodedTicket     :   <value>
    
    -   Атакующий отправляет извлеченный билет для текущего сеанса входа.
        Теперь атакующий может аутентифицироваться в других системах и сетевых ресурсах без необходимости вводить пароли в виде открытого текста.

            PS C:\Users\johndoe\tools> .\Rubeus.exe ptt /ticket:<Base64EncodedTicket_value>

    +++++++++++++++++++++++++++++++++++
    + Kerberos Authentication Process +
    +++++++++++++++++++++++++++++++++++

    Kerberos    -   это сетевой протокол аутентификации, используемый для безопасной аутентификации пользователей и служб в среде Windows Active Directory (AD).
    В процессе аутентификации Kerberos происходят следующие шаги:

        -   Пользователь (клиент) инициирует процесс аутентификации, запрашивая билет на предоставление билета (Ticket Granting Ticket - TGT) из центра распространения ключей (Key Distribution Center - KDC), который обычно является частью контроллера домена Active Directory.

        -   KDC проверяет личность пользователя (обычно с помощью пароля) и выдает TGT, зашифрованный с помощью секретного ключа пользователя.
            TGT действителен в течение определенного периода и позволяет пользователю запрашивать билеты на обслуживание без необходимости повторной аутентификации.

        -   Клиент отправляет запрос на билет на обслуживание (TGS-REQ) в KDC для обслуживания, используя TGT, полученный на предыдущем этапе.

        -   KDC проверяет TGT клиента и, в случае успеха, выдает билет на обслуживание (TGS), зашифрованный с помощью секретного ключа учетной записи службы и содержащий идентификатор клиента и ключ сеанса.
            Затем клиент получает билет на обслуживание (TGS) от KDC.

        -   Клиент подключается к серверу и отправляет TGS на сервер в рамках процесса аутентификации.

    +++++++++++++++++++++++++++++++++++
    + Related Windows Security Events +
    +++++++++++++++++++++++++++++++++++

    Во время доступа пользователя к сетевым ресурсам создается несколько журналов событий Windows для регистрации процесса входа в систему и связанных с ним действий:

        -   Event ID 4648 (Explicit Credential Logon Attempt)
            Это событие регистрируется, когда во время входа в систему предоставляются явные учетные данные (например, имя пользователя и пароль).

        -   Event ID 4624 (Logon)
            Это событие указывает на то, что пользователь успешно вошел в систему.

        -   Event ID 4672 (Special Logon)
            Это событие регистрируется, когда вход пользователя включает особые привилегии, такие как запуск приложений в качестве администратора.

        -   Event ID 4768 (Kerberos TGT Request)
            Это событие регистрируется, когда клиент запрашивает билет на предоставление билета (TGT) во время процесса аутентификации Kerberos.

        -   Event ID 4769 (Kerberos Service Ticket Request)
            Когда клиент запрашивает билет службы (билет TGS) для доступа к удаленной службе во время процесса аутентификации Kerberos, генерируется событие с идентификатором 4769.
    
    При обнаружении данных событий в журналах Windows, вы также можете дополнительно проверить переданную информацию посредством Wireshark
    Для удобства поиска в Wireshark вам понадобятся временные метки

    +++++++++++++++++++++++++++++++++++++++++++
    + Pass-the-Ticket Detection Opportunities +
    +++++++++++++++++++++++++++++++++++++++++++

    Обнаружение атак Pass-the-Ticket может быть сложной задачей, поскольку злоумышленники используют действительные билеты Kerberos вместо традиционных хэшей учетных данных.
    Ключевое отличие заключается в том, что при выполнении атаки Pass-the-Ticket процесс аутентификации Kerberos будет частичным.
    Например, злоумышленник импортирует билет TGT в сеанс входа в систему и запрашивает билет TGS для удаленной службы.
    С точки зрения контроллера домена импортированный TGT никогда ранее не запрашивался из системы злоумышленника, поэтому не будет связанного идентификатора события 4768.

    Этот подход можно преобразовать в следующее обнаружение Splunk:
    
        *   найдите Event ID 4769 (Kerberos Service Ticket Request) или Event ID 4770 (Kerberos Service Ticket was renewed) НО без предшествующего Event ID 4768 (Kerberos TGT Request) из той же системы в определенном временном окне.

    Другой подход заключается в поиске несоответствий между Service and Host IDs (in Event ID 4769) и фактическими IP-адресами источника и назначения (in Event ID 3).
    Обратите внимание, что будет несколько законных несоответствий, поэтому необычные имена хостов или службы следует исследовать более подробно.

    Кроме того, в случаях, когда злоумышленник импортирует билет TGS в сеанс входа в систему, важно просмотреть Event ID 4771 (Kerberos Pre-Authentication Failed) на предмет несоответствий между типом предварительной аутентификации и кодом отказа.
    Например, Pre-Authentication type 2 (Encrypted Timestamp) с Failure Code 0x18 (Pre-authentication information was invalid) будет означать, что клиент отправил Kerberos AS-REQ с зашифрованной временной меткой предварительной аутентификации, но KDC не смог ее расшифровать.

    Важно понимать, что эти возможности обнаружения должны быть улучшены с помощью обнаружения на основе поведения.
    Другими словами, контекст имеет решающее значение.
    Поиск только идентификаторов событий 4769, 4770 или 4771, скорее всего, приведет к появлению множества ложных срабатываний.
    Соотнесите журналы событий с моделями поведения пользователя и системы и рассмотрите, есть ли какие-либо подозрительные действия, связанные с пользователем или системой, участвующими в журналах.

    +++++++++++++++++++++++++++++++++++++++++
    + Detecting Pass-the-Ticket With Splunk +
    +++++++++++++++++++++++++++++++++++++++++

    Теперь давайте рассмотрим, как можно идентифицировать Pass-the-Ticket с помощью Splunk.

    Этот фильтр используется для выявления подозрительных "висячих" Kerberos-аутентификаций, то есть случаев, когда процесс Kerberos-аутентификации не был завершён

        index=main earliest=1690392405 latest=1690451745 source="WinEventLog:Security" user!=*$ EventCode IN (4768,4769,4770) 
        | rex field=user "(?<username>[^@]+)"
        | rex field=src_ip "(\:\:ffff\:)?(?<src_ip_4>[0-9\.]+)"
        | transaction username, src_ip_4 maxspan=10h keepevicted=true startswith=(EventCode=4768)
        | where closed_txn=0
        | search NOT user="*$@*"
        | table _time, ComputerName, username, src_ip_4, service_name, category
    
    Вот расшифровка ключевых моментов фильтра:

        -   source="....." user!=*$ 
            Эта команда выбирает события из источника WinEventLog:Security, где поле пользователя не заканчивается на доллар ($)

        -   rex field=user "...."
            Эта команда извлекает нужные нам данные из указанного поля с помощью регулярного выражения. 
            В нашем примере она извлекает имя пользователя из поля пользователя и присваивает извлеченное значение новому полю с именем username.

        -   rex field=src_ip "....."
            В этом подфильтре она извлекает адрес IPv4 из поля src_ip, даже если он изначально записан как адрес IPv6.
            Затем она присваивает извлеченное значение новому полю с именем src_ip_4.

        -   transaction 
            Группирует связанные события на основе выбранного поля(-ей) (в нашем случае это поля -   username и src_ip_4)
            Параметр maxspan= устанавливает максимальную продолжительность транзакции в 10 часов.
            Параметр keepevicted=true гарантирует, что открытые транзакции без конечного события будут включены в результаты.

        -   where 
            Эта команда фильтрует результаты
            В нашем варианте фильтрует незавершённые транзакции, включая только открытые транзакции, у которых нет конечного события.

        -   search NOT user="*$@*"
            Это еще один доп-фильтр 
            В нашем варианте он нацелен на поля, в которых пользователя заканчивается звездочкой (*) и содержит знак @.