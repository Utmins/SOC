Как было упомянуто в теоретическом файле, SNORT может использоваться в одном из следующих режимов

    1)  LOG-MODE

    2)  SNIFF-MODE

В связи с этим тут будут представленны практические примеры использования SNORT в указанных режимах

=====================================================================
* SNORT LOG-MODE Rules Examples *
*********************************

Как было упомянуто выше -   перед анализом трафика или pcap-файла необходимо запускать требуемый config.file с набором соответсвующих правил
А после анализа (если отображаемая информация в консоле не достаточна информативна), просмотреть log-файл

Задание 1:

    Напишите правило для фильтрации IP ID "35369" и запустите его для указанного файла pcap.

        a)  Создаем правило (в данном пример будет локальное правило)

                alert IP any any <> any any (msg: "IP ID"; id: 35369; sid: 100001; rev:1;)

        b)  Запускаем snort с указанием rules-file and pcap-file (параметр -l . -   указывает на то, что log-file будет записан в текущую директорию)

                snort -c <rules.filename> -A full -l . -r <pcap.filename>
        
        c)  Если анализа, выведенного в консоле оказалось не достаточно, то просматриваем log-file

                sudo snort -r <snort.log.filename>

Задание 2:

    Создайте правило для фильтрации пакетов с флагом Syn и запустите его для указанного файла pcap.

        a)  Создаем правило (в данном пример будет локальное правило)

                alert TCP any any <> any any (msg: "FLAG CHK"; flags: S; sid: 100002; rev:1;)

        b)  Запускаем snort с указанием rules-file and pcap-file (параметр -l . -   указывает на то, что log-file будет записан в текущую директорию)

                snort -c <rules.filename> -A full -l . -r <pcap.filename>
        
        c)  Если анализа, выведенного в консоле оказалось не достаточно, то просматриваем log-file

                sudo snort -r <snort.log.filename>

Задание 3:

    Напишите правило для фильтрации пакетов с флагами Push-Ack и запустите его для указанного файла pcap.

        a)  Создаем правило (в данном пример будет локальное правило)

                alert TCP any any <> any any (msg: "FLAG CHK"; flags: PA; sid: 100003; rev:1;)

        b)  Запускаем snort с указанием rules-file and pcap-file (параметр -l . -   указывает на то, что log-file будет записан в текущую директорию)

                snort -c <rules.filename> -A full -l . -r <pcap.filename>
        
        c)  Если анализа, выведенного в консоле оказалось не достаточно, то просматриваем log-file

                sudo snort -r <snort.log.filename>

Задание 4:

    Создайте правило для фильтрации пакетов с одинаковым исходным и конечным IP и запустите его для указанного файла pcap.
    В данном примере нам придется создать 2 правила -   одно для TCP, другое для UDP

        a)  Создаем правила (в данном пример будут локальные правила)

                alert TCP any any <> any any (msg: "SAME IP CHK"; sameip; sid: 100004; rev:1;)
                alert UDP any any <> any any (msg: "SAME IP CHK"; sameip; sid: 100005; rev:1;)

        b)  Запускаем snort с указанием rules-file and pcap-file (параметр -l . -   указывает на то, что log-file будет записан в текущую директорию)

                snort -c <rules.filename> -A full -l . -r <pcap.filename>
        
        c)  Если анализа, выведенного в консоле оказалось не достаточно, то просматриваем log-file

                sudo snort -r <snort.log.filename>

Задание 5:

    Напишите одно правило для обнаружения трафика «FTP service name» в заданном pcap..
    
        a)  Создаем правила (в данном пример будут локальные правила)

                alert TCP any any <> any 21 (msg: "FTP service name"; content: "FTP"; sid: 100006; rev:1;)

        b)  Запускаем snort с указанием rules-file and pcap-file (параметр -l . -   указывает на то, что log-file будет записан в текущую директорию)

                snort -c <rules.filename> -A full -l . -r <pcap.filename>
        
        c)  Если анализа, выведенного в консоле оказалось не достаточно, то просматриваем log-file
            А так как в данном примере нам надо найти «FTP service name» (который распологается в содержании/content пакета), то для просмотра нам надо использовать параметр -X
            Более того, нам нет необходимости просматривать все пакеты, так что ограничимся первыми 10

                sudo snort -r <snort.log.filename> -X -n 10

Задание 6:

    Напишите одно правило для обнаружения трафика «FTP login attempts...» в заданном pcap.
    Так как даннаое правивло может подразумевать развличные варианты login attempts (зависит от результата и/или используемых credentials)
    То соответсвенно мы будет искать различные информационные сообщения в теле содержания (content)
    Более того, можно искать несколько сообщений, но для этого придется использовать заголовок content 2 раза
    К примеру:
        
        Failed FTP login attempts   =   content: "530 User"
        Successful FTP logins       =   content: "230 User"
        FTP login attempts with a valid username but no password entered yet    =   content: "331 Password"
        FTP login attempts with the "Administrator" username but no password entered yet    =   content: "331 Password"; content: "Administrator"

        a)  Создаем правила (в данном пример будут локальные правила)

                alert TCP any any <> any 21 (msg: "FTP Loging Attempts"; content: "530 User"; sid: 100007; rev: 1;)

        b)  Запускаем snort с указанием rules-file and pcap-file (параметр -l . -   указывает на то, что log-file будет записан в текущую директорию)

                snort -c <rules.filename> -A full -l . -r <pcap.filename>
        
        c)  Если анализа, выведенного в консоле оказалось не достаточно, то просматриваем log-file

                sudo snort -r <snort.log.filename> -X

Задание 7:

    Напишите правило для обнаружения файла PNG в заданном pcap.
    А также изучите журналы и определите имя программного обеспечения, встроенного в пакет.

    Существует 2 варианта решения задачи:
            1)  Искать по тексту в содержании пакета -   content: "PNG"
                Но, такой вариант может дать либо много шума, либо не дать вообще желаемый результат
            
            2)  Искать по HEX-коду искомого объекта
                Для этого нам понадобится Google (PNG HEX code  =   89 50 4E 47 0D 0A 1A 0A)
    
        a)  Создаем правила (в данном пример будут локальные правила)

                

        b)  Запускаем snort с указанием rules-file and pcap-file (параметр -l . -   указывает на то, что log-file будет записан в текущую директорию)

                snort -c <rules.filename> -A full -l . -r <pcap.filename>
        
        c)  Если анализа, выведенного в консоле оказалось не достаточно, то просматриваем log-file

                sudo snort -r <snort.log.filename> -X


=====================================================================
* SNORT SNIFFER-MODE Rules Examples *
*************************************

Scenario #1 -   BRUTE-FORCE

Вам нужно понаблюдать за трафиком с помощью Snort и сначала определить аномалию.
Затем вы можете создать правило, чтобы остановить атаку методом подбора. УДАЧИ!


    1)  Прежде всего, запустите Snort в режиме сниффера и попытайтесь выяснить источник атаки, службу и порт.
        Какие опции выбирать и куда сохранять лог-файл зависит от конкретной задачи
        В нашем примере мы воспользуемся всеми возможными опциями и сохраним лог в текущую папку
        Количество времени записи лога зависит от целей и вашего личного предпочтения

            ~:$ sudo snort -dev -l .
    
    2)  Чтобы иметь возможность создать наше правило, нам сначала нужно посмотреть на файл журнала, чтобы увидеть, что мы записали.
        Будете ли Вы просматривать лог в обычном режиме или с с отображением данных каждого пакета в шестнадцетеричном формате (-Х) зависит от ваших потребностей
        Для наших задч вполне хватит и обычного режима
        
            ~:$ sudo snort -r <snort.log.filename>

    3)  Недостатом SNORT при работе с собственными логами является отсутсвие встроенных фильтров отображения интересующей информации
        К примеру нам необходимо выяснить какие именно IP-addresses и Port #s  фигурируют в логах
        Для этого нам придется использовать Linux утилиты   -   grep, cut и sort

            -   Сперва мы отделим только строки содержащие IP-адреса и ассоциированные с ними Port#
                    ~:$ sudo snort -r <snort.log.filename> | grep -E ":[0-9]{1,5} ->" > <custom.filename#1>
                    ~:$ cat <custom.filename#1>

                        ...<SNIP>...
                        10/10-05:11:57.648796 10.10.153.181:80 -> 10.100.1.33:44314
                        10/10-05:11:57.648960 10.10.153.181:80 -> 10.100.1.33:44334
                        10/10-05:11:57.649163 10.100.1.33:44314 -> 10.10.153.181:80
                        10/10-05:11:57.653511 10.100.1.33:44334 -> 10.10.153.181:80
                        ...<SNIP>...

            -   Затем нам надо убрать лишнюю информацию (а именно колонку #1    -   timestamp)
                    ~:$ cut -d ' ' -f2,3,4 <custom.filename#1> > <custom.filename#2>
                    ~:$ cat <custom.filename#2>

                        ...<SNIP>...
                        10.10.153.181:80 -> 10.100.1.33:44334
                        10.100.1.33:44314 -> 10.10.153.181:80
                        10.100.1.33:44334 -> 10.10.153.181:80
                        ...<SNIP>...
            
            -   Теперь осталось все отсортировать, отфильтровать , чтобы получить только уникальныз значения IP-адресов и ассоциированных Port#S
                    ~:$ sort -u <custom.filename#2> > <custom.filename#3>
                    ~:$ cat <custom.filename#3>

                        ...<SNIP>...
                        10.10.140.29:22 -> 10.10.245.36:46648
                        10.10.153.181:80 -> 10.100.1.33:44314
                        10.10.245.36:46486 -> 10.10.140.29:22
                        10.100.1.33:44314 -> 10.10.153.181:80
                        ...<SNIP>...
        
        4)  После того, как мы определили все IP-адреса захваченные в пакете, осталось отделить наш IP-адресс
            Чтобы понять, с каким(-и) IP-адресом и Port# он взаимодействовал чаще всего
            Это покажет нам какой сервис (Port#) использовал злоумышленник для проникновения в нашу систему

                ~:$ ifconfig
            
            Беглый анализ показал, что помимо огромного личества свободных портов, также использовались порты 22 и 80
            Использование порта№80 можно раценивать как попытку веб-аутентификации
            А использование порта№22 как попытку подключения по SSH каналу
        
        5)  Посмотри, какой из этих двух портов использовался чаще всего

                ~:$ sudo snort -r <snort.log.filename> 'port 22'
                    ...<SNIP>...
                        Total:         1007
                    ===============================================================================
                    Snort exiting

                ~:$ sudo snort -r <snort.log.filename> 'port 80'
                    ...<SNIP>... 
                        Total:         3560
                    ===============================================================================
                    Snort exiting
            
            Анализ нам покжет, что хотя и порт22 не взаимодействовал с IP-адресом нашего хоста, но было огромное количестов попыток установки SSH канала с одного и того же IP-адреса
            ЧТо очень похоже на Brute-Force попытку
            Чтоже касаемо порта80, то анализ показал, что скорее всего это был обычный интерент серфинг
            Так как взаимодействия между IP-адресом нашего хоста и IP-адресом потенциального злоумышленника не было

        6)  Настало время создать правило, которое бы не позволило злоумышленнику продолжать свои действия
            А именно осуществлять попытки подключения по SSH каналу
            Как мы знаем существуют 3 типа правил (см. теорию)
            В нашем случае, мы будем использовать правило DROP, которое блокирует трафик слогласно правилу

                ~:$ sudo nano /etc/snort/rules/local.rules
                    # $Id: local.rules,v 1.11 2004/07/23 20:15:44 bmc Exp $
                    # ----------------
                    # LOCAL RULES
                    # ----------------
                    # This file intentionally does not come with signatures.  Put your local
                    # additions here.
                    drop tcp 10.10.140.29 22 <> any any (msg: "SSH Brute Force Prevention"; sid: 100001; rev:1;)

        7)  И последний момент  -   запустить правило
            Однако, в нашем задании мы должны запустить его в IPS режиме "-A full"

                ~:$ sudo snort -c /etc/snort/snort.conf -q -Q --daq afpacket -i ent0:eth1 -A full
            
            Хотя можно было бы и воспользоваться и более простым вариантом

                ~:$ sudo snort -c /etc/snort/rules/local.rules -A full




