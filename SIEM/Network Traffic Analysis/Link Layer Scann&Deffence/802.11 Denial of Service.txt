=====================================================================
* Руководство *
***************

Если использовать машину от HTB, то сперва надо запустить данную комнаду, чтобы скачать и распокавать все необходимые pcap файлы

	<usern_name>@<host_name>$ wget -O file.zip 'https://academy.hackthebox.com/storage/resources/pcap_files.zip' && mkdir tempdir && unzip file.zip -d tempdir && mkdir -p pcaps && mv tempdir/Intermediate_Network_Traffic_Analysis/* pcaps/ && rm -r tempdir file.zip

Удобнее всего просматривать PCAP-files используя Wireshark
Однако, в целях практики и выбработки навыков использования CLI-based tools мы будем использовать такие утилиты как tcpdump

=====================================================================
* Легенда *
***********

В области анализа трафика неизменно важно тщательно изучать все аспекты протоколов и коммуникаций канального уровня.
Известный тип атаки канального уровня направлен на 802.11 (Wi-Fi).
Такой вектор атаки нам часто легко проигнорировать, но, учитывая, что человеческие ошибки могут привести к сбою нашей периметральной безопасности, крайне важно, чтобы мы постоянно проверяли наши беспроводные сети.

Среди наиболее частых атак, свидетелями или обнаружением которых мы можем быть, — атака деаутентификации/диссоциации.
Это обычная атака на уровне канала, которую злоумышленники могут использовать по нескольким причинам:

	-	Чтобы захватить WPA handshake для выполнения атаки по словарю в автономном режиме

	-	Чтобы вызвать общие условия отказа в обслуживании

	-	Чтобы заставить пользователей отключиться от нашей сети и потенциально подключиться к своей сети для получения информации

По сути, злоумышленник сфабрикует кадр деаутентификации 802.11, притворяясь, что он исходит из нашей законной точки доступа.
Сделав это, злоумышленник может отключить одного из наших клиентов от сети. 
Часто клиент повторно подключается и проходит процесс рукопожатия, пока злоумышленник прослушивает сеть.

Эта атака осуществляется путем подмены или изменения MAC-адреса отправителя кадра злоумышленником.
Клиентское устройство не может по-настоящему различить разницу без дополнительных элементов управления, таких как IEEE 802.11w (Management Frame Protection).
Каждый запрос на деаутентификацию связан с кодом причины, объясняющим, почему клиент отключается.

В большинстве сценариев базовые инструменты, такие как aireplay-ng и mdk4, используют код причины 7 для деаутентификации.

=====================================================================
* Подготовка *
**************

	++++++++++++++++++++++++++++
	+ Capturing 802.11 Traffic +
	++++++++++++++++++++++++++++

	Для проверки нашего необработанного трафика 802.11 нам потребуется система WIDS/WIPS или беспроводной интерфейс, оснащенный режимом монитора.
	Подобно promiscuous mode в Wireshark, режим монитора позволяет нам просматривать необработанные кадры 802.11 и другие типы пакетов, которые в противном случае могли бы остаться невидимыми.
		
	Сперва нам надо перечислить наши беспроводные интерфейсы в Linux с помощью следующей команды:
	***	Предположим, что у нас есть интерфейс Wi-Fi (хотя в действительности виртуальная машина HTB не располагает таким интерфейсом), способный работать в режиме монитора
		Поэтому, вывод на экране будет следующим

		<usern_name>@<host_name>$ iwconfig

			wlan##:				IEEE 802.11
			ESSID:				off/any  
          		Mode:				Managed
			Access Point:			Not-Associated   
			Tx-Power=20 dBm   
          		Retry short  long limit		2
			RTS thr:			off
			Fragment thr:			off
          		Power Management:		off

	Сушествует несколько вариантов перевести наш интерфейс в режим монитора
	
		1)	Во-первых, используя airodump-ng, мы можем использовать следующую команду:

			<usern_name>@<host_name>$ sudo airmon-ng start wlan0

				Found 2 processes that could cause trouble.
				Kill them using 'airmon-ng check kill' before putting
				the card in monitor mode, they will interfere by changing channels
				and sometimes putting the interface back in managed mode

					PID Name
					820 NetworkManager
					1389 wpa_supplicant

				PHY     Interface       Driver          Chipset

				phy0    wlan0           rt2800usb       Ralink Technology, Corp. RT2870/RT3070
                	
					(mac80211 monitor mode vif enabled for [phy0]wlan0 on [phy0]wlan0mon)
		                	(mac80211 station mode vif disabled for [phy0]wlan0)

		2)	Во-вторых, используя системные утилиты, нам пришлось бы деактивировать наш интерфейс, изменить его режим, а затем снова активировать его.

				<usern_name>@<host_name>$ sudo ifconfig wlan## down
				<usern_name>@<host_name>$ sudo iwconfig wlan## mode monitor
				<usern_name>@<host_name>$ sudo ifconfig wlan## up

			Для подтверждения того, находится ли наш интерфейс в режиме монитора, с помощью утилиты iwconfig

				<usern_name>@<host_name>$ iwconfig

					wlan##mon:			IEEE 802.11
					Mode:				Monitor
					Frequency:			2.457 GHz
					Tx-Power=20 dBm   
          				Retry short  long limit:	2
					RTS thr:			off
					Fragment thr:			off
          				Power Management:		off

			Возможно, наш интерфейс может не соответствует соглашению wlan0mon.
			Поэтому, вместо wlan##mon он может иметь имя, подобное следующему.

					wlan##:				IEEE 802.11
					Mode:				Monitor
					Frequency:			2.457 GHz
					Tx-Power=20 dBm   
          				Retry short  long limit:	2
					RTS thr:			off
					Fragment thr:			off
          				Power Management:		off

			Решающим фактором здесь является то, что режим должен быть "monitor".
			Имя интерфейса не имеет особого значения, и во многих случаях дистрибутив Linux может назначить ему совершенно другое имя.

	Чтобы начать захват трафика от наших клиентов и сети, мы можем использовать airodump-ng.
	Нам нужно указать канал нашей точки доступа с помощью -c, ее BSSID с помощью --bssid и имя выходного файла с помощью -w

		<usern_name>@<host_name>$ sudo airodump-ng -c 4 --bssid ##:##:##:##:##:## wlan## -w raw

			BSSID			PWR	RXQ	Beacons		#Data,		#/s	CH	MB	ENC	CIPHER	AUTH	ESSID
			F8:14:FE:4D:E6:F1	-23  	64	115		6		0	4	130	WPA2	CCMP	PSK	HTB-Wireless
	***	Для достижения аналогичных результатов можно использовать tcpdump, но airodump-ng оказывается столь же эффективным.
=====================================================================
* Анализ *
**********

	++++++++++++++++++++++++++++++++++++
	+ Finding Deauthentication Attacks +
	++++++++++++++++++++++++++++++++++++

	Откроем файл захвата трафика при помощи Wireshark и применим фильтр wlan.bssid == xx:xx:xx:xx:xx:xx:

		<usern_name>@<host_name>$ sudo wireshark <file_name>.pcapng

		-	wlan.bssid == xx:xx:xx:xx:xx:xx

	Предположим, что мы хотим взглянуть на кадры деаутентификации с нашего BSSID или на злоумышленника, делающего вид, что он отправляет их с нашего BSSID.
	Мы можем использовать следующий фильтр Wireshark
	В котором, мы указываем тип фрейма (00 == управление) и подтип (12 == деаутентификация).

		-	(wlan.bssid == xx:xx:xx:xx:xx:xx) and (wlan.fc.type == 00) and (wlan.fc.type_subtype == 12)

	Вывод может демонстрировать тот факт, что чрезмерное количество кадров деаутентификации было отправлено на одно из наших клиентских устройств.
	Это было бы непосредственным индикатором этой атаки.
	Однако, если мы откроем детализацию кадра, кто во вкладке "IEEE 802.11 Wireless Management", разделе "Fixed parameters", мы можем обнаружить, что использовался код причины 7.
 
			Frame 416: 26 bytes on wire (208 bits), 26 bytes captured (208 bits)
			IEEE 802.11 Deauthentication, Flags: ........
			IEEE 802.11 Wireless Management
				Fixed parameters (2 bytes)
					Reason code: Class 3 frame received from nonassociated STA (0x0007)

	Следовательно, если бы мы хотели проверить, что это именно сделал злоумышленник, то для оптимизации фильтрации, использовали кодом причины 7.
	
		-	(wlan.bssid == xx:xx:xx:xx:xx:xx) and (wlan.fc.type == 00) and (wlan.fc.type_subtype == 12) and (wlan.fixed.reason_code == 7)

	Это говорит о том, что была осуществлена деаутентификации.
	А также, что клиент отправляет кадры точки доступа, не имея ассоциации с этой точкой доступа.

 
	++++++++++++++++++++++++++
	+ Revolving Reason Codes +
	++++++++++++++++++++++++++

	В качестве альтернативы более опытнай злоумышленник может попытаться обойти этот изначально очевидный знак, перебирая коды причин.
	Часта применяемая тактика, используемая в данном способе обхода - применения скрипта.

		Кода причины 1	-	информирование об отключении неуказанным причинам.

			-	(wlan.bssid == xx:xx:xx:xx:xx:xx) and (wlan.fc.type == 00) and (wlan.fc.type_subtype == 12) and (wlan.fixed.reason_code == 1)

		Кода причины 2	-	предыдущая аутентификация более не действительна

			-	(wlan.bssid == xx:xx:xx:xx:xx:xx) and (wlan.fc.type == 00) and (wlan.fc.type_subtype == 12) and (wlan.fixed.reason_code == 2)

		Кода причины 3	-	станция покидает (или покинула) IBSS или ESS

			-	(wlan.bssid == xx:xx:xx:xx:xx:xx) and (wlan.fc.type == 00) and (wlan.fc.type_subtype == 12) and (wlan.fixed.reason_code == 3)

	Таким образом, процесс деаутентификация может быть весьма трудоемким, но у нас есть некоторые компенсирующие меры, которые мы можем реализовать, чтобы предотвратить это.
	Вот они:

		-	Включите IEEE 802.11w (Management Frame Protection), если это возможно
		-	Используйте WPA3-SAE
		-	Измените наши правила обнаружения WIDS/WIPS

	++++++++++++++++++++++++++++++++++++++++++
	+ Finding Failed Authentication Attempts +
	++++++++++++++++++++++++++++++++++++++++++

	Предположим, что злоумышленник пытается подключиться к нашей беспроводной сети.
	Мы можем заметить чрезмерное количество запросов на ассоциацию, поступающих с одного устройства.
	Чтобы отфильтровать их, мы можем использовать следующее.	

		-	(wlan.bssid == xx:xx:xx:xx:xx:xx) and (wlan.fc.type == 00) and (wlan.fc.type_subtype == 0) or (wlan.fc.type_subtype == 1) or (wlan.fc.type_subtype == 11)

	Таким образом, для нас важно иметь возможность различать законный трафик 802.11 и трафик злоумышленников.
	Безопасность на уровне канала в этой перспективе может означать разницу между компрометацией периметра и нашей безопасностью.

=====================================================================
* Дополнительные Вопросы *
**************************

	Необходимо найти общее количество кадров деаутентификацииa

		-	(wlan.bssid == xx:xx:xx:xx:xx:xx) and (wlan.fc.type == 00) and (wlan.fc.type_subtype == 12)
