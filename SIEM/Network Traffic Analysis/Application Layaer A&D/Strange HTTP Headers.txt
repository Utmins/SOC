`=====================================================================
* Руководство *
***************

Если использовать машину от HTB, то сперва надо запустить данную комнаду, чтобы скачать и распокавать все необходимые pcap файлы

	<usern_name>@<host_name>$ wget -O file.zip 'https://academy.hackthebox.com/storage/resources/pcap_files.zip' && mkdir tempdir && unzip file.zip -d tempdir && mkdir -p pcaps && mv tempdir/Intermediate_Network_Traffic_Analysis/* pcaps/ && rm -r tempdir file.zip

Удобнее всего просматривать PCAP-files используя Wireshark
Однако, в целях практики и выбработки навыков использования CLI-based tools мы будем использовать такие утилиты как tcpdump

=====================================================================
* Легенда *
***********

Зачастую, первичный HTTP-анализ на предмет фаззинга может ничего не показать.
Однако это не всегда означает, что ничего плохого не происходит.
Поэтому, нам всегда следует смотреть немного глубже и шире.
Один из вариантов   -   поиск странного поведения среди HTTP-запросов, а имеено "странные заголовки", такие как

    -   Странные хосты
    -   Необычные HTTP-глаголы
    -   Измененные пользовательские агенты (User Agents)

=====================================================================
* Подготовка *
**************

Как такового, подготовительного этапа, не существует
Для анализа чаще всего используют любой, подходящий пакетный анализатор
В нашем случае это - Wireshark

Чтобы предотвратить успешную эксплуатацию, выходящую за рамки простого обнаружения этих событий, мы всегда должны делать следующее.

    i)  Убедитесь, что наши виртуальные хосты или конфигурации доступа настроены правильно, чтобы предотвратить эту форму доступа.
    ii) Убедитесь, что наш веб-сервер обновлен. 

=====================================================================
* Анализ *
**********

	++++++++++++++++++++++++++++++++
	+ Finding Strange Host Headers +
	++++++++++++++++++++++++++++++++

    Для начала, как мы обычно делаем, мы можем ограничить просмотр в Wireshark только ответами и запросами http.

        -   http
    
    Затем мы можем найти любые нерегулярные заголовки Host с помощью следующей команды.
    Мы указываем реальный IP-адрес нашего веб-сервера, чтобы исключить любые записи, которые используют этот реальный заголовок.
    Если бы мы делали это для внешнего веб-сервера, мы могли бы указать здесь доменное имя.
    
        -   http.request and (!(http.host == "our_webserver_IP"))
    
    Предположим, мы заметили, что этот фильтр вернул некоторые результаты
    Чтож, нам следует немного глубже разобраться в этих HTTP-запросах, чтобы выяснить, какие хосты эти злоумышленники могли попытаться использовать.
    Для этого нам надо рассмотреть содержание Hypertext Transfer Protocol заголовка
    Каждое поле в данном заголовке может содержать весьма интересную информацию (в нашем случае это поля HOST)
    
        Host: 127.0.0.1

    Злоумышленники попытаются использовать различные заголовки хоста, чтобы получить уровни доступа, которые они обычно не получают через законный хост.
    Они могут использовать прокси-инструменты, такие как Burp Suite или другие, чтобы изменить их перед отправкой на сервер.
       
    +++++++++++++++++++++++++++++++++++++++++++++
	+ Analyzing Code 400s and Request Smuggling +
	+++++++++++++++++++++++++++++++++++++++++++++

	Мы также можем заметить некоторые плохие ответы от нашего веб-сервера, например коды 400.
    Эти коды указывают на плохой запрос от клиента, поэтому они могут быть хорошим местом для начала при обнаружении вредоносных действий через http/https.
    Чтобы отфильтровать их, мы можем использовать следующее
    
        -   http.response.code == 400

    Предположим, что мы следуем одному из этих HTTP-потоков (follow HTTP streams)
    Мы можем заметить следующее со стороны клиента.

        GET%20%2flogin.php%3fid%3d1%20HTTP%2f1.1%0d%0aHost%3a%20192.168.10.5%0d%0a%0d%0aGET%20%2fuploads%2fcmd2.php%20HTTP%2f1.1%0d%0aHost%3a%20127.0.0.1%3a8080%0d%0a%0d%0a%20HTTP%2f1.1
        Host: 192.168.10.5
        Upgrade-Insecure-Requests: 1
        User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.5672.93 Safari/537.36
        Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7
        Referer: http://192.168.10.7/
        Accept-Encoding: gzip, deflate
        Accept-Language: en-US,en;q=0.9
        Connection: close
    
    Первая строка заголовка выглядит весьма странно, но наш опыт полдсказывает, что она слегка зашифрованна
    Это обычно называют контрабандой HTTP-запросов или CRLF (Carriage Return Line Feed).
    Мы можем прогнать ее через CyberChef и получить следуюзий результат

        GET /login.php?id=1 HTTP/1.1
        Host: 192.168.10.5

        GET /uploads/cmd2.php HTTP/1.1
        Host: 127.0.0.1:8080

        HTTP/1.1
        Host: 192.168.10.5

    По сути, в случаях, когда наши конфигурации уязвимы, первый запрос пройдет, а второй запрос — вскоре после этого.
    Это может предоставить злоумышленнику уровни доступа, которые мы обычно запрещаем.
    Это происходит из-за того, что наша конфигурация выглядит следующим образом.
    *** Полную информацию можно получить тут    -   https://github.com/dhmosfunk/CVE-2023-25690-POC

        <VirtualHost *:80>

            RewriteEngine on
            RewriteRule "^/categories/(.*)" "http://192.168.10.100:8080/categories.php?id=$1" [P]
            ProxyPassReverse "/categories/" "http://192.168.10.100:8080/"

        </VirtualHost>

    Таким образом, наблюдение за этими кодами 400 может дать четкое указание на действия злоумышленников во время наших усилий по анализу трафика.
    Кроме того, мы бы заметили, если бы злоумышленник добился успеха в этой атаке, найдя код 200 (успех) в ответе на один из запросов, которые выглядят так.
    

=====================================================================
* Дополнительные Вопросы *
**************************
