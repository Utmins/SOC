=====================================================================
* Введение *
************

Как Вы уже наверное значете, Zeek   -   обычно используется для тщательного изучения каждого бита трафика в сети, глубокого поиска любых признаков подозрительной или вредоносной активности.
Проще говоря, это такой же инструмент для анализа сетевого трафика, НО с другим (более узкоспециализированным) функционалом

Для подробной информции об общих и/или отличительных чертах Zeek от Wireshark, можно спросить ChatGPT или Google

!!! НО, очень часто Zeek используют для анализа пакетов собранных Wireshark (*.pcap)
    Поэтому, представленный ниже сценарий будет базироваться на анализе Zeek-ом некоторого *.pcap файла

Помимо взаимодействия с Zeek и Wireshark, будет также рассмотрено использование утилиты SPLUNK
Которая в свою очередь будет анализировать *.log файлы (это выжимка из *.pcap файла посредством Zeek/tShark) для отображения нужных результатов черех используемые фильтры

!!! Так как SPLUNK не работает на прямую с файлами типа *.pcap, то я КРАЙНЕ НАСТОЯТЕЛЬНО рекомендую ознакомиться с инструкцией по загрузки *.log файлов (каталогов) в базу данных SPLUNK

В данной презентации *.pcap файл уже был распарсен Zeek и все сформированные файлы были загружены в базу данных SPLUNK
Связанные материалы:

    -   PCAP-file           rdp_bruteforce.pcap //ssh_bruteforce
    -   Splunk Index:       rdp_bruteforce // ssh_bruteforce
    -   Splunk Sourcetupe:  bro:rdp:json // bro:ssh:json

Также перед оптимизацие фильтра, сперва рекомендую провести SPLUNK анализ без каких-либо уточняющих параметров
Это позволит увидеть вам название используемых полей-заголовков, которые мотом можно будет использовать для более тонкой настройки фильтрации

=====================================================================
* Detecting RDP Brute Force Attacks *
*************************************

Мы часто сталкиваемся с атаками методом подбора пароля Remote Desktop Protocol (RDP) как излюбленным вектором для злоумышленников, чтобы закрепиться в сети.
Концепция атаки методом подбора пароля RDP относительно прост   -   злоумышленники пытаются войти в сеанс удаленного рабочего стола, систематически угадывая и пробуя разные пароли, пока не найдут правильный.
Этот метод использует тот факт, что многие пользователи часто имеют слабые или стандартные пароли, которые легко угадать.

Теперь давайте рассмотрим, как можно определить RDP Brute Force с помощью Splunk и Zeek logs

    index="rdp_bruteforce" sourcetype="bro:rdp:json"
        | bin _time span=5m
        | stats count values(cookie) by _time, id.orig_h, id.resp_h
        | where count>30

Этот фильтр ищет массированные попытки RDP-подключения для выявления IP-адресов злоумышленников

Вот расшифровка фильтра:

    -   index="rdp_bruteforce" sourcetype="bro:rdp:json"
        "rdp_bruteforce"    -   выбирает данные из индекса, где хранятся события, связанные с RDP (предположительно детектированные Zeek).
        "bro:rdp:json"      -   указывает, что данные имеют JSON-формат, которые вероятно поступили Zeek и относятся к RDP.
        Таким образом это показывает, что Splunk ищет события RDP-подключений, возможно, логированные Zeek.

    -   bin span:
        Команда bin span используется для создания временных интервалов длительностью 5 минут для каждого события на основе поля _time.
        Этот шаг группирует события в 5-минутные интервалы, что может быть полезно для анализа шаблонов или тенденций с течением времени.

    -   stats:
        Ккоманда stats используется для агрегации событий на основе полей _time, id.orig_h и id.resp_h.
        Для каждой уникальной комбинации этих полей поиск вычисляет следующую статистику:

            *   id.orig_h
                IP-адрес источника (нападающего)

            *   id.resp_h
                IP-адрес назначения (жертвы)
            
            *   values(cookie)
                собирает уникальные значения поля cookie, которое может представлять сессию, логин или другой идентификатор

    -   where 
        Эта команда фильтрует результаты
        В гашем случаем, фильтрует только те случаи, где за 5 минут было более 30 попыток RDP-соединений от одного источника к одному получателю.
        Это характерно для RDP brute-force атаки, где бот пытается подключиться много раз за короткий промежуток времени.

=====================================================================
* Detecting SSH Brute Force Attacks *
*************************************

Выявление SSH Brute Force попыток очень походе на RDP
Поэтому фильтр мало чем будет отличаться

    index="ssh_bruteforce" sourcetype="bro:ssh:json"
        | bin _time span=5m
        | stats sum(auth_attempts) as total_attempts by _time, id.orig_h, id.resp_h, client, server
        | where total_attempts > 30

Основное отличие результатов по SSH попыткам заключается в том, что нас интересует  -   совокупное количество попыток аутентификации, где общее количество попыток превышает 30 в течение 5-минутного временного окна.
В связи с этим на пришлось изменить параметр STATS и where

