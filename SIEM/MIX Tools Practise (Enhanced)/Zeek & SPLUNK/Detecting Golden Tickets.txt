=====================================================================
* Введение *
************

Как Вы уже наверное значете, Zeek   -   обычно используется для тщательного изучения каждого бита трафика в сети, глубокого поиска любых признаков подозрительной или вредоносной активности.
Проще говоря, это такой же инструмент для анализа сетевого трафика, НО с другим (более узкоспециализированным) функционалом

Для подробной информции об общих и/или отличительных чертах Zeek от Wireshark, можно спросить ChatGPT или Google

!!! НО, очень часто Zeek используют для анализа пакетов собранных Wireshark (*.pcap)
    Поэтому, представленный ниже сценарий будет базироваться на анализе Zeek-ом некоторого *.pcap файла

Помимо взаимодействия с Zeek и Wireshark, будет также рассмотрено использование утилиты SPLUNK
Которая в свою очередь будет анализировать *.log файлы (это выжимка из *.pcap файла посредством Zeek/tShark) для отображения нужных результатов черех используемые фильтры

!!! Так как SPLUNK не работает на прямую с файлами типа *.pcap, то я КРАЙНЕ НАСТОЯТЕЛЬНО рекомендую ознакомиться с инструкцией по загрузки *.log файлов (каталогов) в базу данных SPLUNK

В данной презентации *.pcap файл уже был распарсен Zeek и все сформированные файлы были загружены в базу данных SPLUNK
Связанные материалы:

    -   PCAP-file           golden_ticket_attack.pcap
    -   Splunk Index:       golden_ticket_attack
    -   Splunk Sourcetupe:  bro:kerberos:json

Также перед оптимизацие фильтра, сперва рекомендую провести SPLUNK анализ без каких-либо уточняющих параметров
Это позволит увидеть вам название используемых полей-заголовков, которые мотом можно будет использовать для более тонкой настройки фильтрации

=====================================================================
* Detecting Golden Tickets *
****************************

Я уверен, что Вы уже знакомы с Golden Tickets.
К сожалению, Zeek не может надежно идентифицировать Golden Tickets.
Поэтому мы сосредоточим наш поиск Splunk на выявлении аномалий в создании билетов Kerberos.

В атаке Golden Ticket или Pass-the-Ticket злоумышленник обходит обычный процесс аутентификации Kerberos, который включает сообщения AS-REQ и AS-REP.

В типичном процессе аутентификации Kerberos клиент начинает с отправки сообщения AS-REQ (Authentication Service Request) в Key Distribution Center (KDC), в частности в Authentication Service (AS), запрашивая Ticket Granting Ticket (TGT).
KDC отвечает сообщением AS-REP (Authentication Service Response), которое включает TGT, если учетные данные клиента действительны.
Затем клиент может использовать TGT для запроса билетов на обслуживание (Ticket Granting Service tickets, или TGS) для определенных служб в сети.

    -   При атаке Golden Ticket злоумышленник генерирует поддельный TGT, который предоставляет ему доступ к любой службе в сети без необходимости аутентификации в KDC.
        Поскольку у злоумышленника есть поддельный TGT, он может напрямую запрашивать билеты TGS, не проходя через процессы AS-REQ и AS-REP.

    -   При атаке Pass-the-Ticket злоумышленник крадет действительный билет TGT или TGS у законного пользователя (например, путем взлома его машины), а затем использует этот билет для доступа к службам в сети, как если бы он был законным пользователем.
        Опять же, поскольку у злоумышленника уже есть действительный билет, он может обойти процессы AS-REQ и AS-REP.

Теперь давайте рассмотрим, как можно определить Golden Tickets с помощью Splunk и Zeek logs

    index="golden_ticket_attack" sourcetype="bro:kerberos:json"
        | where client!="-"
        | bin _time span=1m 
        | stats values(client), values(request_type) as request_types, dc(request_type) as unique_request_types by _time, id.orig_h, id.resp_h
        | where request_types=="TGS" AND unique_request_types==1

Данный фильтр используется для обнаружения возможной атаки Golden Ticket через анализ Kerberos-трафика, собранного с помощью Zeek (ex-Bro).
А конкретно, он ищет Kerberos-запросы только типа TGS без других типов (например, без AS).
Это может быть признаком атаки Golden Ticket, когда злоумышленник использует поддельный TGT.
Результаты агрегируются по IP и времени, чтобы легче было выявить подозрительную активность в кратком временном окне.

Вот расшифровка ключевых моментов фильтра:

    -   where client!="-"
        Эта строка отфильтровывает события, где поле client НЕ равно -.
        Это делается для удаления шума из данных путем исключения событий, где информация о клиенте недоступна.

    -   where request_types=="TGS" AND unique_request_types==1
        Эта строка фильтрует результаты, чтобы показать только те, где единственным типом запроса является TGS (Ticket Granting Service), и есть только один уникальный тип запроса.

