=====================================================================
* Введение *
************

Как Вы уже наверное значете, Zeek   -   обычно используется для тщательного изучения каждого бита трафика в сети, глубокого поиска любых признаков подозрительной или вредоносной активности.
Проще говоря, это такой же инструмент для анализа сетевого трафика, НО с другим (более узкоспециализированным) функционалом

Для подробной информции об общих и/или отличительных чертах Zeek от Wireshark, можно спросить ChatGPT или Google

!!! НО, очень часто Zeek используют для анализа пакетов собранных Wireshark (*.pcap)
    Поэтому, представленный ниже сценарий будет базироваться на анализе Zeek-ом некоторого *.pcap файла

Помимо взаимодействия с Zeek и Wireshark, будет также рассмотрено использование утилиты SPLUNK
Которая в свою очередь будет анализировать *.log файлы (это выжимка из *.pcap файла посредством Zeek/tShark) для отображения нужных результатов черех используемые фильтры

!!! Так как SPLUNK не работает на прямую с файлами типа *.pcap, то я КРАЙНЕ НАСТОЯТЕЛЬНО рекомендую ознакомиться с инструкцией по загрузки *.log файлов (каталогов) в базу данных SPLUNK

В данной презентации *.pcap файл уже был распарсен Zeek и все сформированные файлы были загружены в базу данных SPLUNK
Связанные материалы:

    -   PCAP-file           cobaltstrike_beacon.pcap
    -   Splunk Index:       cobaltstrike_beacon
    -   Splunk Sourcetupe:  bro:conn:json

Также перед оптимизацие фильтра, сперва рекомендую провести SPLUNK анализ без каких-либо уточняющих параметров
Это позволит увидеть вам название используемых полей-заголовков, которые мотом можно будет использовать для более тонкой настройки фильтрации

=====================================================================
* Detecting Nmap Port Scanning *
********************************

Сканирование портов с помощью Nmap — ключевой метод в наборе инструментов как злоумышленников, так и тестировщиков на проникновение.
По сути, то, что мы делаем с помощью Nmap, — это проверка сетевых систем на предмет открытых портов — это «ворота», через которые данные поступают в систему и выходят из нее.
Открытые порты можно сравнить с дверями, которые могут быть открыты в здании — дверями, которые злоумышленники могут использовать для получения доступа.

Когда мы используем Nmap для сканирования портов, мы, по сути, инициируем серию запросов на подключение.
Мы систематически пытаемся установить TCP-рукопожатие с каждым портом в адресном пространстве цели.
Если подключение успешно, это означает, что порт открыт.
Вот тут-то и начинается самое интересное.
Когда мы подключаемся к открытому порту, служба, прослушивающая этот порт, может отправить обратно «баннер» — это, по сути, небольшой фрагмент данных, сообщающий нам, какая служба запущена и, возможно, даже какая ее версия.

Но давайте проясним одно заблуждение: когда мы говорим о том, что Nmap отправляет данные на сканирующий порт, мы на самом деле не отправляем никаких реальных данных.
Помимо самого TCP-рукопожатия, полезная нагрузка пакетов, отправляемых Nmap, равна нулю.
Мы не отправляем никаких дополнительных данных; мы просто пытаемся инициировать соединение.

Теперь давайте рассмотрим, как можно определить Nmap Port Scanning с помощью Splunk и Zeek logs

    index="cobaltstrike_beacon" sourcetype="bro:conn:json" orig_bytes=0 dest_ip IN (192.168.0.0/16, 172.16.0.0/12, 10.0.0.0/8) 
        | bin span=5m _time 
        | stats dc(dest_port) as num_dest_port by _time, src_ip, dest_ip 
        | where num_dest_port >= 3

Этот фильтр выполняет поиск потенциальных признаков сканирования портов или активностей Cobalt Strike Beacon внутри внутренней сети.
Что может говорить о попытках разведки или эксплуатации, когда атакующий сканирует службы на внутренних хостах или beacon ведёт "живую разведку"

Вот расшифровка ключевых моментов фильтра:

    -   orig_bytes=0:
        Проверяет исходящий трафик от клиента на предмет наличия/отсутствия байтов данных в переданных пакетах
        В нашем случае фокусируется на сетевых событиях, где исходные отправленные байты равны нулю.

    -   dest_ip IN 
        Поиск сетевых событий, где IP-адрес назначения находится в диапазонах указанных IP-адресов
        В нашем случае те, которые обычно используются во внутренних сетях.

    -   stats dc(dest_port) 
        Функция dc(dest_port) подсчитывает уникальное количество портов назначения, к которым был получен доступ 
