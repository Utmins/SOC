=====================================================================
* Введение *
************

Как Вы уже наверное значете, Zeek   -   обычно используется для тщательного изучения каждого бита трафика в сети, глубокого поиска любых признаков подозрительной или вредоносной активности.
Проще говоря, это такой же инструмент для анализа сетевого трафика, НО с другим (более узкоспециализированным) функционалом

Для подробной информции об общих и/или отличительных чертах Zeek от Wireshark, можно спросить ChatGPT или Google

!!! НО, очень часто Zeek используют для анализа пакетов собранных Wireshark (*.pcap)
    Поэтому, представленный ниже сценарий будет базироваться на анализе Zeek-ом некоторого *.pcap файла

Помимо взаимодействия с Zeek и Wireshark, будет также рассмотрено использование утилиты SPLUNK
Которая в свою очередь будет анализировать *.log файлы (это выжимка из *.pcap файла посредством Zeek/tShark) для отображения нужных результатов черех используемые фильтры

!!! Так как SPLUNK не работает на прямую с файлами типа *.pcap, то я КРАЙНЕ НАСТОЯТЕЛЬНО рекомендую ознакомиться с инструкцией по загрузки *.log файлов (каталогов) в базу данных SPLUNK

В данной презентации *.pcap файл уже был распарсен Zeek и все сформированные файлы были загружены в базу данных SPLUNK
Связанные материалы:

    -   PCAP-file           cdns_exf.pcap
    -   Splunk Index:       dns_exf
    -   Splunk Sourcetupe:  bro:dns:json

Также перед оптимизацие фильтра, сперва рекомендую провести SPLUNK анализ без каких-либо уточняющих параметров
Это позволит увидеть вам название используемых полей-заголовков, которые мотом можно будет использовать для более тонкой настройки фильтрации

=====================================================================
* Detecting Exfiltration (DNS) *
********************************

Злоумышленники используют DNS-эксфильтрацию из-за ее надежности, скрытности и того факта, что DNS-трафик часто разрешен по умолчанию в правилах сетевого брандмауэра.
Внедряя данные в DNS-запросы и ответы, злоумышленники могут обходить элементы управления безопасностью и скрытно извлекать данные. Ниже приведено подробное объяснение этой техники и методов обнаружения

Как работает DNS-эксфильтрация:

    -   Initial Compromise (первоначальная компрометация)
        Злоумышленник получает доступ к сети жертвы, как правило, с помощью вредоносного ПО, фишинга или эксплуатации уязвимостей.

    -   Data Identification and Preparation (идентификация и подготовка данных)
        Злоумышленник находит данные, которые он хочет извлечь, и подготавливает их к передаче.
        Обычно это включает кодирование или шифрование данных и разбиение их на небольшие фрагменты.

    -   Exfiltration via DNS (эксфильтрация через DNS)
        Злоумышленник отправляет данные в поддомены DNS-запросов, используя такие методы, как DNS-туннелирование или fast flux.
        Обычно для этой цели они используют домен под своим контролем или скомпрометированный домен.
        DNS-сервер злоумышленника получает запросы, извлекает данные и собирает их заново.

    -   Data Retrieval and Analysis (извлечение и анализ данных)
        После эксфильтрации злоумышленник декодирует или расшифровывает данные и анализирует их.

При анализе трафика посредством Wireshark можно заметить аноальный DNS-траффик и как правило одного и тогоже размера (больше обычного)

Теперь давайте рассмотрим, как можно определить Exfiltration (DNS) с помощью Splunk и Zeek logs

    index=dns_exf sourcetype="bro:dns:json"
        | eval len_query=len(query)
        | search len_query>=40 AND query!="*.ip6.arpa*" AND query!="*amazonaws.com*" AND query!="*._googlecast.*" AND query!="_ldap.*"
        | bin _time span=24h
        | stats count(query) as req_by_day, values(query) as suspicious_domains by _time, id.orig_h, id.resp_h,
        | where req_by_day>60
        | table _time, id.orig_h, id.resp_h, req_by_day, suspicious_domains

Этот фильтр используется для обнаружения подозрительной DNS-активности, в частности — возможной DNS-эксфильтрации данных (DNS exfiltration), путём анализа аномально длинных или частых DNS-запросов.
А именно:

    1)  Ищет DNS-запросы длиной 40+ символов.

    2)  Исключает типичный "шум" от легитимных сервисов.

    3)  Группирует эти события по клиенту, DNS-серверу и дню.

    4)  Выводит только тех клиентов, кто делает 60+ подозрительных длинных DNS-запросов в день.

Вот расшифровка ключевых моментов фильтра:

    -   eval len_query=len(query)
        Добавляет новое поле len_query, в котором хранится длина DNS-запроса (query).
        Например, если query = "abc.example.com", len_query = 15.
    
    -   search len_query>=40 AND query!="*.ip6.arpa*" AND query!="*amazonaws.com*" AND query!="*._googlecast.*" AND query!="_ldap.*"
        Фильтрует события:

            *   DNS-запрос должен быть длиной 40 символов и более (это может указывать на шифрованные или закодированные строки)
            *   Исключаются известные легитимные паттерны, такие как:

                    -   IPv6 PTR-запросы (*.ip6.arpa)
                    -   Запросы к AWS (*amazonaws.com*)
                    -   Запросы устройств Chromecast (*._googlecast.*)
                    -   LDAP-автообнаружение (_ldap.*)

        Это помогает отсеять "шум" от системных и облачных сервисов, которые часто делают длинные DNS-запросы.
    
    -   where req_by_day>60
        Оставляет только те пары клиент-сервер, у которых более 60 длинных DNS-запросов в сутки.
        Это может быть признаком эксфильтрации данных через DNS, особенно если домены необычные.
