Ниже будут представленые своего рода команды-подсказки, которые можно использовать как шаблон при анализе/поиске информации в логах
Но это лишь вершина айсберга
Обширный набор команд и гибкий синтаксис обеспечивают всеобъемлющие возможности анализа данных.
Как и в любом языке, мастерство приходит с практикой и опытом. Ниже вы найдете несколько отличных ресурсов, с которых можно начать:

    https://docs.splunk.com/Documentation/SCS/current/SearchReference/Introduction
    https://docs.splunk.com/Documentation/SplunkCloud/latest/SearchReference/
    https://docs.splunk.com/Documentation/SplunkCloud/latest/Search/

=====================================================================
* Seach Commands *
******************

    ++++++++++++++++
    + basic search +
    ++++++++++++++++

        index="main" "*UNKNOWN*"
    
    Указывая index как основной, запрос сужает поиск только до событий, хранящихся в основном индексе.
    Затем термин UNKNOWN используется как ключевое слово для фильтрации и извлечения событий, которые включают этот конкретный термин (в нашем примере это UNKNOWN).
    Подстановочные знаки (*) могут заменять любое количество символов в поиске и значениях полей.
    Таким образом, этот запрос будет искать в основном индексе события, которые содержат термин UNKNOWN где-либо в данных событий

    ++++++++++
    + fields +
    ++++++++++

    Команда fields указывает, какие поля следует включить или исключить из результатов поиска.

        index="main" sourcetype="WinEventLog:Sysmon" EventCode=1 | fields - User

    После извлечения всех событий создания процесса из основного индекса команда fields исключает поле User из результатов поиска.
    Таким образом, результаты будут содержать все поля, которые обычно находятся в журналах Sysmon Event ID 1, за исключением пользователя, инициировавшего процесс.
    Обратите внимание, что использование sourcetype ограничивает область действия исключительно журналами событий Sysmon.

    +++++++++
    + table +
    +++++++++

    Команда table представляет результаты поиска в табличном формате. 

        index="main" sourcetype="WinEventLog:Sysmon" EventCode=1 | table _time, host, Image

    Этот запрос возвращает события создания процесса, затем упорядочивает выбранные поля (_time, host и Image) в табличном формате, где:
    
        _time   -   это временная метка события,
        host    -   это имя хоста, на котором произошло событие
        Image   -   это имя исполняемого файла, представляющего процесс
    
    ++++++++++
    + rename +
    ++++++++++

    Команда rename переименовывает поле в результатах поиска.

        index="main" sourcetype="WinEventLog:Sysmon" EventCode=1 | rename Image as Process

    Эта команда переименовывает поле Image в Process в результатах поиска.
    Поле Image в журналах Sysmon представляет имя исполняемого файла для процесса.
    После его переименования все последующие ссылки на Process теперь будут ссылаться на то, что изначально было полем Image

    +++++++++
    + dedup +
    +++++++++

    Команда 'dedup' удаляет дублирующиеся события.

        index="main" sourcetype="WinEventLog:Sysmon" EventCode=1 | dedup Image

    Команда dedup удаляет дублирующиеся записи на основе поля Image из событий создания процесса.
    Это означает, что если один и тот же процесс (Image) создается несколько раз, он появится в результатах только один раз, эффективно удаляя повторение.

    ++++++++
    + sort +
    ++++++++

    Команда sort сортирует результаты поиска.

        index="main" sourcetype="WinEventLog:Sysmon" EventCode=1 | sort - _time

    Эта команда сортирует все события создания процессов в основном индексе в порядке убывания их временных меток (_time), т. е. сначала отображаются самые последние события.

    +++++++++
    + stats +
    +++++++++

    Команда stats выполняет статистические операции.

        index="main" sourcetype="WinEventLog:Sysmon" EventCode=3 | stats count by _time, Image

    Этот запрос вернет таблицу, в которой каждая строка представляет собой уникальную комбинацию временной метки (_time) и процесса (Image)
    Столбец count указывает количество событий сетевого подключения, произошедших для этого конкретного процесса в это конкретное время.

    Однако сложно визуализировать эти данные с течением времени для каждого процесса, поскольку данные для каждого процесса разбросаны по всей таблице.
    Нам нужно будет вручную отфильтровать по процессу (Image), чтобы увидеть количество с течением времени для каждого из них.

    +++++++++
    + chart +
    +++++++++

    Команда chart создает визуализацию данных на основе статистических операций.

        index="main" sourcetype="WinEventLog:Sysmon" EventCode=3 | chart count by _time, Image

    Этот запрос вернет таблицу, в которой каждая строка представляет уникальную временную метку (_time), а каждый столбец представляет уникальный процесс (Image).
    Значения ячеек указывают количество событий сетевого подключения, произошедших для каждого процесса в каждое конкретное время.

    С помощью команды chart вы можете легко визуализировать данные с течением времени для каждого процесса, поскольку у каждого процесса есть свой столбец.
    Вы можете быстро увидеть количество событий сетевого подключения с течением времени для каждого процесса.

    ++++++++
    + eval +
    ++++++++

    Команда eval создает или переопределяет поля.

        index="main" sourcetype="WinEventLog:Sysmon" EventCode=1 | eval Process_Path=lower(Image)

    Эта команда создает новое поле Process_Path, которое содержит версию поля Image в нижнем регистре
    Это делается для того, чтобы поиск не был чувствителен к регистру и чтобы стандартизировать данные.
    Она не изменяет фактическое поле Image, но создает новое поле, которое можно использовать в последующих операциях или для отображения.

    +++++++
    + rex +
    +++++++

    Команда rex извлекает новые поля из существующих с помощью регулярных выражений.

        index="main" EventCode=4662 | rex max_match=0 "[^%](?<guid>{.*})" | table guide

        -   index="main" EventCode=4662 фильтрует события по тем, которые находятся в основном индексе с EventCode, равным 4662.
            Это сужает поиск до определенных событий с указанным EventCode.

        -   rex max_match=0 "[^%](?<guid>{.*})" использует команду rex для извлечения значений, соответствующих шаблону, из полей событий.
            Шаблон регулярного выражения {.*} ищет подстроки, которые начинаются с { и заканчиваются на }.
            Часть [^%] гарантирует, что совпадение не начинается с символа %.
            Захваченное значение в фигурных скобках назначается именованной группе захвата guid.

        -   table guid отображает извлеченные GUID в выходных данных.
            Эта команда используется для форматирования результатов и отображения только поля guid.

        -   Опция max_match=0 гарантирует, что все вхождения шаблона будут извлечены из каждого события.
            По умолчанию команда rex извлекает только первое вхождение.

    Это полезно, поскольку GUID не извлекаются автоматически из журналов событий 4662.

    +++++++
    + bin +
    +++++++

    Команда bin в Splunk используется для группировки данных в интервалы времени или числовые диапазоны.
    Это полезно для агрегации событий по времени или числовым данным, чтобы их можно было анализировать на более высоком уровне.
    В частности, bin чаще всего используется для округления временных меток в событиях, чтобы они попадали в определенные интервалы (например, по 10 минут, по часу и т. д.).
    
        bin <field> span=<interval> [as <new_field>]

        -   <field>
            это поле, которое вы хотите округлить или разделить на интервалы.
            Обычно это поле времени (_time), но оно также может быть числовым (например, поле с измерениями или количеством).

        -   span=<interval>
            Это интервал времени или диапазон, на который нужно округлить значения поля.
            Например, span=10m для 10 минут, span=1h для 1 часа, span=1d для 1 дня.
            Для числовых полей также можно использовать интервал, например, span=10 для округления значений до ближайших 10.

        -   as <new_field> — (опционально)
            Это позволяет задать имя для нового поля, в котором будет содержаться округленное значение.
            Если не указано, то используется имя исходного поля.

    
    ++++++++++
    + lookup +
    ++++++++++

    Команда поиска обогащает данные внешними источниками.
    Дорустим у Вас есть некий CSV-файл (к примеру - malware_lookup.csv) с информацией, которую вы хотите использовать при анализе лога
    Содержание файла:

        filename, is_malware
        notepad.exe, false
        cmd.exe, false
        powershell.exe, false
        sharphound.exe, true
        randomfile.exe, true

    Чтобы добавить/включить/использовать этот файл в анализе, нужно сделать слудеющее

        Settings -> Lookups -> Lookup table files -> New Lookup Table File -> Заполняем все поля -> Save
    
    Вот пример комнады поиска с использованием вышеперечисленных команд + lookup

        index="main" sourcetype="WinEventLog:Sysmon" EventCode=1 | rex field=Image "(?P<filename>[^\\\]+)$" | eval filename=lower(filename) | lookup malware_lookup.csv filename OUTPUTNEW is_malware | table filename, is_malware
    
        -   index="main" sourcetype="WinEventLog:Sysmon" EventCode=1
            Это критерий поиска.
            Он ищет журналы Sysmon (как определено sourcetype) с EventCode 1 (что представляет события создания процесса) в индексе "main".

        -   rex field=Image "(?P<filename>[^\\\]+)$"
            Эта команда использует регулярное выражение (regex) для извлечения части поля Image.
            Поле Image в журналах Sysmon EventCode=1 обычно содержит полный путь к файлу процесса.
            Это регулярное выражение говорит    -   Захватите все после последней обратной косой черты (которая должна быть самим именем файла) и сохраните это как filename.

        -   eval filename=lower(filename)
            Эта команда берет только что извлеченное имя файла и преобразует его в нижний регистр.
            Функция lower() используется для обеспечения того, чтобы поиск был нечувствительным к регистру.

        -   lookup malware_lookup.csv filename OUTPUTNEW is_malware
            Эта команда выполняет операцию поиска, используя имя файла в качестве ключа.
            Таблица поиска (malware_lookup.csv) должна содержать список имен файлов известных вредоносных исполняемых файлов.
            Если в таблице поиска найдено совпадение, в событие добавляется новое поле is_malware, которое указывает, считается ли процесс вредоносным на основе таблицы поиска.
            filename в этой части запроса — это первый заголовок столбца в CSV.

        -   table filename, is_malware
            Эта команда форматирует вывод, чтобы отображать только поля filename и is_malware
            Если is_malware отсутствует в строке, это означает, что в таблице поиска для этого имени файла не найдено совпадений.

    Подводя итог, этот запрос извлекает имена файлов вновь созданных процессов, преобразует их в нижний регистр, сравнивает их со списком известных вредоносных имен файлов и представляет результаты в таблице.

    Эквивалент, который также удаляет дубликаты, выглядит следующим образом.

        index="main" sourcetype="WinEventLog:Sysmon" EventCode=1 | eval filename=mvdedup(split(Image, "\\")) | eval filename=mvindex(filename, -1) | eval filename=lower(filename) | lookup malware_lookup.csv filename OUTPUTNEW is_malware | table filename, is_malware | dedup filename, is_malware
    
        -   index="main" sourcetype="WinEventLog:Sysmon" EventCode=1
            эта команда является критерием поиска.
            Она извлекает данные из основного индекса, где sourcetype — WinEventLog:Sysmon, а EventCode — 1. Sysmon EventCode, равный 1, указывает на событие создания процесса.

        -   eval filename=mvdedup(split(Image, "\\"))
            эта команда разбивает поле Image, содержащее путь к файлу, на несколько элементов в каждой обратной косой черте и делает его многозначным полем.
            Функция mvdedup используется для устранения любых дубликатов в этом многозначном поле.

        -   eval filename=mvindex(filename, -1)
            здесь функция mvindex используется для выбора последнего элемента многозначного поля, сгенерированного на предыдущем шаге.
            В контексте пути к файлу это обычно будет фактическое имя файла.

        -   eval filename=lower(filename)
            эта команда берет поле имени файла и преобразует его в нижний регистр с помощью функции lower.
            Это делается для того, чтобы поиск не был чувствителен к регистру и чтобы стандартизировать данные.

        -   lookup malware_lookup.csv filename OUTPUTNEW is_malware
            эта команда выполняет операцию поиска.
            Команда lookup берет поле filename и проверяет, совпадает ли оно с какими-либо записями в таблице поиска malware_lookup.csv.
            Если есть совпадение, она добавляет новое поле is_malware к событию, указывая, помечен ли процесс как вредоносный.

        -   table filename, is_malware
            команда table используется для форматирования вывода, в этом случае отображаются только поля filename и is_malware в табличном формате.

        -   dedup filename, is_malware
            эта команда устраняет любые дубликаты событий на основе полей filename и is_malware.
            Другими словами, если в результатах поиска есть несколько одинаковых записей для полей filename и is_malware, команда dedup сохранит только первое вхождение и удалит все последующие дубликаты.

    Подводя итог, можно сказать, что этот запрос ищет в журналах Sysmon события создания процессов, извлекает имя файла из поля Image, преобразует его в нижний регистр, сопоставляет его со списком известных вредоносных программ из файла malware_lookup.csv
    А затем отображает результаты в таблице, удаляя все дубликаты на основе полей filename и is_malware.

    +++++++++++++++
    + inputlookup +
    +++++++++++++++

    Команда inputlookup извлекает данные из файла поиска, не присоединяя их к результатам поиска.

        inputlookup malware_lookup.csv

    Эта команда извлекает все записи из файла malware_lookup.csv.
    Результат не присоединяется ни к каким результатам поиска, но может использоваться для проверки содержимого файла поиска или для последующих операций, таких как фильтрация или присоединение к другим наборам данных.

    ++++++++++++++
    + Time Range +
    ++++++++++++++

    Каждое событие в Splunk имеет временную метку.
    Используя выбор временного диапазона или команды the earlier и latest, вы можете ограничить поиск определенными временными периодами.

        index="main" early=-7d EventCode!=1

    Объединив условие index="main" с earlier=-7d и EventCode!=1, запрос извлечет события из основного индекса, которые произошли за последние семь дней и не имеют значения EventCode 1.

    +++++++++++++++
    + transaction +
    +++++++++++++++

    Команда transaction используется в Splunk для группировки событий, имеющих общие характеристики, в транзакции, часто используемые для отслеживания сеансов или действий пользователя, охватывающих несколько событий.

        index="main" sourcetype="WinEventLog:Sysmon" (EventCode=1 OR EventCode=3) | transaction Image startswith=eval(EventCode=1) endswith=eval(EventCode=3) maxspan=1m | table Image | dedup Image

        -   index="main" sourcetype="WinEventLog:Sysmon" (EventCode=1 OR EventCode=3)
            Это критерий поиска.
            Он извлекает данные из основного индекса, где sourcetype — WinEventLog:Sysmon, а EventCode — 1 или 3.
            В журналах Sysmon EventCode 1 относится к событию создания процесса, а EventCode 3 — к событию сетевого подключения.

        -   transaction Image startswith=eval(EventCode=1) endswith=eval(EventCode=3) maxspan=1m
            команда transaction используется здесь для группировки событий на основе поля Image, которое представляет исполняемый файл или сценарий, вовлеченный в событие.
            Эта группировка подчиняется условиям: транзакция начинается с события, где EventCode равен 1, и заканчивается событием, где EventCode равен 3.
            Предложение maxspan=1m ограничивает транзакцию событиями, происходящими в течение 1-минутного окна.
            Команда transaction может связывать связанные события, чтобы обеспечить лучшее понимание последовательностей действий, происходящих в системе.

        -   table Image
            эта команда форматирует вывод в таблицу, отображая только поле Image.

        -   dedup Image
            Эта команда dedup удаляет повторяющиеся записи из набора результатов.
            Здесь она удаляет любые повторяющиеся значения Image.
            Команда сохраняет только первое вхождение и удаляет последующие дубликаты на основе поля Image.

    Вкратце, этот запрос направлен на выявление последовательностей действий (создание процесса, за которым следует сетевое подключение), связанных с одним и тем же исполняемым файлом или скриптом в пределах 1-минутного окна.
    Он представляет результаты в табличном формате, гарантируя, что перечисленные исполняемые файлы/скрипты являются уникальными.
    Запрос может быть ценным при поиске угроз, особенно при поиске индикаторов компрометации, таких как быстрые последовательности создания процессов и событий сетевого подключения, инициированных одним и тем же исполняемым файлом.

    +++++++++++++++
    + subsearches +
    +++++++++++++++

    Подпоиск в Splunk — это поиск, который вложен в другой поиск.
    Он используется для вычисления набора результатов, которые затем используются во внешнем поиске.

        index="main" sourcetype="WinEventLog:Sysmon" EventCode=1 NOT [ search index="main" sourcetype="WinEventLog:Sysmon" EventCode=1 | top limit=100 Image | fields Image ] | table _time, Image, CommandLine, User, ComputerName

        -   index="main" sourcetype="WinEventLog:Sysmon" EventCode=1
            Основной поиск, который извлекает события EventCode=1 (создание процесса).

        -   NOT [.....]
            Квадратные скобки содержат подпоиск.
            Если поместить NOT перед ним, основной поиск исключит все результаты, возвращаемые подпоиском.

        -   [search index="main" sourcetype="WinEventLog:Sysmon" EventCode=1 | top limit=100 Image | fields Image]
            Подпоиск, который извлекает события EventCode=1 (создание процесса), затем использует команду top для возврата 100 наиболее распространенных имен Image (процесса).
        
        -   table _time, Image, CommandLine, User, Computer
            представляет окончательные результаты в виде таблицы, отображающей временную метку события (_time), имя процесса (Image), командную строку, используемую для выполнения процесса (CommandLine), пользователя, запустившего процесс (User), и компьютер, на котором произошло событие (ComputerName).

    Этот запрос может помочь выделить необычные или редкие процессы, которые стоит исследовать на предмет потенциальной вредоносной активности.
    Обязательно отрегулируйте ограничение в подпоиске по мере необходимости в соответствии с вашей средой.

    *** Обратите внимание, что этот тип поиска может генерировать много шума в средах, где часто создаются новые и уникальные процессы, поэтому важны тщательная настройка и контекст.

=====================================================================
* How To Identify The Available Data *
**************************************

    +++++++++++++++++++++++++++++++++++++++++
    + available source types identification +
    +++++++++++++++++++++++++++++++++++++++++

    Чтобы определить доступные типы источников, мы можем выполнить следующую команду SPL, выбрав подходящий временной диапазон в средстве выбора времени приложения Search & Reporting.

        | eventcount summary=false index=* | table index

    Этот запрос использует eventcount для подсчета событий во всех индексах
    Затем summary=false используется для отображения счетчиков для каждого индекса отдельно
    И, наконец, команда table используется для представления данных в табличной форме.

    +++++++++++++++++++++++++++++
    + focusing on metadata type +
    +++++++++++++++++++++++++++++

        | metadata type=sourcetypes

    Этот поиск использует команду metadata, которая предоставляет нам различную статистику об указанных индексированных полях.
    Здесь мы фокусируемся на sourcetypes.
    Результатом является список всех sourcetypes в нашей среде Splunk, а также дополнительные метаданные, такие как время первого появления типа источника (firstTime), время последнего появления (lastTime) и количество хостов (totalCount).

    Для более простого просмотра мы можем использовать следующий поиск.

        | metadata type=sourcetypes index=* | table sourcetype
    
    Здесь команда metadata извлекает метаданные о данных в наших индексах.
    Аргумент type=sourcetypes сообщает Splunk о необходимости возврата метаданных об sourcetypes.
    Команда table используется для представления данных в табличной форме.

    +++++++++++++++++++++++++++++++
    + using different sourcetypes +
    +++++++++++++++++++++++++++++++

    i)      Как только мы узнаем наши типы источников (sourcetype), мы можем исследовать тип данных, которые они содержат.
            Допустим, нас интересует тип источника с именем WinEventLog:Security, мы можем использовать команду table для представления необработанных данных следующим образом.

                sourcetype="WinEventLog:Security" | table _raw

            Команда table генерирует таблицу с указанными полями в качестве столбцов.
            Здесь _raw представляет необработанные данные событий.
            Эта команда вернет необработанные данные для указанного типа источника.

    ii)     Splunk автоматически извлекает набор полей по умолчанию для каждого индексируемого им события, но он также может извлекать дополнительные поля в зависимости от типа источника данных.
            Чтобы увидеть все поля, доступные в определенном типе источника, мы можем использовать команду fields.

                sourcetype="WinEventLog:Security" | table *

            Эта команда генерирует таблицу со всеми полями, доступными в исходном типе WinEventLog:Security.
            Однако будьте осторожны, так как использование table * может привести к очень широкой таблице, если наши события имеют большое количество полей.
            Это может быть визуально непрактично или неэффективно для анализа данных.

    iii)    Лучшим подходом будет определить поля, которые вас интересуют, с помощью команды fields, как упоминалось ранее, а затем указать эти имена полей в команде table.

                sourcetype="WinEventLog:Security" | fields Account_Name, EventCode | table Account_Name, EventCode
    
    iv)     Если мы хотим увидеть только список имен полей, без данных, мы можем использовать команду fieldsummary.

                sourcetype="WinEventLog:Security" | fieldsummary

            Этот поиск вернет таблицу, которая включает все поля, найденные в событиях, возвращенных поиском (по указанному нами sourcetype).
            Таблица включает несколько столбцов информации о каждом поле:

                -   field
                    имя поля.
                
                -   count
                    количество событий, содержащих поле.
                
                -   different_count
                    количество отдельных значений в поле.
                
                -   is_exact
                    является ли количество точным или приблизительным.
                
                -   max
                    максимальное значение поля.
                
                -   mean
                    среднее значение поля.
                
                -   min
                    минимальное значение поля.
                
                -   numeric_count
                    количество числовых значений в поле.
                
                -   stdev
                    стандартное отклонение поля.
                
                -   values
                    выборочные значения поля.

            Мы также можем увидеть:

                -   modes
                    наиболее распространенные значения поля.
                
                -   numBuckets
                    Количество сегментов, используемых для оценки количества отдельных элементов.
            
            Обратите внимание, что значения, предоставляемые командой fieldsummary, рассчитываются на основе событий, возвращаемых нашим поиском.
        
    v)      Поэтому, если мы хотим увидеть все поля в определенном sourcetype, нам нужно убедиться, что наш временной диапазон достаточно велик, чтобы охватить все возможные поля.

                index=* sourcetype=* | bucket _time span=1d | stats count by _time, index, sourcetype | sort - _time

            Иногда нам может понадобиться узнать, как события распределяются по времени.
            Этот запрос извлекает все данные (index=* sourcetype=*)
            Затем команда bucket используется для группировки событий на основе поля _time в 1-дневные сегменты.
            Далее команда stats подсчитывает количество событий для каждого дня (_time), индекса и sourcetype.
            И наконец, команда sort сортирует результат в порядке убывания _time.
    
    vi)     Команда rare может помочь нам определить необычные типы событий, которые могут быть признаком ненормального поведения.
            
                index=* sourcetype=* | rare limit=10 index, sourcetype
            
            Этот запрос извлекает все данные и находит 10 самых редких комбинаций индексов и sourcetypes.

    vii)    Более сложный запрос может предоставить подробную сводку полей. 
    
                index=* sourcetype=* | fieldssummary | where count < 100 | table field, count, distinct_count

            Этот поиск показывает сводку всех полей (fieldsummary), отфильтровывает поля, которые появляются менее чем в 100 событиях (где count < 100), а затем отображает таблицу (table), показывающую имя поля, общее количество и количество уникальных.

    viii)   Мы также можем использовать команду sistats для исследования разнообразия событий.
            
                index=* | sistats count by index, sourcetype, source, host

            Эта команда подсчитывает количество событий на индекс, sourcetype, источник и хост, что может предоставить нам ясную картину разнообразия и распределения наших данных.
    
    ix)     Команда rare также может использоваться для поиска необычных комбинаций значений полей (Замените field1, field2, field3 на интересующие вас поля)
    
                index=* sourcetype=* | rare limit=10 field1, field2, field3
    
            Эта команда отобразит 10 самых редких комбинаций этих полей.
    
.

