=====================================================================
* YARA & SIGMA: Commnon *
*************************

YARA и Sigma — два основных инструмента, используемых аналитиками SOC для улучшения возможностей обнаружения угроз и реагирования на инциденты.
Они предоставляют аналитикам:

	-	улучшенные возможности обнаружения угроз
	-	эффективный анализ журналов
	-	обнаружение и классификацию вредоносных программ
	-	идентификацию IOC
	-	совместную работу, настройку и интеграцию с существующими инструментами безопасности.

YARA преуспевает в анализе файлов и памяти, а также в сопоставлении шаблонов
Тогда как Sigma особенно искусна в анализе журналов и системах SIEM.

Эти правила обнаружения используют условную логику, применяемую к журналам или файлам.
Аналитики создают эти правила для выявления подозрительных действий в журналах или сопоставления шаблонов в файлах.
Поэтому, эти правила играют решающую роль в упрощении составления обнаружений и, таким образом, они представляют собой важнейший элемент эффективной стратегии обнаружения угроз.

И YARA, и Sigma придерживаются стандартных форматов, которые облегчают создание и совместное использование правил обнаружения в сообществе кибербезопасности.

Найти данные инструменты пожно по следующим ссылкам:

	YARA	-	https://virustotal.github.io/yara/
				ttps://yara.readthedocs.io/en/latest/
				https://github.com/Neo23x0/YARA-Style-Guide
	
	SIGMA	-	https://github.com/SigmaHQ/sigma

Давайте рассмотрим основные причины, по которым YARA и Sigma бесценны для аналитиков SOC:

	-	Улучшенное обнаружение угроз
		Правила YARA и Sigma позволяют аналитикам SOC разрабатывать индивидуальные правила обнаружения, соответствующие их уникальной среде и потребностям безопасности.
		Эти правила помогают различать шаблоны, поведение или индикаторы, связанные с угрозами безопасности, что позволяет им заранее обнаруживать и устранять потенциальные инциденты.
		Различные репозитории Github предоставляют множество примеров правил YARA и Sigma.

			Правила Sigma	-	https://github.com/SigmaHQ/sigma/tree/master/rules
								https://github.com/joesecurity/sigma-rules
								https://github.com/mdecrevoisier/SIGMA-detection-rules

	-	Эффективный анализ журналов
		Правила Sigma необходимы для анализа журналов в условиях SOC.
		Используя правила Sigma, аналитики могут фильтровать и сопоставлять данные журналов из разрозненных источников, концентрируясь на событиях, относящихся к мониторингу безопасности.
		Это минимизирует нерелевантные данные и позволяет аналитикам расставлять приоритеты в своих следственных действиях, что приводит к более эффективному и действенному реагированию на инциденты.
		Инструмент с открытым исходным кодом (к примеру такой как - Chainsaw) можно использовать для применения правил Sigma к файлам журналов событий.

		Найти Chainsaw можно по следующей ссылке	-	https://github.com/WithSecureLabs/chainsaw

	-	Сотрудничество и стандартизация
		YARA и Sigma предлагают стандартизированные форматы и структуры правил, способствуя сотрудничеству аналитиков SOC и используя коллективный опыт более широкого сообщества по кибербезопасности.
		Это поощряет обмен знаниями, разработку лучших практик и позволяет аналитикам быть в курсе передовых методов анализа и обнаружения угроз.
		Например, сайт с «Отчетами DFIR» делится правилами YARA и Sigma, полученными в результате их расследований.

		Сслыки на полезные ресурсы:

			Отчеты DFIR						-	https://thedfirreport.com/
			Отчеты DFIR c правилами YARA	-	https://github.com/The-DFIR-Report/Yara-Rules
			Отчеты DFIR c правилами SIGMA	-	https://github.com/The-DFIR-Report/Sigma-Rules


	-	Интеграция с инструментами безопасности
		Правила YARA и Sigma можно легко интегрировать с множеством инструментов безопасности, включая платформы SIEM, системы анализа журналов и платформы реагирования на инциденты.
		Эта интеграция обеспечивает автоматизацию, корреляцию и обогащение событий безопасности, позволяя аналитикам SOC включать правила в свою существующую инфраструктуру безопасности.
		Например, Uncoder.io облегчает преобразование правил Sigma в индивидуальные, оптимизированные по производительности запросы, готовые к развертыванию в выбранных системах SIEM и XDR.

		Найти Uncoder.io можно тут	-	https://uncoder.io/

	-	Обнаружение и классификация вредоносного ПО
		Правила YARA особенно полезны для аналитиков SOC при выявлении и классификации вредоносного ПО.
		Используя правила YARA, аналитики могут создавать определенные шаблоны или сигнатуры, которые соответствуют известным признакам или поведению вредоносного ПО.
		Это помогает в быстром обнаружении и смягчении угроз вредоносного ПО, укрепляя общую позицию безопасности организации.

	-	Идентификация индикатора компрометации (IOC)
		Правила YARA и Sigma позволяют аналитикам SOC находить и идентифицировать IOC, которые являются отдельными артефактами или поведением, связанными с инцидентами или нарушениями безопасности.
		Встраивая IOC в свои правила, аналитики могут быстро обнаруживать и противодействовать потенциальным угрозам, тем самым смягчая последствия инцидентов безопасности и сокращая продолжительность присутствия злоумышленников в сети.

=====================================================================
* YARA *
********

YARA    -   Yet Another Recursive Acronym
Это мощный инструмент сопоставления шаблонов и формат правил, используемый для идентификации и классификации файлов на основе определенных шаблонов, характеристик или содержимого.
Он позволяет создавать пользовательские правила для обнаружения определенных шаблонов или характеристик в файлах, процессах или памяти.
Аналитики SOC обычно используют правила YARA для обнаружения и классификации образцов вредоносных программ, подозрительных файлов или индикаторов компрометации (IOC).

При применении, YARA сканирует файлы или каталоги и сопоставляет их с определенными правилами.
Если файл соответствует определенному шаблону или условию, он может вызвать оповещение или потребовать дальнейшего изучения как потенциальная угроза безопасности.

Как было сказано, YARA	-	это своедо рода файл с правилами, которые помогают обнаражувать IOC в указаном объекте анализа
Правила YARA особенно полезны для аналитиков SOC при анализе образцов вредоносного ПО, проведении криминалистических расследований или выполнении мероприятий по поиску угроз.
Гибкость и расширяемость YARA делают его ценным инструментом в сообществе кибербезопасности.

Основные направления, в которых применяется YARA следующие:

	-	Обнаружение и классификация вредоносных программ:
		YARA обычно используется для обнаружения и идентификации образцов вредоносных программ на основе определенных шаблонов, характеристик или индикаторов.
		Правила YARA могут быть созданы для сопоставления с известными сигнатурами вредоносных программ, поведением или свойствами файлов, что помогает идентифицировать вредоносные файлы и потенциально предотвращает дальнейшую компрометацию
		В рамках цифровой криминалистики YARA также может определять подозрительные или вредоносные шаблоны в захваченных образах памяти.

	-	Анализ и классификация файлов:
		YARA ценна для анализа и классификации файлов на основе определенных шаблонов или атрибутов.
		Аналитики могут создавать правила YARA для категоризации файлов по различным форматам файлов или типу файла, версии, метаданным, упаковщикам или другим характеристикам.
		Эта возможность полезна при криминалистическом анализе, исследовании вредоносных программ или идентификации определенных типов файлов в больших наборах данных.

	-	Обнаружение индикаторов компрометации (IOC)
		YARA может использоваться для поиска определенных индикаторов компрометации (IOC) в файлах или каталогах.
		Определяя правила YARA, нацеленные на определенные шаблоны IOC, такие как имена файлов, ключи реестра или сетевые артефакты, группы безопасности могут выявлять потенциальные нарушения безопасности или текущие атаки.

	-	Обмен правилами на основе сообщества
		С YARA мы имеем возможность подключаться к сообществу, которое регулярно вносит свой вклад и делится своими правилами обнаружения.
		Это гарантирует, что мы постоянно обновляем и совершенствуем наши механизмы обнаружения.

	-	Создание индивидуальных решений безопасности
		Путем объединения правил YARA с другими методами, такими как статический и динамический анализ, песочница и мониторинг поведения, можно создавать эффективные решения безопасности.

	-	Пользовательские сигнатуры/правила Yara:
		YARA позволяет нам создавать индивидуальные правила, адаптированные к конкретным потребностям и среде нашей организации.
		Развертывая эти индивидуальные правила в нашей инфраструктуре безопасности, такой как антивирусные решения или решения по обнаружению и реагированию на конечные точки (EDR), мы можем улучшить наши возможности защиты.
		Пользовательские правила YARA могут помочь выявить уникальные или целевые угрозы, характерные для активов, приложений или отрасли нашей организации.

	-	Реагирование на инциденты:
		YARA помогает в реагировании на инциденты, позволяя аналитикам быстро искать и анализировать файлы или образы памяти на предмет определенных шаблонов или индикаторов.
		Применяя правила YARA в процессе расследования, аналитики могут выявлять соответствующие артефакты, определять масштаб инцидента и собирать важную информацию для помощи в усилиях по исправлению.

	-	Проактивный поиск угроз
		Вместо того, чтобы ждать оповещения, мы можем использовать YARA для выполнения проактивного поиска в наших средах, ища потенциальные угрозы или остатки прошлых заражений.

	+++++++++++++++++++++++
	+ How Does YARA Work? +
	+++++++++++++++++++++++

	Суммируя все вышеупомянутое, можно сказать, что сканирующий модуль YARA, оснащенный модулями YARA, сканирует набор файлов, сравнивая их содержимое с шаблонами, определенными в наборе правил.
	Когда файл соответствует шаблонам и условиям, указанным в правиле YARA, он считается обнаруженным файлом.
	Этот процесс позволяет аналитикам эффективно идентифицировать файлы, которые демонстрируют определенное поведение или характеристики, помогая в обнаружении вредоносных программ, идентификации IOC и поиске угроз.

	Этот поток показан на схеме ниже.

	-------------------------------------------				-----------
	| Подозрительный/"уникальный" шаблон,	  |------------\| Правила |
	| обнаруженный в оьразцах вредоносного ПО |------------/|   YARA  |
	-------------------------------------------				-----------\
																		\ ---------------------				-----------------------
												 						 \| YARA Sanc engine  |------------\|    Detected Files   |
												 						 /| with YARA Modules |------------/| (mathced YARA rules |
																		/ ---------------------				-----------------------
	-------------------------------------------------------------------/
	|						Файлы для сканирования					   |
	--------------------------------------------------------------------

	На приведенной выше диаграмме мы видим, что сканирующий движок YARA, используя модули YARA, сопоставляет шаблоны, определенные в наборе правил, с набором файлов, что приводит к обнаружению файлов, которые соответствуют указанным шаблонам и условиям.
	Вот как правила YARA помогают выявлять угрозы.
	Давайте разберемся в этом подробнее:

		-	Набор правил (содержащий подозрительные шаблоны)
			Прежде всего, у нас есть одно или несколько правил YARA, которые созданы аналитиками безопасности.
			Эти правила определяют конкретные шаблоны, характеристики или индикаторы, которые необходимо сопоставить в файлах.
			Правила могут включать строки, регулярные выражения, последовательности байтов и другие интересующие индикаторы.
			Правила обычно хранятся в формате файла правил YARA (например, файл .yara или .yar) для простоты управления и повторного использования.

		-	Набор файлов (для сканирования)
			Набор файлов, таких как исполняемые файлы, документы или другие двоичные или текстовые файлы, предоставляется в качестве входных данных для движка сканирования YARA.
			Файлы могут храниться на локальном диске, в каталоге или даже в образах памяти или захватах сетевого трафика.

		-	Движок сканирования YARA
			Движок сканирования YARA является основным компонентом, отвечающим за выполнение фактического сканирования и сопоставления файлов с определенными правилами YARA.
			Он использует модули YARA, которые представляют собой наборы алгоритмов и методов, для эффективного сравнения содержимого файлов с шаблонами, указанными в правилах.

		-	Сканирование и сопоставление
			Модуль сканирования YARA выполняет итерацию по каждому файлу в наборе, по одному за раз.
			Для каждого файла он анализирует содержимое байт за байтом, ища совпадения с шаблонами, указанными в правилах YARA.
			Модуль сканирования YARA использует различные методы сопоставления, включая сопоставление строк, регулярные выражения и двоичное сопоставление, для определения шаблонов и индикаторов в файлах.

		-	Обнаружение файлов
			Когда файл соответствует шаблонам и условиям, указанным в правиле YARA, он считается обнаруженным файлом.
			Модуль сканирования YARA записывает информацию о сопоставлении, такую ​​как совпавшее правило, путь к файлу и смещение внутри файла, где произошло сопоставление, и предоставляет выходные данные, указывающие на обнаружение, которые можно дополнительно обработать, зарегистрировать или использовать для последующих действий.

	+++++++++++++++++++++++
	+ YARA Rule Structure +
	+++++++++++++++++++++++

	Чтобы составить правило YARA, нам нужно будет изучить поведение, особенности или определенные строки/шаблоны, уникальные для образца, который мы хотим обнаружить.

	Правила YARA обычно записываются в определенном синтаксисе, который определяет условия и шаблоны для сопоставления в файлах.
	Эти правила могут включать различные элементы, такие как строки, регулярные выражения и операторы булевой логики, что позволяет аналитикам создавать сложные и точные правила обнаружения.
	Важно отметить, что правила YARA могут распознавать как текстовые, так и двоичные шаблоны, и их также можно применять к действиям по криминалистике памяти.
	
	Вот некоторые ресурсы по правилам YARA      -   
	
	Давайте углубимся в структуру правила YARA.
	Правила YARA состоят из нескольких компонентов, которые определяют условия и шаблоны, которые должны сопоставляться в файлах.

	Пример правила YARA выглядит следующим образом:

		rule my_rule {

			meta:
				author = "Author Name"
				description = "example rule"
				hash = ""
    
			strings: 
				$string1 = "test"
				$string2 = "rule"
				$string3 = "htb"

			condition: 
				all of them
		}

	Каждое правило в YARA начинается с ключевого слова rule, за которым следует идентификатор правила.
	Идентификаторы правил чувствительны к регистру, где первый символ не может быть цифрой, и не могут превышать 128 символов.

	Следующие ключевые слова зарезервированы и не могут использоваться в качестве идентификатора:

	------------------------------------------------------------------------------------------------
	| all      | and       | any	    | ascii    | filesize   | include	 | meta	     | strings |
	------------------------------------------------------------------------------------------------
	| contains | endwith   | entrypoint | false    | in			| matches	 | startwith | unit8be |
	------------------------------------------------------------------------------------------------
	| import   | icontains | iendswith  | iequals  | istartwith | rule		 | unit8     |	       |
	------------------------------------------------------------------------------------------------
	| int32    | int32be   | int8	    | int8be   | private    | unite32be	 | condition |	       |
	------------------------------------------------------------------------------------------------
	| none     | not       | of         | or       | unite32    | base64wide | global    |	       |
	------------------------------------------------------------------------------------------------
	| them     | true      | unit16     | unit16be | base64     | fullword	 | int16be   |	       |
	------------------------------------------------------------------------------------------------
	| wide     | xor       | defined    | at       | for        | int16		 | nocase    |	       |
	------------------------------------------------------------------------------------------------

	Теперь давайте рассмотрим структуру правила YARA, используя правило, которое идентифицирует строки, связанные с программой-вымогателем WannaCry, в качестве примера.
	Информацию по WannaCry можно найти тут	-	https://cloud.google.com/blog/topics/threat-intelligence/wannacry-malware-profile/
	***	Правило ниже предписывает YARA помечать любой файл, содержащий все три указанные строки, как Ransomware_WannaCry.

		rule Ransomware_WannaCry {
			
			meta:
				author = "Madhukar Raina"
				version = "1.0"
				description = "Simple rule to detect strings from WannaCry ransomware"
				reference = "https://www.virustotal.com/gui/file/ed01ebfbc9eb5bbea545af4d01bf5f1071661840480439c6e5babe8e080e41aa/behavior" 
    
			strings:
				$wannacry_payload_str1 = "tasksche.exe" fullword ascii
				$wannacry_payload_str2 = "www.iuqerfsodp9ifjaposdfjhgosurijfaewrwergwea.com" ascii
				$wannacry_payload_str3 = "mssecsvc.exe" fullword ascii
    
			condition:
				all of them
		}

	Это базовая структура правила YARA.
	Оно состоит из:

		1)	начинается с заголовка
		2)	далее метаданные
		3)	за ними следуют тело, определяющее шаблоны или индикаторы, которые необходимо найти
		4)	и в завершении условия, определяющие контекст файлов, которые необходимо сопоставить
	
	***	Использование метаданных и тегов помогает эффективно организовывать и документировать правила.

	Давайти подробно разберем каждый раздел:

		1)	Заголовок (Rule Header)
			Заголовок идентифицирует правило.
			Обычно он включает:

				*	Имя правила	-	Описательное имя правила.
				*	Теги правила	-	Необязательные теги или метки для категоризации правила.

			rule Ransomware_WannaCry {
				
				...SNIP...
			}

		2)	Метаданные (Rule Meta)
			Раздел метаданных правила позволяет определить дополнительные метаданные для правила.
			Эти метаданные могут включать информацию об:
			
				*	Author		-	Имени автора,
				*	Version		-	Версии правила
				*	Description	-	Произвольном описании
				*	Reference	-	Ссылка на сторонние источники
				*	Date		-	Дату создания

			rule Ransomware_WannaCry {
				
				meta:
					author		=	"Madhukar Raina"
					version		=	"1.0"
					description	=	"Simple rule to detect strings from WannaCry ransomware"
					reference	=	"https://www.virustotal.com/gui/file/ed01ebfbc9eb5bbea545af4d01bf5f1071661840480439c6e5babe8e080e41aa/behavior" 
				
				...SNIP...
			}

		3)	Тело (Rule Body)
			Тело правила содержит шаблоны или индикаторы, которые должны быть сопоставлены в файлах.
			Здесь определяется фактическая логика обнаружения
			Данный раздел может начинаться с названия strings

			rule Ransomware_WannaCry {

				...SNIP...  

				strings:
					$wannacry_payload_str1 = "tasksche.exe" fullword ascii
					$wannacry_payload_str2 = "www.iuqerfsodp9ifjaposdfjhgosurijfaewrwergwea.com" ascii
					$wannacry_payload_str3 = "mssecsvc.exe" fullword ascii

				...SNIP...
			}

		4)	Условия (Rule Conditions)
			Условия правил определяют контекст или характеристики файлов, которые необходимо сопоставить.
			Они могут быть основаны на свойствах файлов, строках или других индикаторах.
			Также, непосредственно Условия указываются в данном разделе.

			В правиле указанном выше раздел условий просто указывает "их все", что означает, что все строки, определенные в правиле, должны присутствовать, чтобы правило сработало.

			rule Ransomware_WannaCry {
 
				...SNIP...

				condition:
					all of them
			}

			Однако, могут быть использованны и более тонкие/точные условия выполнения
			Вот пример условия, которое указывает, что размер анализируемого файла должен быть меньше 100 килобайт (КБ).
			А также, что первые 2 байта файла должны быть либо 0x5A4D (ASCII MZ), либо 0x4D5A (ASCII ZM), используя uint16(0):

			rule Ransomware_WannaCry {
 
				...SNIP...

				condition:
					filesize < 100KB and (uint16(0) == 0x5A4D or uint16(0) == 0x4D5A)
			}

			***	Вот как работает uint16(0):

					uint16:
					Это указывает тип данных, которые необходимо извлечь, который представляет собой 16-битное целое число без знака (2 байта).

					(0):
					Значение в скобках представляет смещение от того места, где должно начаться извлечение.
					В этом случае 0 означает, что функция извлечет 16-битное значение, начиная с начала сканируемых данных.
					Условие использует uint16(0) для сравнения первых 2 байтов файла с определенными значениями.

	Важно отметить, что YARA предоставляет гибкий и расширяемый синтаксис, позволяющий использовать более продвинутые функции и методы, такие как модификаторы, логические операторы и внешние модули.
	Эти функции могут повысить выразительность и эффективность правил YARA для определенных сценариев обнаружения.

	Помните, что правила YARA можно настраивать в соответствии с нашими конкретными вариантами использования и потребностями обнаружения.
	Регулярная практика и эксперименты еще больше улучшат наше понимание и мастерство в создании правил YARA.
	Документация YARA содержит более подробную информацию.

=====================================================================
* SIGMA *
*********

Sigma — это комплексный и стандартизированный формат правил, широко используемый аналитиками безопасности и системами управления информацией и событиями безопасности (SIEM).
Целью является обнаружение и идентификация определенных шаблонов или поведений, которые могут потенциально означать угрозы безопасности или события.
Стандартизированный формат правил Sigma позволяет группам безопасности определять и распространять логику обнаружения на различных платформах безопасности.

Чтобы создать правило Sigma на основе определенных действий (например - размещения файла во временном месте), мы можем создать вот такой вот пример правила
*** В этом случае правило предназначено для определения того, когда файл svchost.exe попадает в каталог Temp.

    title: Suspicious File Drop in Users Temp Location
    status: experimental
    description: Detects suspicious activity where a file is dropped in the temp location

    logsource:
        category: process_creation
    detection:
        selection:
            TargetFilename:
                - '*\\AppData\\Local\\Temp\\svchost.exe'
        condition: selection
        level: high

    falsepositives:
        - Legitimate exe file drops in temp location

Во время анализа выгодно иметь постоянно работающий агент мониторинга системы.
Для среды Windows очень удобен и информативен - Sysmon
Sysmon — это мощный инструмент, который собирает подробные данные о событиях и помогает в создании правил Sigma.
Его категории журналов охватывают:

    -   создание процесса (EventID 1)
    -   сетевое подключение (EventID 3)
    -   создание файла (EventID 11)
    -   изменение реестра (EventID 13)
    -   и т. д.

Тщательное изучение этих событий помогает выявить индикаторы компрометации (IOC) и понять модели поведения, тем самым облегчая создание эффективных правил обнаружения.

Например, Sysmon собирает журналы, такие как создание процесса, доступ к процессу, создание файла и сетевое подключение, и т. д., в ответ на действия, выполняемые исследуемым исполняемым зловредом.
Эта собранная информация играет важную роль в улучшении нашего понимания поведения образца и разработке более точных и эффективных правил обнаружения.

Вот некоторые ресурсы по правилам SIGMA		-   https://github.com/SigmaHQ/sigma/wiki/Specification
												https://github.com/SigmaHQ/sigma/tree/master/rules
												https://github.com/The-DFIR-Report/Sigma-Rules/tree/main/rules