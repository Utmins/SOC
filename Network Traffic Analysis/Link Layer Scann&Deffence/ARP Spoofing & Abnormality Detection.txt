=====================================================================
* Руководство *
***************

Если использовать машину от HTB, то сперва надо запустить данную комнаду, чтобы скачать и распокавать все необходимые pcap файлы

	<usern_name>@<host_name>$ wget -O file.zip 'https://academy.hackthebox.com/storage/resources/pcap_files.zip' && mkdir tempdir && unzip file.zip -d tempdir && mkdir -p pcaps && mv tempdir/Intermediate_Network_Traffic_Analysis/* pcaps/ && rm -r tempdir file.zip

Удобнее всего просматривать PCAP-files используя Wireshark
Однако, в целях практики и выбработки навыков использования CLI-based tools мы будем использовать такие утилиты как tcpdump

=====================================================================
* Легенда *
***********

Протокол разрешения адресов (ARP) — это давняя утилита, используемая злоумышленниками для запуска атак типа «человек посередине» и «отказ в обслуживании».
Учитывая эту распространенность, ARP становится точкой фокусировки при анализе трафика, часто становясь первым протоколом, который мы тщательно изучаем.
Многие атаки на основе ARP являются широковещательными, а не направлены конкретно на хосты, что делает их более легко обнаруживаемыми с помощью наших методов анализа пакетов.

В идеальном сценарии были бы установлены надежные средства контроля, чтобы предотвратить эти атаки, но в реальности это не всегда осуществимо.
Чтобы более эффективно понять наши индикаторы компрометации (IOC), давайте углубимся в поведение атак ARP Poisoning и Spoofing.
Обнаружение этих атак может быть сложным, поскольку они имитируют структуру связи стандартного трафика ARP.
Тем не менее, некоторые запросы и ответы ARP могут раскрыть их гнусную природу. 
Давайте проиллюстрируем, как работают эти атаки, что позволит нам лучше идентифицировать их во время анализа трафика.

	Step	Description

	1	Рассмотрим сеть с тремя машинами: жертва, маршрутизатор и злоумышленник.
	2	Злоумышленник инициирует свою схему ARP cache poisoning, отправляя поддельные сообщения ARP как на компьютер жертвы, так и на маршрутизатор.
	3	Сообщение на компьютер жертвы утверждает, что IP-адрес шлюза (маршрутизатора) соответствует физическому адресу машины злоумышленника.
	4	И наоборот, сообщение на маршрутизатор утверждает, что IP-адрес машины жертвы соответствует физическому адресу машины злоумышленника.
	5	При успешном выполнении этих запросов злоумышленник может повредить кэш ARP как на машине жертвы, так и на маршрутизаторе, в результате чего все данные будут перенаправлены на машину злоумышленника.
	6	Если злоумышленник настроит переадресацию трафика, он может перевести ситуацию из состояния отказа в обслуживание в состояние атаки типа «человек посередине».
	7	Проверяя другие слои нашей сетевой модели, мы можем обнаружить дополнительные атаки.
		Злоумышленник может провести DNS-спуфинг, чтобы перенаправить веб-запросы на поддельный сайт, или выполнить SSL-стриппинг, чтобы попытаться перехватить конфиденциальные данные в пути.

Обнаружение этих атак — это один аспект, но их предотвращение — это совсем другая задача.
Мы могли бы потенциально отразить эти атаки с помощью таких элементов управления, как:

	-	Статические записи ARP
		Запретив легкую перезапись и изменение кэша ARP, мы можем остановить эти атаки.
		Однако это требует повышенного обслуживания и надзора в нашей сетевой среде.

	-	Безопасность портов коммутатора и маршрутизатора
		Реализация контроля сетевых профилей и других мер может гарантировать, что только авторизованные устройства смогут подключаться к определенным портам на наших сетевых устройствах, эффективно блокируя машины, пытающиеся подделать/отравить ARP.

=====================================================================
* Подготовка *
**************

Для эффективного захвата этого трафика, особенно при отсутствии настроенного программного обеспечения для мониторинга сети, мы можем использовать такие инструменты, как tcpdump и Wireshark, или просто Wireshark для хостов Windows.

Обычно мы можем найти tcpdump в /usr/sbin/tcpdump.
Однако, если инструмент не установлен, его можно установить с помощью соответствующей команды, которая будет предоставлена ​​на основе конкретных системных требований

	<usern_name>@<host_name>$ sudo apt install tcpdump -y

Чтобы инициировать захват трафика, мы можем использовать инструмент командной строки tcpdump, указав наш сетевой интерфейс с помощью ключа -i и задав имя выходного файла захвата с помощью ключа -w.

	<usern_name>@<host_name>$ sudo tcpdump -i eth0 -w <file_name>.pcapng

=====================================================================
* Анализ *
**********

	++++++++++++++++++++++++
	+ Finding ARP Spoofing +
	++++++++++++++++++++++++

	Для обнаружения атак ARP Spoofing нам потребуется открыть соответствующий файл захвата трафика (ARP_Spoof.pcapng) из ресурсов этого модуля с помощью Wireshark

		<usern_name>@<host_name>$ wireshark <file_name>.pcapng

	Перейдя в Wireshark, мы можем оптимизировать наше представление, сосредоточившись исключительно на запросах и ответах ARP, используя следующий фильтр

		-	arp.opcode

	Ключевой "красный флаг", который нам нужно отслеживать, — это любая аномалия в трафике, исходящем от определенного хоста.
	Например, один хост, непрерывно передающий запросы и ответы ARP другому хосту, может быть явным признаком подмены ARP.

	Также, крайне желательно иметь/знать MAC-адреса всех устройст в вашей сети (имеется в виде тех, которые принадлежат Вашей компании)
	Чтобы точно определить с камим именно хостом происходят подохрительные действия
	В таком сценарии мы можем определить, что MAC-адрес 08:00:27:53:0C:BA ведет себя подозрительно.
	Чтобы убедиться в этом, мы можем настроить наш анализ так, чтобы проверять только взаимодействия (как запросы, так и ответы) между машиной злоумышленника, машиной жертвы и маршрутизатором.
	Функциональность кода операции в Wireshark может упростить этот процесс.

		-	Opcode == 1
			Представляет все типы запросов ARP

		-	Opcode == 2
			Обозначает все типы ответов ARP

	Изменим наш фильтр-запрос в Wireshark на следующий

		-	arp.opcode == 1

	Почти мгновенно мы должны заметить красный флаг — дублирование адреса, сопровождаемое предупреждающим сообщением.
	Если мы углубимся в детали сообщения об ошибке в Wireshark, мы должны быть в состоянии извлечь дополнительную информацию.

		Frame 26: 42 bytes on wire (336 bits), 42 bytes captured (336 bits) on interface \Device\NPF_{CCC4B960-1E92-4BD5-BBF3-11E2DFD12FE1}, id 0
		Ethernet II, Src: ASUSTekC_ec:0e:7f (50:eb:f6:ec:0e:7f), Dst: Broadcast (ff:ff:ff:ff:ff:ff)
		Address Resolution Protocol (request)
		[Duplicate IP address detected for 192.168.10.4 (50:eb:f6:ec:0e:7f) - also in use by 08:00:27:53:0c:ba (frame 25)]
		    [Frame showing earlier use of IP address: 25]
		        [Expert Info (Warning/Sequence): Duplicate IP address configured (192.168.10.4)]
		            [Duplicate IP address configured (192.168.10.4)]
		            [Severity level: Warning]
		            [Group: Sequence]
		    [Seconds since earlier frame seen: 1]

	При немедленном осмотре мы можем обнаружить, что один IP-адрес сопоставлен с двумя разными MAC-адресами.

		[Duplicate IP address detected for 192.168.10.4 (50:eb:f6:ec:0e:7f) - also in use by 08:00:27:53:0c:ba (frame 25)]

	Мы можем проверить это, запросив данные apr таблицы нашей системы
	*** Если Вы работате в среде Linux, то необходимо выполните следующие команды

		-	Проверяем первый MAC-адрес (в нашем примере это - 50:eb:f6:ec:0e:7f)

				<usern_name>@<host_name>$ arp -a | grep 50:eb:f6:ec:0e:7f

		-	Проверяем второй MAC-адрес (в нашем примере это - 08:00:27:53:0c:ba)

				<usern_name>@<host_name>$ arp -a | grep 08:00:27:53:0c:ba

	В результате мы видим, что наш ARP-кэш содержит оба MAC-адреса, выделенных для одного и того же IP-адреса (аномалия, которая требует нашего немедленного внимания)
	Чтобы отсеять больше дубликатов записей, мы можем использовать следующий фильтр Wireshark

		-	arp.duplicate-address-detected && arp.opcode == 2

	+++++++++++++++++++++++++++++++++++++++++
	+ Identifying The Original IP Addresses +
	+++++++++++++++++++++++++++++++++++++++++

	Теперь осталось определить — каковы были начальные IP-адреса этих устройств?
	Понимание этого помогает нам определить, какое устройство изменило свой IP-адрес с помощью MAC-спуфинга.
	В конце концов, если эта атака была выполнена исключительно через ARP, IP-адрес машины-жертвы должен оставаться неизменным.
	И наоборот, машина злоумышленника может иметь другой исторический IP-адрес.

	Мы можем извлечь эту информацию из ARP-запроса и ускорить процесс обнаружения, используя этот фильтр Wireshark.

		-	(arp.opcode) && ((eth.src == 08:00:27:53:0c:ba) || (eth.dst == 08:00:27:53:0c:ba))

	В этом случае мы можем сразу заметить, что MAC-адрес 08:00:27:53:0c:ba изначально был связан с IP-адресом 192.168.10.5, но недавно он был переключен на 192.168.10.4.
	Этот переход свидетельствует о преднамеренной попытке подмены ARP или отравления кэша.
	Также, в конце выборки мы можем заметить, что IP-адресу 192.168.10.4 был назначен новый MAC-адрес 50:eb:f6:ec:0e:7f

	Следовательно, изучение трафика с этих MAC-адресов с помощью следующего фильтра Wireshark также может оказаться весьма полезным:

		-	eth.addr == 50:eb:f6:ec:0e:7f or eth.addr == 08:00:27:53:0c:ba

	Сразу же мы можем заметить некоторые несоответствия в TCP-соединениях.
	Если TCP-соединения постоянно обрываются, это признак того, что злоумышленник не пересылает трафик между жертвой и маршрутизатором.

	Если злоумышленник на самом деле пересылает трафик и действует как человек посередине, мы можем наблюдать идентичные или почти симметричные передачи от жертвы к злоумышленнику и от злоумышленника к маршрутизатору.

=====================================================================
* Дополнительные Вопросы *
**************************

Нобходимо найти количество запросов ARP (код операции 1), отправленных с адреса 08:00:27:53:0c:ba

	-	arp.opcode == 1 && eth.src ==  08:00:27:53:0c:ba