*********************
* Colouring Packets *
*********************

Кроме информации о пакетах, Wireshark также имеет возможность раскрашивает пакеты согласно различных условий и параметров (как дефотные так и пользовательские), чтобы быстро обнаруживать аномалии и протоколы в захватах
Этот помогает отследить именно то, что вы ищете во время анализа.

Wireshark имеет два типа методов раскраски пакетов

	-	временные правила, которые доступны только во время сеанса программы
	-	постоянные правила, которые сохраняются в файле настроек (профиле) и доступны для следующего сеанса программы

Вы можете использовать "right-click menu" or "View --> Coloring Rules", чтобы создать постоянные правила раскраски.
Меню "Colourise Packet List" активирует/деактивирует правила раскраски.
Временное окрашивание пакетов выполняется с помощью  "right-click menu" or "View --> Conversation Filter" меню


********************
* Merge PCAP Files *
********************

Wireshark может объединить два файла pcap в один файл.
Вы можете использовать путь меню "File --> Merge", чтобы объединить любой другой файл pcap с тем, в котором сейчас работаете.

Когда вы выбираете второй файл, Wireshark покажет общее количество пакетов в выбранном файле.
После нажатия кнопки "Open" он объединит существующий файл pcap с выбранным и создаст новый файл pcap.
***	Обратите внимание, что КРАЙНЕ РЕКОМЕНДУЕТСЯ сохранить "объединенный" файл pcap перед началом работы с ним.


*********************
* View File Details *
*********************

Просмотр сводной-детальной информации о файле весьма полезно.
Особенно при работе с несколькими файлами pcap иногда вам нужно знать и вспомнить детали файла (хэш файла, время захвата, комментарии к файлу захвата, интерфейс и статистика), чтобы идентифицировать файл, классифицировать его и расставить приоритеты.

Вы можете просмотреть детали, выбрав "Statistics --> Capture File Properties" или нажав на значок pcap, расположенный в левом нижнем углу окна.


****************
* Go to Packet *
****************

Номера пакетов не только помогают подсчитать общее количество пакетов или облегчить поиск/исследование определенных пакетов.
Эта функция не только перемещается между пакетами вверх и вниз; она также обеспечивает отслеживание пакетов в кадре и находит следующий пакет в определенной части разговора.

Вы можете использовать меню "Go" на панели инструментов для просмотра определенных пакетов.

******************
* Packet Details *
******************

Вы можете дважды щелкнуть по пакету в захвате, чтобы открыть его подробности.
Пакеты состоят из 5–7 слоев на основе модели OSI:

	-	Frame (Layer 1)
		Здесь вы увидите, какой кадр/пакет вы просматриваете, а также подробную информацию, относящуюся к физическому уровню модели OSI.

	-	Source [MAC] (Layer 2)
		Здесь отображаются MAC-адреса источника и назначения; из уровня канала передачи данных модели OSI.

	-	Source [IP] (Layer 3)
		Здесь отображаются IPv4-адреса источника и назначения; с сетевого уровня модели OSI.

	-	Protocol (Layer 4)
		Здесь вы увидите подробную информацию об используемом протоколе (UDP/TCP), а также порты источника и назначения; из транспортного уровня модели OSI.

	-	Protocol Errors
		Это продолжение 4-го уровня, показывающее определенные сегменты TCP, которые необходимо собрать заново.

	-	Application Protocol (Layer 5)
		Здесь будут показаны сведения, специфичные для используемого протокола, например HTTP, FTP, SMB и т. д. из прикладного уровня модели OSI.

	-	Application Data
		Это расширение уровня 5, которое может отображать данные, специфичные для приложения.


****************
* Find Packets *
****************

Помимо номера пакета, Wireshark может находить пакеты по содержимому пакета.

Вы можете использовать меню "Edit --> Find Packet", чтобы выполнить поиск внутри пакетов для определенного интересующего события.
Это помогает аналитикам и администраторам находить определенные шаблоны вторжений или следы сбоев.

В поиске пакетов есть два важных момента

	1)	Первый — знание типа входных данных.
		Эта функция принимает четыре типа входных данных (Display filter, Hex, String and Regex).
		String and Regex — наиболее часто используемые типы поиска.
		Поиск нечувствителен к регистру, но вы можете установить чувствительность к регистру в своем поиске, щелкнув переключатель.

	2)	Второй момент — выбор поля поиска.
		Вы можете выполнять поиск в трех панелях (packet list, packet details, and packet bytes), и важно знать доступную информацию в каждой панели, чтобы найти интересующее событие.
		Например, если вы попытаетесь найти информацию, доступную на панели packet details, но выполните поиск на панели packet list, то Wireshark не найдет ее, даже если она существует.


*******************
* Packet Comments *
*******************

Подобно маркировке пакетов, комментирование является еще одной полезной функцией для аналитиков.
Вы можете добавлять комментарии для определенных пакетов, которые помогут в дальнейшем расследовании или напомнят и укажут на важные/подозрительные моменты для аналитиков других уровней.
В отличие от маркировки пакетов, комментарии могут оставаться в файле захвата, пока оператор не удалит их.


******************
* Export Packets *
******************

Как известно Wireshark не является IDS, поэтому иногда необходимо отделить определенные пакеты от файла и копнуть глубже, чтобы найти искомое.
Эта функция помогает аналитикам делиться только подозрительными пакетами (определенная область).
Таким образом, избыточная информация не включается в процесс анализа.

Для экспорта отдельных пакетов, Вы должны сперва их выделить, а потом можете использовать меню "File" для экспорта пакетов.


**************************
* Export Objects (Files) *
**************************

Wireshark может извлекать объекты (файлы), указанные в pcap файле и скачаные.
Для аналитика безопасности жизненно важно обнаруживать общие файлы и сохранять их для дальнейшего расследования.
Экспорт объектов доступен только для потоков выбранных протоколов (DICOM, HTTP, IMF, SMB и TFTP).

Чтобы найти текстовый файл в захвате, необходимо:

	1)	Найти пакет, который адресовае к скаченному объекту
	2)	Затем перейти в ерешел в "File -->  Export Objects".
		Это показывает все объекты, которые есть в захвате.
	3)	Выбрать интересующий объект и созранить его в желаемую папку


*****************
* Follow Stream *
*****************

Wireshark отображает захваченную информация с разбивкой по пакетам.
Однако можно реконструировать пакеты в один и просмотреть необработанный трафик, как будто он представлен целиком.

Следуя протоколу, потоки помогают аналитикам воссоздать данные на уровне приложения и понять интересующее событие.
Также можно просмотреть незашифрованные данные протокола, такие как имена пользователей, пароли и другие переданные данные.

Вы можете использовать "right-click menu" или меню "Analyse --> Follow TCP/UDP/HTTP Stream", чтобы отслеживать потоки трафика.
Потоки отображаются в отдельном диалоговом окне; пакеты, исходящие с сервера, выделены синим цветом, а исходящие с клиента — красным.


***************
* Expert Info *
***************

Wireshark может "разделить" все пакеты по определнным 5 категориям (где каждая категория имеет свой цвет)

	-	CHAT (Blue/Синий)	-	Пакеты относящиеся к обычным рабочим процессам
	-	NOTE (Cyan/Голубой)	-	Известные события, такие как коды ошибок приложений
	-	WARN (Yellow/Желтый)	-	Предупреждения, такие как необычные коды ошибок или сообщения о проблемах.
	-	ERROR (Red/Красный)	-	Такие проблемы, как неправильно сформированные пакеты.
	-	COMMENT (Green/Зеленый)	-	Пакеты с прикрепленными к ним коментариями

Обратите внимание, что это только предположения, и всегда есть вероятность ложных положительных/отрицательных результатов.

Вы можете использовать "lower left bottom section" в строке состояния или меню "Analyse --> Expert Information", чтобы просмотреть все доступные записи информации через диалоговое окно.
Оно покажет номер пакета, сводку, групповой протокол и общее количество случаев.

*************************
* Cleartext Credentials *
*************************

В случае поиска учетных данных в открытом тексте нелегко обнаружить множественные входные данные и решить, была ли атака методом подбора или это обычный пользователь, который неправильно ввел свои учетные данные.
Поскольку все представлено на уровне пакетов, трудно обнаружить множественные записи имени пользователя/пароля с первого взгляда.
Время обнаружения уменьшится, когда аналитик сможет просматривать записи учетных данных в виде списка.
Wireshark имеет такую ​​функцию, чтобы помочь аналитикам, которые хотят искать записи учетных данных в открытом тексте.

Некоторые диссекторы Wireshark (FTP, HTTP, IMAP, pop и SMTP) запрограммированы на извлечение паролей в открытом тексте из файла захвата.
Вы можете просмотреть обнаруженные учетные данные с помощью меню "Tools --> Credentials".
Эта функция работает только после определенных версий Wireshark (v3.1 и более поздних).
Поскольку функция работает только с определенными протоколами, рекомендуется проводить ручные проверки и не полагаться исключительно на эту функцию, чтобы решить, есть ли в трафике учетные данные в открытом виде.

После использования функции откроется новое окно и будут предоставлены обнаруженные учетные данные.
В нем будут показаны номер пакета, протокол, имя пользователя и дополнительная информация.
Это окно можно щелкнуть; щелчок по номеру пакета выберет пакет, содержащий пароль, а щелчок по имени пользователя выберет пакет, содержащий информацию об имени пользователя.
Дополнительная часть запрашивает номер пакета, содержащий имя пользователя.

**********************
* ACL/Firewall Rules *
**********************

Вы исследовали трафик, обнаружили аномалии и создали заметки для дальнейшего расследования.
Что дальше?
Как аналитику по безопасности, вам придется обнаружить аномалию, определить источник и принять меры.
Wireshark — это не только сведения о пакете; он может помочь вам создать готовые к внедрению правила брандмауэра всего за пару щелчков.
Вы можете создать правила брандмауэра, используя меню "Tools --> Firewall ACL Rules".

После использования этой функции откроется новое окно и будет предоставлена ​​комбинация правил (на основе IP, порта и MAC-адреса) для различных целей.
Обратите внимание, что эти правила создаются для внедрения на внешнем интерфейсе брандмауэра.

В настоящее время Wireshark может создавать правила для:

	-	Netfilter (iptables)
	-	Cisco IOS (стандартный/расширенный)
	-	IP-фильтр (ipfilter)
	-	IPFirewall (ipfw)
	-	Packet filter (pf)
	-	Windows Firewall (netsh новый/старый формат)
	
=====================================================================
* Packet Filtering *
********************

Wireshark имеет мощный механизм фильтрации, который помогает аналитикам сузить трафик и сосредоточиться на интересующем событии.
Фильтры — это специальные запросы, разработанные для протоколов, доступных в официальном справочнике протоколов Wireshark

Wireshark имеет два типа подходов к фильтрации:

	-	Capture Filters
		Этот тип фильтра используется для сохранения только определенной части трафика.
		Он устанавливается перед захватом трафика и не может быть изменен во время захвата.

	-	Display Filters
		Этот тип фильтра используется для исследования пакетов путем уменьшения количества видимых пакетов, и его можно изменить во время захвата.

***	Вы не можете использовать фильтра захвата для отображения и наоборот.

Хотя фильтры — это всего лишь вариант для исследования интересующего события, существует два разных способа фильтрации трафика и удаления шума из файла захвата.
Первый из них использует запросы, а второй — контекстное меню.

Существует общий синтаксис команд фильтрации, однако иногда они могут быть немного глупыми.
Основной синтаксис фильтров Wireshark — это некоторая служба или протокол, например ip или tcp, за которыми следует точка, а затем то, что фильтруется, например адрес, MAC, SRC, протокол и т. д.

	+++++++++++++++++++
	+ Apply as Filter +
	+++++++++++++++++++

Это самый простой способ фильтрации трафика.
При исследовании файла захвата вы можете щелкнуть по полю, которое хотите отфильтровать, и использовать "right-click menu" или меню "Analyse --> Apply as Filter", чтобы отфильтровать определенное значение.
После применения фильтра Wireshark сгенерирует требуемый запрос фильтра, применит его, покажет пакеты в соответствии с вашим выбором и скроет невыбранные пакеты из панели списка пакетов.
Обратите внимание, что общее количество и отображаемых пакетов всегда отображается в строке состояния.

	+++++++++++++++++++++++
	+ Conversation filter +
	+++++++++++++++++++++++

При использовании опции "Apply as a Filter" вы отфильтруете только одну сущность пакета.
Эта опция является хорошим способом исследования конкретного значения в пакетах.
Однако предположим, что вы хотите исследовать определенный номер пакета и все связанные пакеты, сосредоточившись на IP-адресах и номерах портов.

В этом случае опция "Conversation Filter" поможет вам просмотреть только связанные пакеты и легко скрыть остальные пакеты.
Вы можете использовать "right-click menu" или меню "Analyse --> Conversation Filter" для фильтрации разговоров.

	++++++++++++++++++++++++++
	+ Colourise Conversation +
	++++++++++++++++++++++++++

Эта опция похожа на "Conversation Filter" с одним отличием.
Она выделяет связанные пакеты без применения фильтра отображения и уменьшения количества просмотренных пакетов.

Эта опция работает с опцией "Colouring Rules" и изменяет цвета пакетов без учета ранее примененного правила цвета.
Вы можете использовать "right-click menu" или меню  "View --> Colourise Conversation", чтобы раскрасить связанный пакет одним щелчком.

***	Обратите внимание, что вы можете использовать меню "View --> Colourise Conversation --> Reset Colourisation", чтобы отменить эту операцию.

	+++++++++++++++++++++
	+ Prepare as Filter +
	+++++++++++++++++++++

Подобно "Apply as Filter", эта опция помогает аналитикам создавать фильтры отображения с помощью меню "right-click".
Однако, в отличие от предыдущей, эта модель не применяет фильтры после выбора.

Она добавляет требуемый запрос на панель и ждет команду выполнения (ввод) или другой выбранной опции фильтрации с помощью «.. и/или..» из «правой кнопки мыши».

	+++++++++++++++++++
	+ Apply as Column +
	+++++++++++++++++++

Эта функция помогает аналитикам изучать появление определенного значения/поля в доступных пакетах в файле захвата.

Вы можете использовать  "right-click menu" или меню "Analyse -->  Apply as Column", чтобы добавить столбцы на панель списка пакетов.
После того, как вы нажмете на значение и примените его как столбец, оно будет видно на панели списка пакетов.
Вы можете включить/отключить столбцы, отображаемые на панели списка пакетов, нажав на верхнюю часть панели списка пакетов.

Ранее мы рассмотрели фильтрацию пакетов и то, как фильтровать пакеты без использования запросов
Сейчас мы будем использовать запросы для фильтрации пакетов.

Типичный вариант использования — захват всего и фильтрация пакетов в соответствии с интересующим событием.
Только опытные профессионалы используют фильтры захвата и перехватывают трафик.
Вот почему Wireshark поддерживает больше типов протоколов в фильтрах отображения.
Убедитесь, что вы тщательно изучили, как использовать фильтры захвата, прежде чем использовать их в реальной среде.
Помните, вы не сможете захватить интересующее событие, если ваш фильтр захвата не соответствует определенному шаблону трафика, который вы ищете.

	+++++++++++++++++++++++++
	+ Capture Filter Syntax +
	+++++++++++++++++++++++++

Фильтры ЗАХВАТА используют шестнадцатеричные значения смещения байтов и маски с булевыми операторами
Поэтому нелегко понять/предсказать назначение фильтра с первого взгляда.
Базовый синтаксис выглядит следующим образом:

	-	Scope: host, net, port and portrange.
	-	Direction: src, dst, src or dst, src and dst,
	-	Protocol: ether, wlan, ip, ip6, arp, rarp, tcp and udp.
	-	Sample filter to capture port 80 traffic: tcp port 80

Подробнее о синтаксисе фильтра захвата можно прочитать

	-	https://www.wireshark.org/docs/man-pages/pcap-filter.html
	-	https://gitlab.com/wireshark/wireshark/-/wikis/CaptureFilters#useful-filters

Краткая справка доступна в меню "Capture --> Capture Filters"

	+++++++++++++++++++++++++
	+ Display Filter Syntax +
	+++++++++++++++++++++++++

Это самая мощная функция Wireshark.
Она поддерживает 3000 протоколов и позволяет проводить поиск на уровне пакетов в разбивке протоколов.
Официальный "Справочник по фильтрам отображения" предоставляет все поддерживаемые разбивки протоколов для фильтрации (https://www.wireshark.org/docs/dfref/)

Краткая справка доступна в меню "Analyse --> Display Filters".

Wireshark имеет встроенную опцию (Display Filter Expression), которая сохраняет все поддерживаемые структуры протоколов, чтобы помочь аналитикам создавать фильтры отображения.
Теперь давайте разберемся с основами операций фильтра отображения:

	*)	Comparison Operators

		Вы можете создать фильтры отображения, используя различные операторы сравнения, чтобы найти интересующее вас событие.
		Основные операторы показаны в таблице ниже

			English		Symbol		Description					Example
			
			eq			==			Equal						ip.src == 10.10.10.100

			ne			!=			Not equal					ip.src != 10.10.10.100

			gt			>			Greater than				ip.ttl > 250

			lt			<			Less Than					ip.ttl < 10

			ge			>=			Greater than or equal to	ip.ttl >= 0xFA

			le			<=			Less than or equal to		ip.ttl <= 0xA

		
		Wireshark поддерживает десятичные и шестнадцатеричные значения при фильтрации.
		Вы можете использовать любой желаемый формат в соответствии с поиском, который вы будете проводить.

	*)	Logical Expressions

		Wireshark поддерживает логический синтаксис.
		Вы также можете создавать фильтры отображения, используя логические операторы.

			English		Symbol		Description  	Example

			and			&&			Logical AND		(ip.src == 10.10.10.100) AND (ip.src == 10.10.10.111)

			or			||			Logical OR		(ip.src == 10.10.10.100) OR (ip.src == 10.10.10.111)

			not			!			Logical NOT		!(ip.src == 10.10.10.222)
													Использование !=value устарело; его использование может привести к несогласованным результатам.
													Для получения более согласованных результатов рекомендуется использовать стиль !(value).

	*)	Packet Filter Toolbar

		Панель инструментов фильтра — это место, где вы создаете и применяете фильтры отображения.
		Это интеллектуальная панель инструментов, которая помогает вам легко создавать допустимые фильтры отображения.
		Перед тем, как начать фильтровать пакеты, вот несколько советов:

			-	Фильтры пакетов определяются строчными буквами.
			-	Фильтры пакетов имеют функцию автозаполнения для разбивки деталей протокола, и каждая деталь представлена ​​«точкой».
			-	Фильтры пакетов имеют трехцветное представление, описанное ниже:
					Зеленый		-	Действующий фильтр
					Красный		-	Недействительный фильтр
					Желтый		-	Предупреждающий фильтр.
								Этот фильтр работает, но он ненадежен, и предлагается заменить его действительным фильтром

	++++++++++++++++++++
	+ Protocol Filters +
	++++++++++++++++++++

Как упоминалось в предыдущей задаче, Wireshark поддерживает 3000 протоколов и позволяет проводить исследование на уровне пакетов путем фильтрации полей протоколов.
Эта задача показывает создание и использование фильтров для различных полей протоколов:

	*)	IP Filters

		Фильтры IP помогают аналитикам фильтровать трафик в соответствии с информацией уровня IP из пакетов (сетевой уровень модели OSI).
		Это один из наиболее часто используемых фильтров в Wireshark.
		Эти фильтры фильтруют информацию уровня сети, такую ​​как IP-адреса, версия, время жизни, тип обслуживания, флаги и значения контрольной суммы.

		Общие IP фильтры представлены ниже:

			Filter							Description

			ip								Показывает все IP-пакеты.
			ip.addr == 10.10.10.111			Показывает все пакеты, содержащие IP-адрес 10.10.10.111.
			ip.addr == 10.10.10.0/24		Показывает все пакеты, содержащие IP-адреса из подсети 10.10.10.0/24.
			ip.src == 10.10.10.111			Показывает все пакеты, отправленные из 10.10.10.111
			ip.dst == 10.10.10.11			Показывает все пакеты, отправленные на 10.10.10.111
			ip.addr vs ip.src/ip.dst		ip.addr фильтрует трафик без учета направления пакета.
			ip.src/ip.dst 					фильтрует пакет в зависимости от направления пакета.

	*)	TCP and UDP Filters

		Фильтры TCP помогают аналитикам фильтровать трафик в соответствии с информацией на уровне протокола из пакетов (транспортный уровень модели OSI).
		Эти фильтры фильтруют информацию на уровне транспортного протокола, такую ​​как порты источника и назначения, порядковый номер, номер подтверждения, размер окна, временные метки, флаги, длина и ошибки протокола.

			Filter					Description

			tcp.port == 80			Показывает все TCP-пакеты с портом 80
			udp.port == 53			Показывает все UDP-пакеты с портом 53
			tcp.srcport == 1234		Показывает все TCP-пакеты, исходящие из порта 1234
			udp.srcport == 1234		Показывает все UDP-пакеты, исходящие из порта 123434
			tcp.dstport == 80		Показывает все TCP-пакеты, отправленные на порт 80	
			udp.dstport == 5353		Показывает все UDP-пакеты, отправленные на порт 5353

	*)	Application Level Protocol Filters | HTTP and DNS

		Фильтры протоколов прикладного уровня помогают аналитикам фильтровать трафик в соответствии с информацией прикладного уровня протокола из пакетов (уровень приложений модели OSI).
		Эти фильтры фильтруют специфичную для приложения информацию, такую ​​как полезная нагрузка и связанные данные, в зависимости от типа протокола.

			Filter								Description

			http								Показывает все HTTP-пакеты
			dns									Показывает все DNS-пакеты
			http.response.code == 200			200 Показывает все пакеты с HTTP-кодом ответа "200"
			dns.flags.response == 0				Показывает все DNS-запросы
			http.request.method == "GET"		Показывает все HTTP-запросы GET	
			dns.flags.response == 1				Показывает все DNS-ответы
			http.request.method == "POST"		"POST" Показывает все HTTP-запросы POST	
			dns.qry.type == 1					Показывает все DNS-записи "A"

	*)	Display Filter Expressions

		Как упоминалось ранее, Wireshark имеет встроенную опцию (Display Filter Expression), которая сохраняет все поддерживаемые структуры протоколов, чтобы помочь аналитикам создавать фильтры отображения.
		Когда аналитик не может вспомнить требуемый фильтр для определенного протокола или не уверен в назначаемых значениях для фильтра, меню Display Filter Expressions предоставляет простое в использовании руководство по созданию фильтра отображения.
	
		Невозможно запомнить все детали фильтров отображения для каждого протокола.
		Каждый протокол может иметь разные поля и может принимать разные типы значений.
		Меню Display Filter Expressions показывает все поля протокола, принятые типы значений (целое число или строка) и предопределенные значения (если таковые имеются).
		Обратите внимание, что для освоения создания фильтров и изучения полей фильтра протокола потребуется время и практика.
		
		Оно доступно в меню «Анализ --> Display Filter Expression».


=====================================================================
* TRAFFIC *
***********

+++++++++++++++
+ ARP Traffic +
+++++++++++++++

ARP или протокол разрешения адресов — это протокол уровня 2, который используется для соединения IP-адресов с MAC-адресами.
Они будут содержать сообщения REQUEST и сообщения RESPONSE.

Для идентификации пакетов заголовок сообщения будет содержать один из двух кодов операций:

	-	Request (1)
		Наиболее важными параметрами REQUEST заголовка являются:
			OPTCODE: request (1)
			Target MAC address: 00:00:00:00:00:00

	-	Reply (2)
		Наиболее важными параметрами REQUEST заголовка являются:
			OPTCODE: reply (2)
			Sender MAC address:	11:11:11:11:11:11
			Sender IP address:	192.168.1.1

Полезно отметить, что большинство устройств идентифицируют себя сами или Wireshark идентифицирует их
Примером подозрительного трафика может быть множество запросов от нераспознанного источника.
Однако вам необходимо включить настройку в Wireshark для разрешения физических адресов.
Чтобы включить эту функцию, перейдите в View > Name Resolution > Ensure that Resolve Physical Addresses, что установлен флажок Разрешить физические адреса.

ARP — один из самых простых для анализа протоколов.
Все, что вам нужно запомнить, — это определить, является ли это пакетом запроса или ответа, и кем он был отправлен.

++++++++++++++++
+ ICMP Traffic +
++++++++++++++++

ICMP или Internet Control Message Protocol используется для анализа различных узлов в сети.
Чаще всего он используется с такими утилитами, как ping и traceroute.

В деталях пакета есть несколько важных вещей, на которые мы можем обратить внимание, в первую очередь:

	-	Type: ............
		Code: #
		Если он имеет значение = 8 (Echo (ping) request), то это пакет ЗАПРОСА
		А если он имеет значение = 0 (Echo (ping) reply), то это пакет ОТВЕТА
		
		***	Когда эти коды изменены или не соответсвуют друг другу, это обычно является признаком подозрительной активности.

В пакете есть еще две детали, которые полезно проанализировать:

	-	Timestamp
		Временная метка может быть полезна для определения времени запроса ping, она также может быть полезна для определения подозрительной активности в некоторых случаях.
	-	Data
		Которая обычно будет просто случайной строкой данных.

+++++++++++++++
+ TCP Traffic +
+++++++++++++++

TCP или протокол управления передачей обрабатывает доставку пакетов, включая последовательность и ошибки
При анализе пакетов TCP Wireshark может быть очень полезен и маркирует пакеты цветом в порядке уровня опасности.

TCP может дать полезную информацию о сети при анализе, однако его также может быть сложно анализировать из-за количества отправляемых пакетов.
Здесь вам может понадобиться использовать другие инструменты, такие как RSA NetWitness и NetworkMiner, чтобы отфильтровать и дополнительно проанализировать перехваты.

Распространенная вещь, которую вы увидите при анализе пакетов TCP, известна как рукопожатие TCP.
Оно включает в себя серию пакетов: syn, synack, ack; 
Это позволяет устройствам устанавливать соединение.

Обычно, когда это рукопожатие выходит из строя или когда оно включает в себя другие пакеты, такие как пакет RST, в сети происходит что-то подозрительное или неправильное.

Для анализа пакетов TCP мы не будем вдаваться в подробности каждой отдельной детали пакетов; однако рассмотрим несколько поведений и структур, которые имеют пакеты.
​​Главное, на что мы хотим обратить внимание при просмотре пакета TCP

	-	Sequence number (raw): #########
	-	Acknowledgement number: #
		Номер подтверждения не устанавливается в пакете TCP SYN, поскольку клиент не подтверждает никаких данных от сервера.
		Обычно в начальном пакете SYN он равен 0.

***	В Wireshark мы также можем увидеть исходный порядковый номер, перейдя в меню edit > preferences > protocols > TCP > relative sequence numbers (uncheck boxes)

+++++++++++++++
+ DNS Traffic +
+++++++++++++++

DNS или протокол службы доменных имен используется для разрешения имен с IP-адресами.
Ниже приведено несколько вещей, которые вы должны иметь в виду при анализе пакетов DNS:

	-	Query
		В DNS запроса нас могут заинтересовать	-	биты информации, которые мы можем использовать для анализа пакета.
		Первый бит информации, который мы можем посмотреть, — это откуда исходит запрос, в данном случае это UDP 53, что означает, что этот пакет проходит эту проверку
		Если это был TCP 53, то его следует считать подозрительным трафиком и его нужно проанализировать дальше.
		
		Мы также можем посмотреть, что он запрашивает, это может быть полезно вместе с другой информацией для построения истории того, что произошло.

		***	При анализе DNS-пакетов вам действительно необходимо понимать вашу среду и то, будет ли трафик считаться нормальным в вашей среде.

	-	Response/Answers
		Он должен быть похож на пакет запроса, но включает в себя также ответ, который можно использовать для проверки запроса.
		Если он имеет заметные отличия, то это можно считать пордозрительным

	-	DNS-Servers Only
	-	UDP

***	Если что-то из этого не на месте, то пакеты следует изучить более подробно и считать подозрительными.

++++++++++++++++
+ HTTP Traffic +
++++++++++++++++

HTTP или протокол передачи гипертекста — это широко используемый некоторыми веб-сайтами порт
HTTP используется для отправки запросов GET и POST на веб-сервер для получения таких вещей, как веб-страницы.
Знание того, как анализировать HTTP, может быть полезным для быстрого обнаружения таких вещей, как SQLi, Web Shells и других векторов атак, связанных с веб-сайтами.

HTTP — один из самых простых протоколов для анализа пакетов, протокол прямолинеен и не включает никаких рукопожатий или предварительных условий перед связью.
Глядя на HTTP-пакет, мы можем легко собрать информацию, поскольку поток данных не зашифрован, как HTTP-аналог HTTPS.
Некоторые важные данные, которые мы можем получить из пакета, это URI запроса, данные файла, сервер.

Если мы хотим получить свобдную информацию по анализу захваченных пакетов, то мы можем использовать некоторые встроенные функции Wireshark.
Начнем с рассмотрения очень полезной функции в Wireshark, чтобы организовать протоколы, присутствующие в захвате иерархии протоколов:

	-	Statistics > Protocol Hierarchy
		Эта информация может быть очень полезна в практических приложениях, таких как поиск угроз, для выявления расхождений в перехваченных пакетах.
	
	-	File > Export Objects > HTTP
		Эта функция позволит нам организовать все запрошенные URI в захвате.
		Подобно иерархии протоколов, это может быть полезно для быстрого выявления возможных расхождений в захватах.
	
	-	Statistics > Endpoints
		Эта функция позволяет пользователю организовать все конечные точки и IP-адреса, найденные в определенном захвате.
		Как и другие функции, это может быть полезно для определения источника несоответствия.

+++++++++++++++++
+ HTTPS Traffic +
+++++++++++++++++

HTTPS или защищенный протокол передачи гипертекста может оказаться одним из самых сложных для понимания протоколов с точки зрения анализа пакетов и может сбивать с толку при понимании шагов, которые необходимо предпринять для анализа пакетов HTTPS.

Перед отправкой зашифрованной информации клиент и сервер должны согласовать различные шаги для создания защищенного туннеля.

	1)	Клиент и сервер согласовывают версию протокола
	2)	Клиент и сервер выбирают криптографический алгоритм
	3)	Клиент и сервер могут аутентифицировать друг друга (этот шаг необязателен)
	4)	Создает защищенный туннель с открытым ключом

Первая трудность с которой нам придется столкнуться при анализе HTTPS пакетов - вся информация будет зашифрована
И нам либо придется заниматься взломом ключа, либо раздобыть его где-то

Предположим, что у нас каким-то образом появился ключ-шифрования, который мы можем использовать для дешифровки информации в пакете
Чтобы загрузить ключ, перейдите в меню Edit > Preferences > Protocols > TLS >  [+]
Если вы используете более старую версию Wireshark, то это будет SSL вместо TLS.
Вам нужно будет заполнить различные разделы меню следующими настройками:

	-	IP Address: ###.###.###.###
	-	Port: start_tls
	-	Protocol: http
	-	Keyfile: <Location of the KEY>

=====================================================================
* STATISTICS *
**************

Это меню предоставляет несколько вариантов статистики, готовых к исследованию, чтобы помочь пользователям увидеть общую картину с точки зрения:
	-	объема трафика
	-	доступных протоколов
	-	конечных точек
	-	а также некоторых деталей, специфичных для протокола, таких как DHCP, DNS и HTTP/2.

Остановимся на некоторые разделах меню «Статистика» более подробно.

	++++++++++++++++++++++
	+ Resolved Addresses +
	++++++++++++++++++++++

Эта опция помогает аналитикам идентифицировать IP-адреса и имена DNS, доступные в файле захвата, предоставляя список разрешенных адресов и их имен хостов.
Обратите внимание, что информация об имени хоста берется из ответов DNS в файле захвата.
Аналитики могут быстро идентифицировать доступные ресурсы, используя это меню.
Таким образом, они могут обнаружить доступные ресурсы и оценить их в соответствии с интересующим событием.

Вы можете использовать меню "Statistics --> Resolved Addresses", чтобы просмотреть все разрешенные адреса Wireshark

	++++++++++++++++++++++
	+ Protocol Hierarchy +
	++++++++++++++++++++++

Эта опция разбивает все доступные протоколы из файла захвата и помогает аналитикам просматривать протоколы в виде дерева на основе счетчиков пакетов и процентов.
Таким образом, аналитики могут просматривать общее использование портов и служб и фокусироваться на интересующем событии.
Вы можете щелкнуть правой кнопкой мыши и отфильтровать интересующее событие.

Вы можете использовать меню "Statistics --> Protocol Hierarchy", чтобы просмотреть эту информацию.

	+++++++++++++++++
	+ Conversations +
	+++++++++++++++++

Conversations представляет собой трафик между двумя определенными конечными точками.
Эта опция предоставляет список разговоров в пяти базовых форматах:

	a)	ethernet
	b)	IPv4
	c)	IPv6
	d)	TCP
	e)	UDP

Таким образом, аналитики могут идентифицировать все разговоры и конечные точки контакта для интересующего события.

Вы можете использовать меню "Statistic --> Conversations", чтобы просмотреть эту информацию.

	+++++++++++++
	+ Endpoints +
	+++++++++++++

Параметр конечных точек похож на параметр разговоров.
Единственное отличие заключается в том, что этот параметр предоставляет уникальную информацию для одного информационного поля (Ethernet, IPv4, IPv6, TCP и UDP).
Таким образом, аналитики могут идентифицировать уникальные конечные точки в файле захвата и использовать его для интересующего события.

Wireshark также поддерживает преобразование MAC-адресов в удобочитаемый формат с использованием имени производителя, назначенного IEEE.
Обратите внимание, что это преобразование выполняется через первые три байта MAC-адреса и работает только для известных производителей.
При просмотре конечных точек Ethernet вы можете активировать этот параметр с помощью кнопки «Разрешение имени» в нижнем левом углу окна конечных точек.

Разрешение имен не ограничивается только MAC-адресами.
Wireshark также предоставляет параметры разрешения имен IP и портов.
Однако эти параметры не включены по умолчанию.
Если вы хотите использовать эти функции, вам необходимо активировать их через меню  "Edit --> Preferences --> Name Resolution".
После включения разрешения имен IP и портов вы увидите разрешенные IP-адреса и имена портов на панели списка пакетов, а также сможете просматривать разрешенные имена в меню "Conversations" и "Endpoints".

Помимо разрешения имен, Wireshark также предоставляет сопоставление геолокации IP, которое помогает аналитикам идентифицировать исходные и конечные адреса карты.
Но эта функция не активирована по умолчанию и требует дополнительных данных, таких как база данных GeoIP.
В настоящее время Wireshark поддерживает базы данных MaxMind, а последние версии Wireshark поставляются с настроенным преобразователем MaxMind DB.
Однако вам по-прежнему нужны файлы MaxMind DB и указать путь к базе данных для Wireshark с помощью меню  "Edit --> Preferences --> Name Resolution --> MaxMind database directories"».
После загрузки и указания пути Wireshark автоматически предоставит информацию GeoIP в разделе сведений о протоколе IP для сопоставленных IP-адресов.
***	Для просмотра карты GeoIP вам необходимо активное подключение к Интернету.

Вы можете использовать меню "Statistics --> Endpoints", чтобы просмотреть эту информацию.

	+++++++++++++++++
	+ IPv4 and IPv6 +
	+++++++++++++++++

До сих пор почти все опции предоставляли информацию, содержащую обе версии IP-адресов.
Меню статистики имеет две опции для сужения статистики по пакетам, содержащим определенную версию IP.
Таким образом, аналитики могут идентифицировать и перечислить все события, связанные с определенными версиями IP, в одном окне и использовать его для интересующего события.

Вы можете использовать меню "Statistics --> IPvX Statistics", чтобы просмотреть эту информацию (находится в саомм низу списка меню Статистика)

	+++++++
	+ DNS +
	+++++++

Эта опция разбивает все пакеты DNS из файла захвата и помогает аналитикам просматривать результаты в виде дерева на основе счетчиков пакетов и процентов протокола DNS.
Таким образом, аналитики могут просматривать общее использование службы DNS, включая:

	-	rcode
	-	opcode
	-	class
	-	query type
	-	service and query stats

И использовать ее для интересующего события.

Вы можете использовать меню "Statistics --> DNS", чтобы просмотреть эту информацию.

	++++++++
	+ HTTP +
	++++++++

Эта опция разбивает все HTTP-пакеты из файла захвата и помогает аналитикам просматривать результаты в виде дерева на основе счетчиков пакетов и процентов HTTP-протокола.
Таким образом, аналитики могут просматривать общее использование HTTP-сервиса, включая коды запросов и ответов, а также исходные запросы.

Вы можете использовать меню "Statistics --> HTTP", чтобы просмотреть эту информацию.

	++++++++++++++++++++++
	+ Advanced Filtering +
	++++++++++++++++++++++

Помимо операторов и выражений, рассмотренных выше, Wireshark имеет расширенные операторы и функции.
Эти расширенные опции фильтрации помогают аналитику проводить глубокий анализ интересующего события.

Расширенные опции фильрации включают в себя следующие группы:

	*)	Filter: "contains"

		Тип			Оператор сравнения
		Описание		Поиск значения внутри пакетов.
					Он чувствителен к регистру и обеспечивает схожую функциональность с опцией «Найти», фокусируясь на определенном поле.
		Пример			Найти все серверы «Apache».
		Результат		Выводит список всех HTTP-пакетов, в которых поле «сервер» пакета содержит ключевое слово «Apache».
		Синтаксис		http.server contains "Apache"
	
	*)	Filter: "matches"

		Тип			Оператор сравнения
		Описание		Поиск шаблона регулярного выражения.
					Он нечувствителен к регистру, а сложные запросы имеют погрешность.
		Пример			Найти все страницы .php и .html.
		Результат		Выводит список всех HTTP-пакетов, в которых поля «host» пакетов соответствуют ключевым словам «.php» или «.html».
		Синтаксис		http.host matches "\.(php|html)"
	
	*)	Filter: "in"

		Тип			Установить членство
		Описание		Поиск значения или поля внутри определенной области/диапазона.
		Пример			Найти все пакеты, которые используют порты 80, 443 или 8080.
		Результат		Перечислены все пакеты TCP, где поля «порт» пакетов имеют значения 80, 443 или 8080.
		Синтаксис		tcp.port in {80 443 8080}
	
	*) Filter: "upper"

		Тип			Функция
		Описание		Преобразовывает строковое значение в верхний регистр..
		Пример			Найти все серверы "APACHE".
		Результат		Преобразовывает все поля "server" HTTP-пакетов в верхний регистр и выводит список пакетов, содержащих ключевое слово "APACHE".
		Синтаксис		upper(http.server) contains "APACHE"
	
	*)	Filter: "lower"

		Тип			Функция
		Описание		Преобразовывает строковое значение в нижний регистр.
		Пример			Найти все серверы "apache"".
		Результат		Преобразовывает все поля "server" HTTP-пакетов в нижний регистр и вывести список пакетов, содержащих ключевое слово "apache".
		Синтаксис		lower(http.server) contains "apache"
	
	*)	Filter: "string"

		Тип			Функция
		Описание		Преобразовывает нестроковое значение в строку.
		Пример			Найти все кадры с нечетными номерами.
		Результат		Преобразовывает все поля «номер кадра» в строковые значения, и кадры списка заканчиваются нечетными значениями.
		Синтаксис		string(frame.number) matches "[13579]$"
	
	+++++++++++++++++++++++++++++++++++
	+ Bookmarks and Filtering Buttons +
	+++++++++++++++++++++++++++++++++++

Мы рассмотрели различные типы параметров фильтрации, операторов и функций.
Пришло время создать фильтры и сохранить их как закладки и кнопки для дальнейшего использования.
Для таких целей на панели инструментов фильтров есть раздел закладок фильтров для сохранения созданных пользователем фильтров, что помогает аналитикам повторно использовать избранные/сложные фильтры парой щелчков.
Подобно закладкам, вы можете создавать кнопки фильтров, готовые к применению одним щелчком.

	++++++++++++
	+ Profiles +
	++++++++++++

Wireshark — это многофункциональный инструмент, который помогает аналитикам выполнять глубокий анализ пакетов.
Как мы уже говорили в ходе обсуждения, для анализа конкретного интересующего события необходимо настроить несколько предпочтений.
Изменять конфигурацию для каждого случая расследования — обременительно, для этого требуется разный набор правил раскрашивания и кнопок фильтрации.
Вот тут-то и вступают в игру профили Wireshark.

Вы можете создать несколько профилей для разных случаев расследования и использовать их соответствующим образом.
Вы можете использовать меню "Edit --> Configuration Profiles" или раздел "lower right bottom of the status bar --> Profile", чтобы создавать, изменять и изменять конфигурацию профиля.

=====================================================================
* Potocols` Analysis *
**********************

	+++++++++++++++++++++
	+ TCP/SYN/UDP Scans +
	+++++++++++++++++++++

Картирования сетей	-	это определения работающих хостов и обнаружения сервисов. 
Аналитик безопасности должен уметь идентифицировать сетевые шаблоны, применяемы злоумышленником при картирование сети.
Существует большое количество способов картирование сети, но наиболее распространенные из них следующие:

	-	Сканирование TCP-подключений

			)	Опирается на трехстороннее рукопожатие (необходимо завершить процесс рукопожатия).
			)	Обычно выполняется с помощью команды nmap -sT.
			)	Используется непривилегированными пользователями (единственный вариант для пользователя без прав root).
			)	Обычно имеет размер окна больше 1024 байт, так как запрос ожидает некоторые данные из-за природы протокола.

	-	Сканирование SYN

			)	Не полагается на трехстороннее рукопожатие (нет необходимости завершать процесс рукопожатия).
			)	Обычно выполняется с помощью команды nmap -sS.
			)	Используется привилегированными пользователями.
			)	Обычно имеет размер меньше или равный 1024 байтам, поскольку запрос не завершен и не ожидает получения данных.

	-	Сканирование UDP

			)	Не требует процесса подтверждения
			)	Нет запроса на открытие портов
			)	Сообщение об ошибке ICMP для закрытия портов
			)	Обычно выполняется с помощью команды nmap -sU.

Обнаружение подозрительных действий в фрагментированных файлах — это просто и отличный способ научиться фокусироваться на деталях.
Однаком невозможно понять детали сканирования без использования правильных фильтров.

	+++++++++++++
	+ ARP Scans +
	+++++++++++++

Протокол ARP или протокол разрешения адресов (ARP) — это технология, которая позволяет устройствам идентифицировать себя в сети.
Воздействие на протокол разрешения адресов (также известное как подмена ARP или атака Man In The Middle (MITM)) — это тип атаки, которая включает в себя подавление/манипулирование сетью путем отправки вредоносных пакетов ARP на шлюз по умолчанию.
Конечная цель — манипулировать «таблицей адресов IP-MAC» и прослушивать трафик целевого хоста.

Для проведения атак ARP доступно множество инструментов.
Однако мышление атаки статично, поэтому такую ​​атаку легко обнаружить, зная рабочий процесс протокола ARP и навыки работы с Wireshark.
Анализ ARP в двух словах:

	-	Работает в локальной сети
	-	Обеспечивает связь между MAC-адресами
	-	Не является безопасным протоколом
	-	Не является маршрутизируемым протоколом
	-	Не имеет функции аутентификации
	-	Обычные шаблоны — это запрос и ответ, объявление и беспричинные пакеты.

Прежде чем исследовать трафик, давайте рассмотрим некоторые легитимные и подозрительные пакеты ARP.
Легитимные запросы похожи на показанную картинку: 

	1)	широковещательный запрос, который спрашивает, использует ли какой-либо из доступных хостов IP-адрес
	2)	и ответ от хоста, который использует конкретный IP-адрес.

Подозрительная ситуация означает наличие двух разных ответов ARP (конфликт) для определенного IP-адреса.
В этом случае вкладка экспертной информации Wireshark предупреждает аналитика.
Однако она показывает только второе появление дублирующего значения, чтобы выделить конфликт.
Поэтому идентификация вредоносного пакета от легитимного является задачей аналитика.

Знание сетевой архитектуры и проверка трафика в течение определенного периода времени может помочь обнаружить аномалию.
Как аналитик, вы должны записывать свои выводы, прежде чем двигаться дальше.
Это поможет вам быть организованным и облегчит сопоставление дальнейших выводов.

К примеру вы обнаружили конфликт	-	MAC-адрес, который заканчивается на «b4», создал ARP-запрос с IP-адресом «192.168.1.25», а затем заявил, что имеет IP-адрес «192.168.1.1».

	Detection Notes						Findings						Notes 																	

	Possible IP address match			MAC: 00:0c:29:e2:18:b4			1 IP address announced from a MAC address											
										IP: 192.168.1.25																					

	Possible ARP spoofing attempt		MAC 1: 50:78:b3:f3:cd:f4		2 MAC addresses claimed the same IP address (192.168.1.1)							
										MAC 2: 00:0c:29:e2:18:b4		The " 192.168.1.1" IP address is a possible gateway address						

	Possible ARP flooding attempt		MAC: 00:0c:29:e2:18:b4			The MAC address that ends with "b4" claims to have a different/new IP address		
										IP: 192.168.1.1

Давайте продолжим проверку трафика, чтобы обнаружить другие аномалии.
Обратите внимание, что дело лучше разделять на несколько файлов захвата, чтобы облегчить расследование.

На этом этапе очевидно, что есть аномалия.
Аналитик безопасности не может игнорировать поток ARP-запросов.
Это может быть вредоносная активность, сканирование или проблемы с сетью.

Появилась новая аномалия	-	MAC-адрес, заканчивающийся на «b4», создал несколько ARP-запросов с IP-адресом «192.168.1.25».
Давайте сосредоточимся на источнике этой аномалии и расширим принятые к сведению

	Detection Notes							Findings						Notes												

	Possible IP address match				MAC: 00:0c:29:e2:18:b4			1 IP address announced from a MAC address					
											IP: 192.168.1.25																		

	Possible ARP spoofing attempt			MAC 1: 50:78:b3:f3:cd:f4		2 MAC addresses claimed the same IP address (192.168.1.1)			
											MAC 2: 00:0c:29:e2:18:b4		The " 192.168.1.1" IP address is a possible gateway address			

	Possible ARP spoofing attempt			MAC: 00:0c:29:e2:18:b4			The MAC address that ends with "b4" claims to have a different/new IP address		
											IP: 192.168.1.1																								

	Possible ARP flooding attempt			MAC: 00:0c:29:e2:18:b4			The MAC address that ends with "b4" crafted multiple ARP requests against a range of IP addresses		
											IP: 192.168.1.xxx																													

До этого момента очевидно, что MAC-адрес, заканчивающийся на "b4", владеет IP-адресом "192.168.1.25" и создавал подозрительные ARP-запросы против диапазона IP-адресов.
Он также утверждал, что имеет возможный адрес шлюза.
Давайте сосредоточимся на других протоколах и найдем отражение этой аномалии в следующих разделах временного интервала.

HTTP-трафик есть, и на уровне IP все выглядит нормально, поэтому нет никакой связанной информации с нашими предыдущими выводами.
Давайте добавим MAC-адреса в качестве столбцов в панель списка пакетов, чтобы раскрыть связь за IP-адресами.

Еще одна аномалия! MAC-адрес, заканчивающийся на "b4", является пунктом назначения всех HTTP-пакетов! Очевидно, что имеет место атака MITM, а атакующий — хост с MAC-адресом, заканчивающимся на "b4".
Весь трафик, связанный с IP-адресами "192.168.1.12", пересылается на вредоносный хост.
Давайте подведем итоги, прежде чем завершить расследование.


	Detection Notes				Findings										Notes

	IP to MAC matches			MAC: 00:0c:29:e2:18:b4 = IP: 192.168.1.25		3  IP to MAC address matches		
								MAC: 50:78:b3:f3:cd:f4 = IP: 192.1681.1										
								MAC: 00:0c:29:98:c7:a8 = IP: 192.168.1.12										

	Attacker					MAC: 00:0c:29:e2:18:b4 = IP: 192.168.1.25		The attacker created noise with ARP packets			

	Router/gateway				MAC: 50:78:b3:f3:cd:f4 = IP: 192.1681.1			Gateway address					

	Victim						MAC: 50:78:b3:f3:cd:f4 = IP: 192.1681.12		The attacker sniffed all traffic of the victim

Обнаружение этих фрагментов информации в большом файле захвата является сложной задачей.
Однако в реальных случаях у вас не будет «специализированных данных», готовых к расследованию.
Поэтому вам необходимо иметь аналитический склад ума, знания и навыки работы с инструментами для фильтрации и обнаружения аномалий.

***	В анализе трафика всегда есть альтернативные решения.
	Тип решения и подход зависят от уровня знаний и навыков аналитика, а также доступных источников данных.

	+++++++++++++++++++++++++++++++++++
	+ DHCP / NetBIOS / Kerberos Scans +
	+++++++++++++++++++++++++++++++++++

При расследовании компрометации или вредоносного заражения аналитик безопасности должен знать, как идентифицировать хосты в сети, помимо сопоставления IP-адресов с MAC-адресами.
Одним из лучших методов является идентификация хостов и пользователей в сети для определения отправной точки расследования и составления списка хостов и пользователей, связанных с вредоносным трафиком/активностью.

Обычно корпоративные сети используют предопределенный шаблон для именования пользователей и хостов.
Хотя это упрощает знание и отслеживание инвентаризации, у этого есть и хорошие, и плохие стороны.
	Хорошая сторона заключается в том, что будет легко идентифицировать пользователя или хост, посмотрев на имя.
	Плохая сторона заключается в том, что будет легко клонировать этот шаблон и использовать его в корпоративной сети для злоумышленников.
Существует несколько решений, позволяющих избежать подобных действий, но для аналитика безопасности по-прежнему важно иметь навыки идентификации хостов и пользователей.

Протоколы, которые можно использовать для идентификации хостов и пользователей:

	-	Трафик протокола динамической конфигурации хостов (DHCP - Dynamic Host Configuration Protocol)

		Фильтрация надлежащих параметров пакетов DHCP имеет решающее значение для поиска интересующего события.

			)	Все пакеты относящиеся к DHCP
			)	Пакеты «DHCP Request» содержат информацию об имени хоста
					Option 12: Hostname.
					Option 50: Requested IP address.
					Option 51: Requested IP lease time.
					Option 61: Client's MAC address
			)	Пакеты «DHCP ACK» представляют принятые запросы
					Option 15: Domain name.
					Option 51: Assigned IP lease time
			)	Пакеты «DHCP NAK» представляют отклоненные запросы
					Option 56: Message (rejection details/reason).
		
		***	Из-за природы протокола только "Option 53" (тип запроса) имеет предопределенные статические значения.
			Сначала следует отфильтровать тип пакета, а затем можно отфильтровать остальные параметры с помощью "applying as column" или использовать расширенные фильтры, такие как "contains" и "matches".

		Поскольку сообщение может быть уникальным в зависимости от случая/ситуации, предлагается прочитать сообщение, а не фильтровать его.
		Таким образом, аналитик может создать более надежную гипотезу/результат, понимая обстоятельства события.

	-	Трафик NetBIOS (NBNS - Network Basic Input/Output System)
		NetBIOS или сетевая базовая система ввода-вывода — это технология, которая позволяет приложениям на разных хостах взаимодействовать друг с другом.

		Фильтрация надлежащих параметров пакетов NetBIOS имеет решающее значение для поиска интересующего события.

			)	Все пакеты относящиеся к NetBIOS
			)	Detailed Queries
					"name"
					"Time to live (TTL)"
					"IP address details"

	-	Трафик Kerberos
		Kerberos — это служба аутентификации по умолчанию для доменов Microsoft Windows.
		Она отвечает за аутентификацию запросов на обслуживание между двумя или более компьютерами по недоверенной сети.
		Конечная цель — надежно подтвердить личность.

		Фильтрация надлежащих параметров пакетов Kerberos имеет решающее значение для поиска интересующего события.

			)	Все пакеты относящиеся к Kerberos
			)	User account search
				***	Некоторые пакеты могут предоставлять информацию об имени хоста в этом поле.
					Чтобы избежать этой путаницы, отфильтруйте значение "$".
					Значения, заканчивающиеся на "$", являются именами хостов, а те, которые не заканчиваются на "$", являются именами пользователей.
			)	Detailed Queries
				Подробности запроса могут содержать:
					pvno		-	Protocol version (#)
					Realm		-	Domain name for the generated ticket.
					sname		-	Service and domain name for the generated ticket.
					addresses	-	Client IP address and NetBIOS name
				
				***	Информация об «addresses» доступна только в пакетах запросов.

	++++++++++++++++
	+ ICMP and DNS +
	++++++++++++++++

Туннелирование трафика (также известное как «переадресация портов») — это передача данных/ресурсов безопасным способом в сегменты и зоны сети.
Его можно использовать для потоков/направлений «из Интернета в частные сети» и «из частных сетей в Интернет».
Существует процесс инкапсуляции для сокрытия данных, поэтому передаваемые данные выглядят естественно для данного случая, но содержат пакеты частных данных и безопасно передают их в конечный пункт назначения.

Туннелирование обеспечивает анонимность и безопасность трафика.
Поэтому оно широко используется в корпоративных сетях.
Однако, поскольку оно обеспечивает значительный уровень шифрования данных, злоумышленники используют туннелирование для обхода периметров безопасности с использованием стандартных и доверенных протоколов, используемых в повседневном трафике, таких как ICMP и DNS.
Поэтому для аналитика безопасности крайне важно иметь возможность обнаруживать аномалии ICMP и DNS.

		///////////////////////////////
		/// ICMP Tunneling Analysis ///
		///////////////////////////////
	
	Протокол управляющих сообщений Интернета (ICMP) предназначен для диагностики и сообщения о проблемах сетевой связи.
	Он широко используется в отчетах об ошибках и тестировании.
	Поскольку это доверенный протокол сетевого уровня, иногда он используется для атак типа:
	
		-	«отказ в обслуживании» (DoS)
		-	эксфильтрации данных
		-	туннелирования C2.

	Обычно туннелирование ICMP представляет собой аномалии, появляющиеся/начинающиеся после выполнения вредоносного ПО или эксплуатации уязвимости.
	Поскольку пакеты ICMP могут передавать дополнительную полезную нагрузку данных, злоумышленники используют этот раздел для эксфильтрации данных и установления соединения C2.
	Это могут быть данные TCP, HTTP или SSH.
	
	Хотя протоколы ICMP предоставляют прекрасную возможность переносить дополнительные данные, у них также есть недостатки.
	Большинство корпоративных сетей блокируют пользовательские пакеты или требуют привилегий администратора для создания пользовательских пакетов ICMP.
	Таким образом большой объем трафика ICMP или аномальные размеры пакетов являются индикаторами туннелирования ICMP.
	Тем не менее, злоумышленники могут создавать пользовательские пакеты, которые соответствуют обычному размеру пакета ICMP (64 байта), поэтому обнаружить эти туннельные действия по-прежнему сложно.
	Поэтому аналитик по безопасности должен знать, что является нормой, а что нет, чтобы обнаружить возможную аномалию и передать ее на дальнейший анализ.

	Фильтрация надлежащих параметров пакетов ICMP имеет решающее значение для поиска интересующего события.

		)	Все пакеты относящиеся к ICMP
		)	Размер ICMP пакета
		)	Адрес получателя
	
		//////////////////////////////
		/// DNS Tunneling Analysis ///
		//////////////////////////////
	
	Система доменных имен (DNS) предназначена для перевода/конвертации адресов доменов IP в IP-адреса. 
	Поскольку она является неотъемлемой частью веб-сервисов, она широко используется и пользуется доверием, и поэтому часто игнорируется.
	Из-за этого злоумышленники используют ее для
	
		-	эксфильтрации данных
		-	туннелирования C2.

	Подобно туннелям ICMP, атаки DNS представляют собой аномалии, появляющиеся/начинающиеся после выполнения вредоносного ПО или эксплуатации уязвимости.
	Злоумышленник создает (или уже имеет) адрес домена и настраивает его как канал C2.
	Вредоносное ПО или команды, выполняемые после эксплуатации, отправляют запросы DNS на сервер C2.
	Однако эти запросы длиннее запросов DNS по умолчанию и созданы для адресов поддоменов.
	К сожалению, эти адреса поддоменов не являются фактическими адресами; они представляют собой закодированные команды, как показано ниже:

		"encoded-commands.maliciousdomain.com"

	Когда этот запрос направляется на сервер C2, сервер отправляет фактические вредоносные команды на хост.
	Поскольку DNS-запросы являются естественной частью сетевой активности, эти пакеты имеют шанс не быть обнаруженными сетевыми периметрами.
	Поэтому аналитик по безопасности должен знать, как исследовать длину DNS-пакетов и целевые адреса, чтобы обнаружить эти аномалии.

	Фильтрация надлежащих параметров пакетов DNS имеет решающее значение для поиска интересующего события.

		)	Все пакеты относящиеся к DNS
		)	Query length
		)	Volume of DNS requests
		)	Anomalous and non-regular names in DNS addresses
		)	Long DNS addresses with encoded subdomain addresses
		)	Patterns

	+++++++
	+ FTP +
	+++++++

Исследование трассировок открытого текста протокола кажется простым, но когда приходит время исследовать большую трассировку сети для анализа инцидента и реагирования, правила игры меняются.
Правильный анализ — это больше, чем просто отслеживание потока и чтение данных открытого текста.
Для аналитика безопасности важно создавать статистику и ключевые результаты процесса расследования.
Как уже упоминалось, аналитик должен обладать необходимыми сетевыми знаниями и навыками работы с инструментами для выполнения этого.

Протокол передачи файлов (FTP) предназначен для легкой передачи файлов, поэтому он фокусируется на простоте, а не на безопасности.
В результате этого использование этого протокола в незащищенных средах может создать такие проблемы безопасности, как:

	-	Атаки MITM
	-	Кража учетных данных и несанкционированный доступ
	-	Фишинг
	-	Внедрение вредоносного ПО
	-	Эксфильтрация данных

Фильтрация надлежащих параметров пакетов ICMP имеет решающее значение для поиска интересующего события.

		)	Все пакеты относящиеся к DNS
		)	Response Code Analyse
		)	Request Command Analyse

		//////////////////////////////
		/// Response Code Analysis ///
		//////////////////////////////
	
	Response code FTP-message от сервера всегда состоят из трех цифр, и каждая цифра имеет особое значение:
	
		1xx)	Первая цифра обозначает, является ли ответ хорошим, плохим или неполным:

					1xx	-	Positive Preliminary reply // Положительный предварительный ответ
							Запрошенное действие инициируется; ожидайте другого ответа, прежде чем продолжить с новой командой.
							Этот тип ответа может использоваться для указания того, что команда была принята, и пользовательский процесс теперь может обратить внимание на соединения данных для реализаций, где одновременный мониторинг затруднен.
							Процесс сервера FTP может отправлять максимум один ответ 1xx на команду.
					2xx	-	Positive Completion reply // Положительный ответ о завершении
							Запрошенное действие успешно выполнено; Может быть инициирован новый запрос.
							Например:
								200: means command successful.
					3xx	-	Positive Intermediate reply // Положительный промежуточный ответ
							Команда принята, но запрошенное действие отложено до получения дополнительной информации.
							Пользователь должен отправить другую команду, указав эту информацию.
							Этот ответ используется в группах последовательностей команд.
					4xx	-	Transient Negative Completion response
							Команда не была принята, и запрошенное действие не было выполнено, но состояние ошибки временное, и действие может быть запрошено снова.
							Пользователь должен вернуться к началу последовательности команд, если таковое имеется.
							Практическое правило при определении того, подходит ли ответ к категории 4xx или 5xx, заключается в том, что ответы являются 4xx, если команды можно повторить без каких-либо изменений в форме команды или в свойствах пользователя или сервера
							Например:
								-	команда пишется одинаково с теми же используемыми аргументами
								-	пользователь не меняет свой доступ к файлу или имя пользователя
								-	сервер не выставляет новую реализацию.
					5xx	-	Permanent Negative Completion reply // Постоянный отрицательный ответ завершения
							Команда не была принята, и запрошенное действие не было выполнено.
							Пользовательскому процессу не рекомендуется повторять точный запрос (в той же последовательности).
							
					6xx	-	Protected reply // Защищенный ответ
							Ответы 6xx — это защищенные сообщения в кодировке Base64, которые служат ответами на защищенные команды.
							При правильном декодировании эти ответы попадают в указанные выше категории.
		
		x2x)	Вторая цифра является группирующей и кодирует следующую информацию:

					x0x	-	Syntax // Синтаксис
							Эти ответы относятся к синтаксическим ошибкам, которые не подходят ни под одну функциональную категорию, нереализованным или избыточным командам.
					
					x1x	-	Information // Информация
							Это ответы на запросы информации, например, о статусе или помощи.
							Например:
								211: System status
								212: Directory status
								213: File statu
					
					x2x	-	Connections // Подключения
							Ответы, относящиеся к соединениям управления и передачи данных.
							Например:
								220: Service ready
								227: Entering passive mode
								228: Long passive mode
								229: Extended passive mode
					
					x3x	-	Authentication and accounting // Аутентификация и учет
							Ответы на вопросы о процессе входа в систему и процедурах учета.
							Например:
								230: User login
								231: User logout
								331: Valid username
								430: Invalid username or password
								530: No login, invalid password
					
					x4x	-	Unspecified as of RFC 959 // Не указано по состоянию на RFC 959.

					x5x	-	File system // Файловая система
							Эти ответы указывают состояние файловой системы сервера по отношению к запрошенной передаче или другому действию файловой системы.
		
		xx3)	Третья цифра является под-группипующей для второй цифры.
				Дригим словами, она раскрывает некоторые категории/группы второй цифры
	
	Более подробно про FTP Response Codes можно прочитат тут	-	https://en.wikipedia.org/wiki/List_of_FTP_server_return_codes

		////////////////////////////////
		/// Request Command Analysis ///
		////////////////////////////////
	
	Ниже приведен список наиболее часто используемых команд FTP, которые можно отправить на сервер протокола передачи файлов (FTP).
	
		USER: Username
		PASS: Password
		CWD: Current work directory
		LIST: List
	
	Более подробно про FTP Response Codes можно прочитат тут	-	https://en.wikipedia.org/wiki/List_of_FTP_commands

	Он включает все команды, стандартизированные рабочей группой по инжинирингу Интернета (IETF) в RFC 959, а также расширения.
	Обратите внимание, что большинство клиентов FTP с командной строкой предоставляют пользователям собственный нестандартный набор команд.
	Например, GET — это общая пользовательская команда для загрузки файла вместо необработанной команды RETR.

	++++++++
	+ HTTP +
	++++++++

Протокол передачи гипертекста (HTTP) — это протокол на основе открытого текста, запрос-ответ и клиент-сервер.
Это стандартный тип сетевой активности для запроса/обслуживания веб-страниц, и по умолчанию он не блокируется никаким сетевым периметром.
В результате того, что протокол не зашифрован и является основой веб-трафика, HTTP является одним из обязательных для изучения протоколов при анализе трафика.

С помощью анализа HTTP можно обнаружить следующие атаки:

	-	Фишинговые страницы
	-	Веб-атаки
	-	Эксфильтрация данных
	-	Трафик команд и управления (C2)

Фильтрация надлежащих параметров пакетов ICMP имеет решающее значение для поиска интересующего события.

		)	Все пакеты относящиеся к HTTp (http или http2)
		)	HTTP Request Methods
		)	HTTP Response Status Code (2xx - 5xx)
		)	HTTP Parameters (User Agent, Request URI, Request Full URI, Server, Host, Connection, Line-based text data, HTLM Form URL Encoded)

Существуют следующие HTTP методы запрос:

	GET				-	Цель метода GET — просто извлечь данные с сервера.
						Метод GET используется для запроса любого из следующих ресурсов:
	HEAD			-	Возвращает метаданные о ресурсе на сервере.
						Этот метод HTTP-запроса возвращает все заголовки, связанные с ресурсом по заданному URL, но фактически не возвращает ресурс.
						Метод HTTP HEAD обычно используется для проверки следующих условий:
							Размер ресурса на сервере.
							Существует ли ресурс на сервере или нет.
							Дата последнего изменения ресурса.
							Действительность кэшированного ресурса на сервере.
	POST			-	Отправляет данные на сервер для обработки.
	PUT				-	Используется для полной замены ресурса, идентифицированного с заданным URL.
						Метод запроса HTTP PUT включает два правила:
							Операция PUT всегда включает полезную нагрузку, которая описывает совершенно новое определение ресурса, которое должно быть сохранено сервером.
							Операция PUT использует точный URL целевого ресурса.
	DELETE			-	После выполнения ресурс, на который указывает операция DELETE, удаляется с сервера.
	CONNECT			-	Используется для создания соединения с ресурсом на стороне сервера.
						Наиболее распространенной целью HTTP-метода CONNECT является прокси-сервер, к которому клиент должен получить доступ для туннелирования из локальной сети.
	OPTIONS			-	Возвращает список поддерживаемых и разрешенных методов HTTP.
	TRACE			-	Используется для диагностики, отладки и устранения неполадок.
						Он просто возвращает диагностическую трассировку, которая регистрирует данные из цикла запрос-ответ.
	PATCH			-	Позволяет обновлять существующие ресурсы.
						Например, значительно эффективнее отправлять на сервер небольшую полезную нагрузку, а не полное представление ресурса.


Рассмотрим некоторые фильтры более подробно

		///////////////////////////
		/// User Agent Analysis ///
		///////////////////////////
	
	User agent — идентификационная строка клиентского приложения; обычно используется для приложений, осуществляющих доступ к веб-сайтам — браузеров, поисковых роботов и «пауков», мобильных телефонов и других устройств со встроенным доступом к веб-ресурсам.
	При посещении веб-сайта клиентское приложение обычно посылает веб-серверу информацию о себе — текстовую строку, являющуюся частью HTTP-запроса, начинающуюся с User-agent: или User-Agent:, и обычно включающая такую информацию, как название и версию приложения, операционную систему компьютера и язык.
	У «пауков» эта строка часто содержит URL и email-адрес, по которым веб-мастер может связаться с оператором «паука».
	
	Поскольку злоумышленники используют сложные методы для осуществления атак, они пытаются оставить следы, похожие на естественный трафик через известные и надежные протоколы.
	Для аналитика безопасности важно обнаружить признаки аномалии в битах и ​​кусках пакетов.
	Поле «user-agent» является одним из замечательных ресурсов для обнаружения аномалий в трафике HTTP.
	
	В некоторых случаях злоумышленники успешно изменяют данные user-agent, которые могут выглядеть сверхъестественно.
	Аналитик безопасности не может полагаться только на поле user-agent, чтобы обнаружить аномалию.
	Никогда не вносите в белый список user-agent, даже если он выглядит естественно.
	
	Аномалия/обнаружение/охота на основе user-agent является дополнительным источником данных для проверки и полезно, когда есть очевидная аномалия.
	Если вы не уверены в значении, вы можете провести веб-поиск, чтобы подтвердить свои выводы с помощью информации по умолчанию и обычной информации user-agent (пример сайта).

	Фильтрация надлежащих параметров пакетов ICMP имеет решающее значение для поиска интересующего события.

			)	Все пакеты относящиеся к User-Agent (http или http2)
			)	Различная информация о пользовательском агенте с одного и того же хоста в краткосрочном уведомлении.
			)	Незначительные различия в написании. («Mozilla» — это не то же самое, что «Mozlilla» или «Mozlila»)
			)	Информация об инструментах аудита, таких как Nmap, Nikto, Wfuzz и sqlmap, в поле пользовательского агента.
			)	Полезные данные в поле пользовательского агента.
	
	Простыми словами, User-Agent	-	это информация об инструменте, который был использован злоумышленником для взаимодействия с веб-приложением или веб-страницей

	!!! ПРИМЕР (Log4j) !!!
	Правильное расследование начинается с предварительного исследования угроз и аномалий, на которые будет вестись охота.
	Давайте рассмотрим известные нам данные об атаке "Log4j" перед запуском Wireshark.

		1)	Сперва нам надо отфильтровать трафик по методу запроса
			Это может быть либо POST, либо GET, либо Оба

				http.request.method == "POST"
		
		2)	Затем, используя извеные шаблоны, которые встречаются в тексте поля User-Agent, отфильтровать по шаблону
			Шаблон может быть либо в IP, либо во Frame, либо в User-Agent

				ip contains "jndi"
				frame contains "jndi"
				http.user_agent contains "$"

	+++++++++
	+ HTTPS +
	+++++++++

При исследовании веб-трафика аналитики часто сталкиваются с зашифрованным трафиком.
Это вызвано использованием протокола HTTPS (Hypertext Transfer Protocol Secure) для повышения безопасности от атак спуфинга, сниффинга и перехвата.
HTTPS использует протокол TLS для шифрования сообщений, поэтому невозможно расшифровать трафик и просмотреть переданные данные без пар ключей шифрования/дешифрования.
Поскольку этот протокол обеспечивает хороший уровень безопасности для передачи конфиденциальных данных, злоумышленники и вредоносные веб-сайты также используют HTTPS.
Поэтому аналитик по безопасности должен знать, как использовать файлы ключей для расшифровки зашифрованного трафика и исследования активности трафика.

Пакеты будут отображаться разными цветами, поскольку трафик HTTP зашифрован.
Кроме того, сведения о протоколе и информация (фактический URL-адрес и данные, возвращаемые сервером) не будут полностью видны.
Более того, у HTTPS отсутствует аббревиатура (по сравнению с другими протоколами), позволяющая отфильтровать https пакеты

Для того, чтобы понять - если ли в захваченном файле зашифрованный трафик используют следующие способы

		)	tls
		)	http2 (но он без предзагруженых ключей шифрования трафик отображаться не будет)
		)	ssdp (как он помогает определить зашифрованнй трафик - ума не приложу)

Аналогично трехстороннему процессу установления связи TCP, протокол TLS имеет свой процесс установления связи.
Первые два шага содержат сообщения "Client Hello" и "Server Hello".
Данные фильтры показывают начальные пакеты hello в файле захвата.
Эти фильтры полезны для определения того, какие IP-адреса участвуют в установлении связи TLS.

	-	Client Hello
			http.request || tls.handshake.type == 1 && !(ssdp)
	
	-	Server Hello
			http.request || tls.handshake.type == 2 && !(ssdp)

		///////////////////////////
		/// Encryption Key File ///
		///////////////////////////
	
	Файл журнала ключей шифрования — это текстовый файл, содержащий уникальные пары ключей для расшифровки сеанса зашифрованного трафика.
	Эти пары ключей автоматически создаются (для каждого сеанса) при установке соединения с веб-страницей с поддержкой SSL/TLS.
	Поскольку все эти процессы выполняются в браузере, вам необходимо настроить систему и использовать подходящий браузер (Chrome и Firefox поддерживают это), чтобы сохранить эти значения в качестве файла журнала ключей.
	
	Для этого вам необходимо настроить переменную среды и создать SSLKEYLOGFILE, и браузер будет сбрасывать ключи в этот файл при просмотре веб-страниц.
	Пары ключей SSL/TLS создаются для каждого сеанса во время подключения, поэтому важно сбрасывать ключи во время захвата трафика.
	В противном случае невозможно создать/сгенерировать подходящий файл журнала ключей для расшифровки захваченного трафика.
	
	Чтобы добавить/удалить файлы журнала ключей Вы можете использовать меню «Edit --> Preferences --> Protocols --> TLS»
	Позле загрузки ключей в Wireshark, все зашифрованные пакеты будут автоматически отображены
	***	Обратите внимание, что панель деталей пакета и байтов предоставляет данные в разных форматах для исследования.
		Информация о распакованном заголовке и детали пакета HTTP2 доступны после расшифровки трафика.
		В зависимости от деталей пакета вы также можете иметь следующие форматы данных:
		
			-	Frame
			-	Decrypted TLS
			-	Decompressed Header
				Reassembled TCP
			-	Reassembled SSL