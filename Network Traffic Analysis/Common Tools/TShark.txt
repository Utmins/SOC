t	=====================================================================
* GENERAL *
***********

TShark — это текстовый инструмент, подходящий для вырезания данных, глубокого анализа пакетов и автоматизации с помощью скриптов.
Эта сила и гибкость исходят из природы инструментов CLI, поскольку полученные/обработанные данные могут быть переданы по конвейеру в дополнительные инструменты.

Ниже перечислены наиболее распространенные инструменты, используемые для анализа пакетов.
Данные утилиты используются самостоятельно (без TShark)

	Tool/Utility		Purpose and Benefit
	
	capinfos		Предоставляет сведения об указанном файле захвата.
				Рекомендуется просмотреть сводку файла захвата перед началом исследования .
	grep			Выполняет поиск в текстовых данных.
	cut			Отделяет части строк из указанного источника данных.
	uniq			Фильтрует повторяющиеся строки/значения.
	nl			Отображает количество показанных строк.
	sed			Потоковый редактор.
	awk 			Язык сценариев, помогающий выполнять поиск и обработку шаблонов.

=====================================================================
* TShark Parametrs *
********************

TShark — это текстовый (командно-строчный) инструмент, позволяющий легко проводить глубокий и последовательный анализ полученных результатов
Однако  вам понадобятся встроенные опции и связанные с ними параметры, чтобы контролировать вывод и не быть заваленными подробными выводами TShark.
Обратите внимание, что TShark требует привилегий суперпользователя для прослушивания живого трафика и составления списка всех доступных интерфейсов.

	Parameter		Purpose
	
	No Parameter		Прослушивает трафик как tcpdump
					tshark
	-h			Отображает страницу справки с наиболее распространенной функцией
					tshark -h
	-v			Показывает информацию о версии.
					tshark -v
	-D			Показывает список доступных интерфейсов сниффинга.
					tshark -D
	-i			Выбирает интерфейс для захвата живого трафика.
					tshark -i 1
					tshark -i ens55

	-r			Read/input function. Read a capture file.
					tshark -r demo.pcapng
	-c			Packet count.
				Stop after capturing a specified number of packets.
				E.g. stop after capturing/filtering/reading 10 packets.
					tshark -c 10
	-w			Write/output function.
				Write the sniffed traffic to a file.
					tshark -w sample-capture.pcap
	-V			Verbose.
				Provide detailed information for each packet.
				This option will provide details similar to Wireshark's "Packet Details Pane".
					tshark -V
	-q			Silent mode.
				Suspress the packet outputs on the terminal.
					tshark -q
	-x			Display packet bytes.
				Show packet details in hex and ASCII dump for each packet.
					tshark -x

	-a			Duration: Прослушивание с записью в файл. Прослушка и запись прекращаются после достижения указанного времени записи.
						tshark -w test.pcap -a duration:X
				Filesize: Прослушивание с записью в файл. Прослушка и запись прекращаются после достижения определенного размера файла (##)
						tshark -w test.pcap -a filesize:##
				Files:	  Прослушивание с записью в файлы определнного размера. По достижеиню файла указанного размера запись переходит в следующий файл. По достижению заданного количества файла прослушивание и запись прекращаются
						tshark -w test.pcap -a filesize:10 -a files:3
	-b			Duration: Прослушивание с записью в файл. Файл перезаписывается по достижении указанного времени записи (бесконечная/цикличная запись) 
						tshark -w test.pcap -b duration:1
				Filesize: Прослушивание с записью в файл. Файл перезаписывается по достижении указанного размера файла (##) (бесконечная/цикличная запись) 
						tshark -w test.pcap -b filesize:10
				Files: 	  Прослушивание с записью в файлы определнного размера. По достижеиню файла указанного размера запись переходит в следующий файл. По достижению заданного количества файла первый (the oldest) файл перезависывается (бесконечная/цикличная запись)
						tshark -w test.pcap -b filesize:10 -b files:3

	-f			Capture filters. То же, что синтаксис BPF и фильтры захвата Wireshark..
	-Y			Display filters. Такие же, как фильтры отображения Wireshark.



	++++++++++++
	+ SNIFFING +
	++++++++++++

Sniffing — одна из основных функций TShark.
Узел компьютера может иметь несколько сетевых интерфейсов, которые позволяют хосту общаться и прослушивать трафик через сеть.
Конкретные интерфейсы могут быть связаны с определенными задачами/заданиями.
Поэтому возможность выбора интерфейса сниффинга помогает пользователям выбирать и устанавливать правильный интерфейс для сниффинга.

Сниффинг можно выполнять с выбором определенного интерфейса и без него.
Когда выбран определенный интерфейс, TShark использует этот интерфейс для сниффинга трафика.
TShark будет использовать первый доступный интерфейс, если интерфейс не выбран.
Отсутствие аргумента интерфейса является псевдонимом для -i 1.
Вы также можете задать различные интерфейсы сниффинга, используя параметр -i.
TShark всегда отображает имя используемого интерфейса в начале сниффинга.

	+++++++++++++++++++++++
	+ Read Captured Files +
	+++++++++++++++++++++++

TShark также может обрабатывать файлы PCAP.
Вы можете использовать параметр -r для обработки файла и исследования пакетов.
Вы можете ограничить количество отображаемых пакетов с помощью параметра -c.

	++++++++++++++
	+ WRITE DATA +
	++++++++++++++

TShark также может записывать перехваченные или отфильтрованные пакеты в файл.
Вы можете сохранить перехваченный трафик в файл с помощью параметра -w.
Эта опция помогает аналитикам отделять определенные пакеты от файла/трафика и сохранять их для дальнейшего анализа.
Она также позволяет аналитикам делиться только подозрительными пакетами/областями со следователями более высокого уровня.

	+++++++++++++++++++++
	+ SHOW PACKET BYTES +
	+++++++++++++++++++++

TShark может отображать сведения о пакетах в шестнадцатеричном и ASCII-формате.
Вы можете просмотреть дамп пакетов, используя параметр -x.
После использования этого параметра все пакеты будут отображаться в шестнадцатеричном и ASCII-формате.
Поэтому может быть сложно заметить аномалии с первого взгляда, поэтому использование этой опции после сокращения количества пакетов будет гораздо более эффективным.

	+++++++++++++
	+ VERNOSITY +
	+++++++++++++

Обработка пакетов TShark и операции сниффинга по умолчанию предоставляют одну строку информации и исключают многословие.
Подход по умолчанию позволяет легко отслеживать количество обработанных/проверенных пакетов
Однако TShark также может предоставлять детальную информацию для каждого пакета при получении инструкции.
Детальная информация предоставляется аналогично "Панели сведений о пакетах" Wireshark.
Поскольку детальная информация предлагает длинный список сведений о пакетах, предлагается использовать эту опцию для определенных пакетов, а не для серии пакетов.

Verbosity предоставляет полную информацию о пакете и затрудняет его исследование (длинный и сложный вывод терминала для каждого пакета).
Тем не менее, он все еще полезен для глубокого анализа пакетов и написания сценариев, выделяя TShark.
Помните, что лучшее время использования verbosity — после фильтрации пакетов.
Вы можете сравнить вывод выше со снимком экрана ниже и увидеть возможности для написания сценариев, вырезания и корреляции, которые у вас есть!

	+++++++++++
	+ CAPTURE +
	+++++++++++

Как сетевой сниффер и анализатор пакетов, TShark можно настроить на подсчет пакетов и остановку в определенной точке или запуск в циклической структуре.

Параметры условий захвата работают только в режиме «захват/сниффинг».
Вы получите сообщение об ошибке, если попытаетесь прочитать файл pcap и применить параметры условий захвата.
Идея заключается в том, чтобы сохранять файлы захвата в определенных размерах для различных целей во время живого захвата.
Если вам нужно извлечь виды пакетов из определенного файла захвата, вам нужно будет использовать параметры чтения и записи

***	TShark поддерживает объединение параметров автоостановки (-a) с параметрами управления кольцевым буфером (-b).
	Вы можете комбинировать параметры в соответствии с вашими потребностями.
	Используйте параметры бесконечного цикла осторожно
	Помните, что вы должны использовать по крайней мере один параметр автоостановки, чтобы остановить бесконечный цикл.

	+++++++++++++++++++++++++++++++
	+ CAPTURE and DISPLAY FILTERS +
	+++++++++++++++++++++++++++++++

В TShark есть два измерения фильтрации пакетов:

	-	фильтрация в реальном времени (Capture Filters)
	-	фильтрация после захвата (Display Filters).

Эти два измерения можно фильтровать двумя разными способами:

	-	с помощью предопределенного синтаксиса 
	-	Berkeley Packet Filters (BPF).

TShark поддерживает оба, поэтому вы можете использовать фильтры Wireshark и BPF для фильтрации трафика.
Как известно, TShark — это версия Wireshark для командной строки, поэтому нам нужно будет использовать разные фильтры для захвата и фильтрации пакетов.
Булевы операторы также могут использоваться в обоих типах фильтров.

Стоит отметить, что TShark не подсчитывает «общее количество отфильтрованных пакетов»
Он присваивает номера пакетам в соответствии со временем захвата, а отображает только пакеты, соответствующие нашему фильтру.

Вы можете использовать команду nl для получения пронумерованного списка вашего вывода.
Таким образом, вы можете легко вычислить "общее количество отфильтрованных пакетов", не путаясь с "назначенными номерами пакетов".

		///////////////////////
		/// CAPTURE FILTERS ///
		///////////////////////

Фильтры захвата используются для того, чтобы иметь определенный тип трафика в файле захвата, а не иметь все.
Они имеют ограниченные возможности фильтрации, и их цель — реализовать область действия по диапазону, протоколу и направлению фильтрации.
Это может звучать как фильтрация bulk/raw, но это все равно обеспечивает организованные файлы захвата с разумным размером файла.

Фильтры захвата Параметры фильтрации в реальном времени.
Цель — сохранить только определенную часть трафика.
Устанавливается до захвата трафика и не может быть изменен во время захвата в реальном времени.

*** Рекомендуется использовать одинарные кавычки для фильтров захвата, чтобы избежать проблем с пробелами и расширением bash.

	Capture Filter Category			Details

	Host Filtering				Захват трафика к определенному хосту или с него
							-	Генерация трафика с помощью cURL. Эта команда отправляет HTTP-запрос по умолчанию на указанный адрес.
									curl tryhackme.com
							-	Фильтр захвата TShark для хоста
									tshark -f "host tryhackme.com"
	IP Filtering				Захват трафика в или из определенного IP адреса (на примере Netcat)
							-	Генерация трафика с помощью Netcat. Netcat предписано предоставить детали (-v), а тайм-аут установлен на 5 секунд (-w)
									nc 10.10.10.10 4444 -vw 5
							-	Фильтр захвата TShark для определенного IP-адреса (10.10.10.10)
									tshark -f "host 10.10.10.10"
	Port Filtering				Захват трафика в или из определенного порта (на примере Netcat)
							-	Генерация трафика с помощью Netcat. Netcat предписано предоставить детали (-v), а тайм-аут установлен на 5 секунд (-w)
									nc 10.10.10.10 4444 -vw 5
							-	Фильтр захвата TShark для определенного порта (4444)
									tshark -f "port 4444"
	Protocol Filtering			Захват трафика к или от определенного протокола. (на примере Netcat)
							-	Генерация трафика с помощью Netcat. Netcat предписано использовать UDP, предоставлять подробности (-v), а тайм-аут установлен на 5 секунд (-w)
									nc -u 10.10.10.10 4444 -vw 5
							-	Фильтр захвата TShark для определенного протокола (udp)
									tshark -f "udp"


Qualifier		Details and Available Options

Type			Тип соответствия цели.
			Вы можете фильтровать IP-адреса, имена хостов, диапазоны IP-адресов и номера портов.
			Обратите внимание, что если вы не зададите квалификатор, по умолчанию будет использоваться квалификатор «host».
			host | net | port | portrange
				-	Filtering a host
						tshark -f "host 10.10.10.10"
				-	Filtering a network range 
						tshark -f "net 10.10.10.0/24"
				-	Filtering a Port
						tshark -f "port 80"
				-	Filtering a port range
						tshark -f "portrange 80-100"
Direction		Направление/поток цели.
			Обратите внимание, что если вы не используете оператор направления, он будет равен "любому" и будет охватывать оба направления.
			src | dst
				-	Filtering source address
						tshark -f "src host 10.10.10.10"-
				-	Filtering destination address
						tshark -f "dst host 10.10.10.10"
Protocol		Целевой протокол
			arp | ether | icmp | ip | ip6 | tcp | udp
				-	Filtering TCP
						tshark -f "tcp"
				-	Filtering MAC address
						tshark -f "ether host F8:DB:C5:A2:5D:81"
			Вы также можете фильтровать протоколы по номерам IP-протоколов, назначенным IANA.
				-	Filtering IP Protocols 1 (ICMP)
						tshark -f "ip proto 1"
						Assigned Internet Protocol Numbers		

		///////////////////////
		/// DISPLAY FILTERS ///
		///////////////////////

Фильтры отображения исследуют файлы захвата глубоко, не изменяя пакет
Цель — исследовать пакеты путем уменьшения количества видимых пакетов, которое можно изменить во время расследования.

Display Filter Category		Details and Available Options

Protocol: IP			Фильтрация IP без указания направления.
					tshark -Y 'ip.addr == 10.10.10.10'
				Фильтрация диапазона сети
					tshark -Y 'ip.addr == 10.10.10.0/24'
				Фильтрация исходного IP
					tshark -Y 'ip.src == 10.10.10.10'
				Фильтрация IP-адреса назначения
					tshark -Y 'ip.dst == 10.10.10.10'
Protocol: TCP			Фильтрация TCP-порта
					tshark -Y 'tcp.port == 80'
				Фильтрация исходного TCP-порта
					tshark -Y 'tcp.srcport == 80'
Protocol: HTTP			Фильтрация HTTP-пакетов
					tshark -Y 'http'
				Фильтрация HTTP-пакетов с кодом ответа "200"
					tshark -Y "http.response.code == 200"
Protocol: DNS			Фильтрация DNS-пакетов
					tshark -Y 'dns'
				Фильтрация всех пакетов DNS «A»
					tshark -Y 'dns.qry.type == 1'

=====================================================================
* Advanced Filtering Options  *
*******************************

Выполнение глубокого анализа пакетов иногда заканчивается особым требованием фильтрации, которое не может быть охвачено фильтрами по умолчанию.
TShark поддерживает операторы Wireshark "contains" и "matches", которые являются ключом к расширенным возможностям фильтрации.

	Filter		Details

	Contains	Поиск значения внутри пакетов.
			Чувствителен к регистру.
			Аналогично параметру «find» в Wireshark..
	Matches		Поиск шаблона внутри пакетов.
			Поддерживает регулярные выражения.
			Нечувствителен к регистру.
			Сложные запросы имеют погрешность.

***	Операторы «contains» и «matches» нельзя использовать с полями, состоящими из «целочисленных» значений.
	Поэтому использование значений HEX и REGEX вместо ASCII всегда имеет больше шансов на совпадение

	++++++++++++++++++
	+ Extract Fields +
	++++++++++++++++++

Эта опция помогает аналитикам извлекать определенные части данных из пакетов.
Таким образом, аналитики имеют возможность собирать и сопоставлять различные поля из пакетов.
Она также помогает аналитикам управлять выводом запроса на терминале.

Структура запроса выглядит следующим образом

	Main Filter	Target Field		Show Field Name
	
	-T fields	-e <field name>		-E header=y

***	Необходимо использовать параметр -e для каждого поля, которое вы хотите отобразить.

	~:$ tshark -r <demo>.pcapng -T fields -e ip.src -e ip.dst -E header=y -c 5    

		/////////////////////////
		/// Filter: "contains" ///
		/////////////////////////

	Filter		Contains
	Type		Оператор сравнения
	Description	Ищет значения внутри пакетов.
			Он чувствителен к регистру и обеспечивает схожую функциональность с опцией «Найти», фокусируясь на определенном поле.
	Example		Найти все серверы «Apache».
	Workflow	Выводит список всех HTTP-пакетов, где поле «server» содержит ключевое слово «Apache».
	Usage		http.server contains "Apache"

			~:$ tshark -r <demo>.pcapng -Y 'http.server contains "Apache"'
				38   4.846969 65.208.228.223 ? 145.254.160.237 HTTP/XML HTTP/1.1 200 OK

			~:$ tshark -r <demo>.pcapng -Y 'http.server contains "Apache"' -T fields -e ip.src -e ip.dst -e http.server -E header=y
				ip.src		ip.dst		http.server
				65.208.228.223	145.254.160.237	Apache

		/////////////////////////
		/// Filter: "matches" ///
		/////////////////////////

	Filter		matches
	Type		Оператор сравнения
	Description	Ищет шаблон регулярного выражения.
			Он нечувствителен к регистру, а сложные запросы имеют погрешность.
	Example		Найти все страницы .php и .html.
	Workflow	Выводит список всех HTTP-пакетов, в которых поле «метод запроса» соответствует ключевым словам «GET» или «POST».
	Usage		http.request.method matches "(GET|POST)"

			~:$ tshark -r <demo>.pcapng -Y 'http.request.method matches "(GET|POST)"'
				4   0.911310 145.254.160.237 ? 65.208.228.223 HTTP GET /download.html HTTP/1.1 
				18   2.984291 145.254.160.237 ? 216.239.59.99 HTTP GET /pagead/ads?client=ca-pub-2309191948673629&random=1084443430285&K

			~:$ tshark -r <demo>.pcapng -Y 'http.server contains "Apache"' -T fields -e ip.src -e ip.dst -e http.server -E header=y
				ip.src			ip.dst		http.request.method
				145.254.160.237		65.208.228.223	GET
				145.254.160.237		216.239.59.99	GET

=====================================================================
* TShark CLI Features *
***********************

Как уже было упомянуто, что TShark считается версией Wireshark для командной строки.
Помимо совместного использования тех же фильтров отображения, TShark может выполнять несколько функций Wireshark, описанных ниже.

Три важных момента при использовании функций, подобных Wireshark:

	-	Эти параметры применяются ко всем пакетам в области действия, если не указан фильтр отображения.
	-	Большинство команд, показанных ниже, являются CLI-версиями функций Wireshark.
	-	TShark объясняет параметры, используемые в начале строки вывода.
		Например, вы будете использовать параметр phs для просмотра иерархии протоколов.
		После использования этой команды результат начнется с заголовка «Packet Hierarchy Statistics».

***	TShark может предоставлять цветные выходные данные, чтобы помочь аналитикам ускорить анализ и быстро обнаружить аномалии (по аналогии с Wireshark).
	Опция цвета активируется с помощью параметра --color
		
		~:$ tshark -r <filename>.pcap --color

	++++++++++++++
	+ STATISTICS +
	++++++++++++++

TShark собирает различные типы статистики и отображает их результат после завершения чтения захваченного файла.
Для этого используется ключ «-z» с TShark.

Для того, чтобы узнать обо всех различных опциях внутри ключа "-z", мы запустим TShark с ключом "-z", за которым следует ключевое слово help.
Это дает нам исчерпывающий список различных поддерживаемых форматов.

Если мы хотим, чтобы была отображена статистика по определенному критерию и в определенном формате, то после ключа "-z" необходимо указать соответствуюзие параметры через запятую.
В TShark существует огромное еоличество различных критериев.
Поэтому,мы рассмотрим только некоторые из них
***	Каждый раз, когда вы фильтруете статистику, сначала отображаются пакеты, а затем статистика.
	Вы можете отключить пакеты и сосредоточиться на статистике, используя параметр -q.

		//////////////////////////
		/// Protocol Hierarchy ///
		//////////////////////////
	
	Иерархия протоколов помогает аналитикам видеть используемые протоколы, номера кадров и размер пакетов в виде дерева на основе номеров пакетов.
	Поскольку он предоставляет сводку захвата, он может помочь аналитикам определить точку фокусировки для интересующего события.
	Используйте параметры -z io,phs -q для просмотра иерархии протоколов.

		~:$ tshark -r <demo>.pcapng -z io,phs -q

	После просмотра всего дерева пакетов вы можете сосредоточиться на определенном протоколе, как показано ниже.
	Для это необходимо добавить аббревитуру инитересующего Вас протокола в фильтр
	К примеру UDP

		~:$ tshark -r <demo>.pcapng -z io,phs,udp -q

		///////////////////////////
		/// Packet Lengths Tree ///
		///////////////////////////

	Дерево длин пакетов помогает аналитикам просматривать общее распределение пакетов по размеру в виде дерева.
	Оно позволяет аналитикам быстро обнаруживать аномально большие и маленькие пакеты! 
	спользуйте параметры -z plen,tree -q для просмотра дерева длин пакетов.

		~:$ tshark -r <demo>.pcapng -z plen,tree -q

		/////////////////
		/// ENDpoints ///
		/////////////////

	Просмотр статистики конечной точки помогает аналитикам просматривать уникальные конечные точки.
	Он также показывает количество пакетов, связанных с каждой конечной точкой.
	
	Если вы знакомы с Wireshark, вы должны знать, что конечные точки можно просматривать в нескольких форматах.
	Подобно Wireshark, TShark поддерживает несколько вариантов фильтрации источников для идентификации конечной точки.
	Используйте параметры -z endpoints,ip -q для просмотра конечных точек IP.

		~:$ tshark -r <demo>.pcapng -z endpoints,ip -q

	***	Обратите внимание, что вы также можете выбрать другие доступные протоколы.

		Filter		Purpose

		eth		Ethernet addresses
		ip		IPv4 addresses
		ipv6		IPv6 addresses
		tcp		TCP addresses
				Valid for both IPv4 and IPv6
		udp		UDP addresses
				Valid for both IPv4 and IPv6
		wlan		IEEE 802.11 addresses

		////////////////////
		/// Conversation ///
		////////////////////

	Просмотр статистики конечной точки помогает аналитикам просматривать уникальные конечные точки.
	Он также показывает количество пакетов, связанных с каждой конечной точкой.
	Подобно Wireshark, TShark поддерживает несколько вариантов фильтрации источников для идентификации конечной точки.
	Используйте параметры -z endpoints,ip -q для просмотра конечных точек IP.
	
		~:$ tshark -r <demo>.pcapng -z endpoints,ip -q

		///////////////////
		/// Expert Info ///
		///////////////////

	Представление экспертной информации помогает аналитикам просматривать автоматические комментарии, предоставляемые Wireshark.
	Используйте параметры -z expert -q для просмотра экспертной информации.

		~:$ tshark -r <demo>.pcapng -z expert -q

		/////////////////////
		/// IPv4 and IPv6 ///
		/////////////////////
 
	Эта опция предоставляет статистику по пакетам IPv4 и IPv6.
	Наличие статистики протоколов помогает аналитикам просматривать распределение пакетов в соответствии с типом протокола.
	Вы можете фильтровать доступные типы протоколов и просматривать подробности с помощью параметров -z ptype,tree -q

		~:$ tshark -r <demo>.pcapng -z ptype,tree -q

	Также полезно иметь сводку хостов в одном представлении.
	Особенно при работе с большими захватами просмотр всех хостов с помощью одной команды может помочь вам обнаружить аномальный хост с первого взгляда.
	Вы можете отфильтровать все IP-адреса, используя параметры, указанные ниже.

		IPv4	-	~:$ tshark -r <demo>.pcapng -z ip_hosts,tree -q
		IPv6	-	~:$ tshark -r <demo>.pcapng -z ipv6_hosts,tree -q

	Для сложных случаев и глубокого анализа вам нужно будет сопоставить результаты, сосредоточившись на адресах источника и назначения.
	Вы можете отфильтровать все адреса источника и назначения, используя параметры, указанные ниже.

		IPv4	-	~:$ tshark -r <demo>.pcapng -z ip_srcdst,tree -q
		IPv6	-	~:$ tshark -r <demo>.pcapng -z ipv6_srcdst,tree -q

	В некоторых случаях вам нужно будет сосредоточиться на исходящем трафике, чтобы определить используемые сервисы и порты.
	Вы можете отфильтровать весь исходящий трафик, используя параметры, указанные ниже

		IPv4	-	~:$ tshark -r <demo>.pcapng -z dests,tree -q
		IPv6	-	~:$ tshark -r <demo>.pcapng -z ipv6_dests,tree -q

		///////////
		/// DNS ///
		///////////

	Эта опция предоставляет статистику по пакетам DNS, суммируя доступную информацию.
	Вы можете фильтровать пакеты и просматривать подробности, используя параметры -z dns,tree -q

		~:$ tshark -r <demo>.pcapng -z dns,tree -q

		//////////////
		/// HTTP/S ///
		//////////////

	Эта опция предоставляет статистику по HTTP-пакетам, суммируя распределение нагрузки, запросы, пакеты и информацию о статусе.
	Вы можете фильтровать пакеты и просматривать подробности, используя параметры, указанные ниже.

		Счетчик пакетов и статуса для HTTP	-	~:$ tshark -r <demo>.pcapng -z http,tree -q
		Счетчик пакетов и статуса для HTTP2	-	~:$ tshark -r <demo>.pcapng -z http2,tree -q
		Распределение нагрузки			-	~:$ tshark -r <demo>.pcapng -z http_srv,tree -q
		Запросы					-	~:$ tshark -r <demo>.pcapng -z http_req,tree -q
		Запросы и ответы			-	~:$ tshark -r <demo>.pcapng -z http_seq,tree -q

		/////////////////////
		/// Follow Stream ///
		/////////////////////

	Эта опция помогает аналитикам отслеживать потоки трафика, аналогичные Wireshark.
	Структура запроса выглядит следующим образом

	
		Main Parameter		Protocol	View Mode	Stream Number		Additional Parameter
		
		-z follow		TCP		HEX		0 | 1 | 2 | 3 ...	-q
					UDP		ASCII
					HTTP
					HTTP2

	***	Потоки начинаются с "0".
	
	Вы можете фильтровать пакеты и отслеживать потоки, используя параметры, указанные ниже.

			TCP Streams	-	~:$ tshark -r <demo>.pcapng -z follow,tcp,ascii,0 -q
			UDP Streams	-	~:$ tshark -r <demo>.pcapng -z follow,udp,ascii,0 -q
			HTTP Streams	-	~:$ tshark -r <demo>.pcapng -z follow,http,ascii,0 -q

		//////////////////////
		/// Export Objects ///
		//////////////////////

	Эта опция помогает аналитикам извлекать файлы из DICOM, HTTP, IMF, SMB и TFTP.
	Структура запроса поясняется в таблице ниже

		Main Parameter		Protocol	Target Folder				Additional Parameter
		
		--export-objects	DICOM		Target folder to save the files.	-q
					HTTP		
					IMF
					SMB
					TFTP

	Вы можете фильтровать пакеты и отслеживать потоки, используя параметры, указанные ниже.

		~:$ tshark -r <demo>.pcapng --export-objects http,</path/to/the/saving/folder -q

		///////////////////
		/// Credentials ///
		///////////////////

	Эта опция помогает аналитикам обнаруживать и собирать учетные данные в открытом тексте с FTP, HTTP, IMAP, POP и SMTP.
	Вы можете фильтровать пакеты и находить учетные данные в открытом тексте, используя параметры ниже.

		~:$ tshark -r <demo>.pcapng -z credentials -q

	++++++++++++++++++++++++++++++++++++++++++++++++++
	+ Extract Hostnames / DNS Quieries / User Agents +
	++++++++++++++++++++++++++++++++++++++++++++++++++

В приведенном ниже примере показано, как извлекать необзодимую информацию из пакетов с помощью TShark.

	Имена хостов из пакетов DHCP	-	~:$ tshark -r <demo>.pcapng -T fields -e dhcp.option.hostname
	DNS запросы			-	~:$ tshark -r <demo>.pcapng -T fields -e dns.qry.name
	User Agent данные		-	~:$ tshark -r <demo>.pcapng -T fields -e http.user_agent

Однако вывод будет содержать множество неструктурированных данный, которые трудно читаемы, а также могут содержать несколько дублирующих значений.
Опытный аналитик должен знать, как использовать собственные инструменты/утилиты Linux для управления и организации вывода командной строки, как показано ниже.

	~:$ tshark -r <demo>.pcapng -T fields -e dhcp.option.hostname | awk NF | sort -r | uniq -c | sort -r

	~:$ tshark -r <demo>.pcapng -T fields -e dns.qry.name | awk NF | sort -r | uniq -c | sort -r

	~:$ tshark -r <demo>.pcapng -T fields -e http.user_agent | awk NF | sort -r | uniq -c | sort -r

Теперь вывод организован и готов к обработке/использованию. Логика запроса поясняется ниже.

		Query									Purpose

		tshark -r hostnames.pcapng -T fields -e dhcp.option.hostname		Основной запрос
											Извлекает значение имени хоста DHCP.
		awk NF									Удаляет пустые строки.
		sort -r									Рекурсивно сортирует перед обработкой значений
		uniq -c									Показывает уникальные значения, но вычисляет и показывает количество вхождений.
		sort -r									Окончательный процесс сортировки.
											Показывает вывод/результаты от большего количества вхождений к меньшему.


================================================

What is the full URL of the malicious/suspicious domain address?

	tshark -r <filename>.pcap -T fields -e http.host | awk NF | sort -r | uniq

What is the IP address of the malicious domain?

	tshark -r <filename>.pcap -Y 'http.request.method == POST' -T fields -e ip.addr

What is the email address that was used?

	tshark -r <filename>.pcap -Y 'http.request.method == POST' -w <new_filename>.pcap
	tshark -r <new_filename>.pcap -T fields -e http.file_data -e urlencoded-form.key -e urlencoded-form.value
	*** И тут уже просатриваем глазами


What is the name of the malicious/suspicious domain?

	tshark -r <filename>.pcap -T fields -e dns.qry.name | awk NF | uniq -c

What is the total number of HTTP requests sent to the malicious domain?

	tshark -r <filename>.pcap -T fileds -e http.request.full_uri | awk NF | uniq -c | grep "<potential-domain-name>"
	*** Также покажет какие файлы были запрошены и по каким каталогам был сделан запрос

What is the IP address associated with the malicious domain?

	tshark -r <filename>.pcap -Y 'dns.qry.name == 1' -T fields -e dns.qry.name -e dns.a | awk NF | uniq -c | grep "<potential-domain-name>"

What is the server info of the suspicious domain?

	tshark -r <filename>.pcap -T fields -e http.server | awk NF | uniq -c

Follow the "first TCP stream" in "ASCII". Investigate the output carefully. What is the number of listed files?
	
	tshark -r <filename>.pcap -z follow,tcp,ascii,0 -q
	*** Далее выискиваем глазами
	
