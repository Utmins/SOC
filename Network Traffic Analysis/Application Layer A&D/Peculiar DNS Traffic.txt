`=====================================================================
* Руководство *
***************

Если использовать машину от HTB, то сперва надо запустить данную комнаду, чтобы скачать и распокавать все необходимые pcap файлы

	<usern_name>@<host_name>$ wget -O file.zip 'https://academy.hackthebox.com/storage/resources/pcap_files.zip' && mkdir tempdir && unzip file.zip -d tempdir && mkdir -p pcaps && mv tempdir/Intermediate_Network_Traffic_Analysis/* pcaps/ && rm -r tempdir file.zip

Удобнее всего просматривать PCAP-files используя Wireshark
Однако, в целях практики и выбработки навыков использования CLI-based tools мы будем использовать такие утилиты как tcpdump

=====================================================================
* Легенда *
***********

DNS-трафик может быть обременительным для проверки, так как часто наши клиенты генерируют его в большом количестве, и аномалии иногда могут быть похоронены в его большом объеме.
Тем не менее, понимание DNS и некоторых прямых признаков вредоносных действий важно в наших усилиях по анализу трафика.

    +++++++++++++++
    + DNS Queries +
    +++++++++++++++

    DNS-запросы используются, когда клиент хочет разрешить доменное имя с IP-адресом или наоборот.
    Сначала мы можем рассмотреть наиболее распространенный тип запроса, который представляет собой прямой поиск.
    В общем, когда клиент инициирует запрос прямого поиска DNS, он выполняет следующие шаги.

        Request     -   Где находится academy.hackthebox.com?
        Response    -   Он находится по адресу 192.168.10.6

    Последовательно запрос/ответ выглядят следующим образом
    
        1.  Query Initiation (Инициирование запроса)
            Когда пользователь хочет посетить что-то вроде academy.hackthebox.com, он инициирует запрос прямого поиска DNS.

        2.  Local Cache Check (Проверка локального кэша)
            Затем клиент проверяет свой локальный кэш DNS, чтобы узнать, преобразовал ли он уже доменное имя в IP-адрес.
            Если нет, он продолжает следующим образом.

        3.  Recursive Query (Рекурсивный запрос)
            Затем клиент отправляет свой рекурсивный запрос на свой настроенный DNS-сервер (локальный или удаленный).

        4.  Root Servers (Корневые серверы)
            DNS-резолвер, если необходимо, начинает с запроса корневых серверов имен, чтобы найти авторитетные серверы имен для домена верхнего уровня (TLD).
            По всему миру распределено 13 корневых серверов.

        5.  TLD Servers (TLD-серверы)
            Затем корневой сервер отвечает авторитетными серверами имен для TLD (он же .com или .org)

        6.  Authoritative Servers (Авторитетные серверы)
            Затем DNS-резолвер запрашивает авторитетные серверы имен TLD для домена второго уровня (он же hackthebox.com).

        7.  Domain Name's Authoritative Servers (Авторитетные серверы доменных имен)
            Наконец, DNS-резолвер запрашивает авторитетные серверы имен доменов, чтобы получить IP-адрес, связанный с запрошенным доменным именем (он же academy.hackthebox.com).

        8.  Response (Ответ)
            Затем DNS-резолвер получает IP-адрес (запись A или AAAA) и отправляет его обратно клиенту, который инициировал запрос.

    +++++++++++++++++++++++++++++++
    + DNS Reverse Lookups/Queries +
    +++++++++++++++++++++++++++++++

    С другой стороны, у нас есть обратные запросы.
    Они происходят, когда клиент уже знает IP-адрес и хочет найти соответствующее полное доменное имя (FQDN).

        Request     -   Как вас зовут 192.168.10.6?
        Response    -   Ну, это academy.hackthebox.com

    В этом случае шаги немного проще.

        1.  Query Initiation (Инициация запроса)
            Клиент отправляет обратный запрос DNS на свой настроенный DNS-резолвер (сервер) с IP-адресом, по которому он хочет найти доменное имя.

        2.  Reverse Lookup Zones (Зоны обратного просмотра)
            DNS-резолвер проверяет, является ли он полномочным для зоны обратного просмотра, которая соответствует диапазону IP-адресов, определенному полученным IP-адресом.
            Также известная как 192.0.2.1, обратная зона будет 1.2.0.192.in-addr.arpa

        3.  PTR Record Query (Запрос записи PTR)
            Затем DNS-резолвер ищет запись PTR в зоне обратного просмотра, которая соответствует предоставленному IP-адресу.

        4.  Response (Ответ)
            Если найден соответствующий PTR, DNS-сервер (резолвер) возвращает полное доменное имя IP-адреса для клиента.

    ++++++++++++++++++++
    + DNS Record Types +
    ++++++++++++++++++++

    DNS имеет много различных типов записей, отвечающих за хранение различной информации.
    Мы должны быть знакомы с ними, особенно при мониторинге трафика DNS.

        -   A (адрес IPv4)
            Эта запись сопоставляет доменное имя с адресом IPv4
        
        -   AAAA (адрес IPv6)
            Эта запись сопоставляет доменное имя с адресом IPv6
        
        -   CNAME (Canonical Name/каноническое имя)
            Эта запись создает псевдоним для доменного имени.
            Также известно как hello.com = world.com
        
        -   MX (Mail Exchange/почтовый обмен)
            Эта запись указывает почтовый сервер, ответственный за получение сообщений электронной почты от имени домена.
        
        -   NS ((Name Server/сервер имен)
            Указывает авторитетные серверы имен для домена.
        
        -   PTR (Pointer/указатель)
            Используется в обратных запросах для сопоставления IP с доменным именем
        
        -   TXT (текст)
            Используется для указания текста, связанного с доменом
        
        -   SOA (Start of Authority/начало полномочий)
            Содержит административную информацию о зоне

=====================================================================
* Подготовка *
**************

Как такового, подготовительного этапа, не существует
Для анализа чаще всего используют любой, подходящий пакетный анализатор
В нашем случае это - Wireshark

В последние годы было замечено, что злоумышленники с расширенными возможностями будут использовать Interplanetary file System (Межпланетную файловую систему) для хранения и извлечения вредоносных файлов.
Поэтому мы всегда должны следить за трафиком DNS и HTTP/HTTPs на URI, например, следующими:

    https://cloudflare-ipfs.com/ipfs/QmS6eyoGjENZTMxM7UdqBk6Z3U3TZPAVeJXdgp9VK4o1Sz

Эти формы атак могут быть исключительно трудно обнаружить, поскольку IPFS изначально работает на основе одноранговой сети. Чтобы узнать больше, мы можем исследовать IPFS.

    Interplanetary File System (IPFS)   -   https://developers.cloudflare.com/web3/ipfs-gateway/concepts/ipfs/

=====================================================================
* Анализ *
**********

	++++++++++++++++++++++++++++++++++++
	+ Finding DNS Enumeration Attempts +
	++++++++++++++++++++++++++++++++++++

    Мы можем заметить значительный объем DNS-трафика с одного хоста, когда начнем просматривать необработанные выходные данные в Wireshark, использую следующий фильтр

        -   dns
    
    *** Особое внимание следует обращать на пакеты, которые завершаются чем-то вроде ANY:
        Это может быть явным указанием на перечисление DNS и, возможно, даже перечисление поддоменов злоумышленником.
    
    +++++++++++++++++++++++++
	+ Finding DNS Tunneling +
	+++++++++++++++++++++++++
    
    С другой стороны, мы можем заметить большое количество TXT (текстовых) записей с одного хоста.
    Это может указывать на туннелирование DNS.
    Подобно туннелированию ICMP, злоумышленники могут и использовали запросы DNS прямого и обратного поиска для выполнения эксфильтрации данных.
    Они делают это, добавляя данные, которые они хотели бы эксфильтровать, как часть поля TXT.

    Однако во многих случаях эти данные могут быть закодированы или зашифрованы
    Мы можем получить это значение из Wireshark, найдя его, и щелкнув правой кнопкой мыши по значению, чтобы указать его для копирования.
    Однако в некоторых случаях злоумышленники могут несколько раз подряд зашифровывать текст, который они пытаются переправить через DNS-туннелирование
    Поэтому нам может потребоваться использовать base64 -d (если соощение зашифрованно в base64) для дешифрации
    
        <user_name>@<host_name>$ echo 'encrypted_text' | base64 -d | base64 -d | base64 -d
    
    Злоумышленники могут проводить DNS-туннелирование по следующим причинам:

        1.  Эксфильтрация данных
            DNS-туннелирование может быть полезно для злоумышленников, пытающихся вывести данные из нашей сети, не будучи пойманными.

        2.  Управление и контроль
            Некоторые вредоносные программы и вредоносные агенты будут использовать DNS-туннелирование на скомпрометированных системах для обратной связи со своими командными и управляющими серверами.
            В частности, мы можем увидеть этот метод использования в ботнетах.

        3.  Обход брандмауэров и прокси-серверов
            DNS-туннелирование позволяет злоумышленникам обходить брандмауэры и веб-прокси, которые отслеживают только трафик HTTP/HTTPs.
            Традиционно DNS-трафику разрешено проходить через границы сети.
            Поэтому важно, чтобы мы отслеживали и контролировали этот трафик.

        4.  Domain Generation Algorithms (Алгоритмы генерации доменов (DGA))
            Некоторые более продвинутые вредоносные программы будут использовать DNS-туннели для обратной связи со своими командными и управляющими серверами, которые используют динамически сгенерированные доменные имена через DGA.
            Это значительно усложняет для нас задачу обнаружения и блокировки этих доменных имен.
    
=====================================================================
* Дополнительные Вопросы *
**************************
