`=====================================================================
* Руководство *
***************

Если использовать машину от HTB, то сперва надо запустить данную комнаду, чтобы скачать и распокавать все необходимые pcap файлы

	<usern_name>@<host_name>$ wget -O file.zip 'https://academy.hackthebox.com/storage/resources/pcap_files.zip' && mkdir tempdir && unzip file.zip -d tempdir && mkdir -p pcaps && mv tempdir/Intermediate_Network_Traffic_Analysis/* pcaps/ && rm -r tempdir file.zip

Удобнее всего просматривать PCAP-files используя Wireshark
Однако, в целях практики и выбработки навыков использования CLI-based tools мы будем использовать такие утилиты как tcpdump

=====================================================================
* Легенда *
***********

Часто мы можем замечать странный трафик на наших веб-серверах.
Необычным явлением может являться то, что один хост генерирует избыточный трафик с HTTP или HTTPs.
Злоумышленники любят злоупотреблять транспортным уровнем много раз, так как приложения, работающие на наших серверах, могут быть уязвимы для различных атак.
Таким образом, нам нужно понимать, как распознавать шаги, которые злоумышленник предпримет для сбора информации, эксплуатации и злоупотребления нашими веб-серверами.

В общем, мы можем обнаружить и идентифицировать попытки фаззинга с помощью следующего:

    -   Избыточный трафик HTTP/HTTPs с одного хоста
    -   Анализ журналов доступа нашего веб-сервера для того же поведения

В первую очередь злоумышленники попытаются фаззировать (т.е. проверка поведения нашего веб-сервера используя множество различных запросов) наш сервер, чтобы собрать информацию, прежде чем пытаться запустить атаку.
У нас уже может быть установлен брандмауэр веб-приложений, чтобы предотвратить это, однако в некоторых случаях мы можем этого не делать, особенно если этот сервер является внутренним.
			
=====================================================================
* Подготовка *
**************

Как такового, подготовительного этапа, не существует
Для анализа чаще всего используют любой, подходящий пакетный анализатор
В нашем случае это - Wireshark

А для предотвращения попыток фаззинга со стороны злоумышленников, можно выполнить следующие действия.

    i)  Настроить конфигурацию виртуального хоста или веб-доступа для возврата предварительно настроенных кодов ответа, чтобы сбить с толку эти сканеры.
    ii) Установить правила, запрещающие потенциально опасным IP-адресам получать доступ к нашему серверу через наш брандмауэр веб-приложений.

=====================================================================
* Анализ *
**********

	+++++++++++++++++++++++++++++
	+ Finding Directory Fuzzing +
	+++++++++++++++++++++++++++++

    Фаззинг каталогов используется злоумышленниками для поиска всех возможных веб-страниц и местоположений в наших веб-приложениях.
    Мы можем обнаружить это во время анализа трафика, ограничив наше представление Wireshark только http-трафиком.

        -   http
    
    Если же мы хотим удалить ответы на запросы, то можем изменить запрос на

        -   http.request

    Фаззинг каталогов довольно просто обнаружить, так как в большинстве случаев он будет показывать следующие признаки

        i)  Хост будет неоднократно пытаться получить доступ к различныс файлам/папкам на нашем веб-сервере, которые не существуют (ответ 404).
        ii) Хост будет отправлять их в быстрой последовательности.

    Мы также всегда можем ссылаться на этот трафик в наших журналах доступа на нашем веб-сервере.
    К примеру, если мы хотим просмотреть логи нашего веб-сервера (допустим - Apache) в ручную, то достаточно использовать комнаду grep

        <user_name>@<host_name>$ cat <log_name>.log | grep "<IP_Address>"

    Или awk

        <user_name>@<host_name>$ cat <log_name>.log | awk '$1 == "<IP_Address>"'

	++++++++++++++++++++++++++++++++++++
	+ Finding Other Fuzzing Techniques +
	++++++++++++++++++++++++++++++++++++

	Однако существуют и другие типы фаззинга, которые злоумышленники могут использовать против наших веб-серверов.
    Некоторые из них могут включать фаззинг динамических или статических элементов наших веб-страниц, таких как поля идентификаторов.
    Или в некоторых других случаях злоумышленник может искать уязвимости IDOR на нашем сайте, особенно если мы обрабатываем парсинг json (изменяя return=max на return=min).

    Чтобы ограничить трафик только одним хостом, мы можем использовать следующий WireShark фильтр:
    
        -   http.request and ((ip.src_host == <suspected IP>) or (ip.dst_host == <suspected IP>))

    Также, мы всегда можем построить общую картину, щелкнув правой кнопкой мыши по любому из этих запросов, перейдя к отслеживанию и отслеживанию HTTP-потока (follow HTTP stream).

    Предположим, мы заметили, что много запросов было отправлено в быстрой последовательности, это будет означать попытку фаззинга,
    Соответственно мы должны провести дополнительные следственные действия против рассматриваемого хоста.
    Однако иногда злоумышленники делают следующее, чтобы предотвратить обнаружение:

        i)  Распределяют эти ответы по более длительному периоду времени
        ii) Отправляют эти ответы с нескольких хостов или исходных адресов.

=====================================================================
* Дополнительные Вопросы *
**************************

    Проверьте файл и введите общее количество запросов «Client Hello»

        http.request || tls.handshake.type == 1 && !(ssdp)