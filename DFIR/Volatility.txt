Volatility — это бесплатный инструмент для криминалистики памяти, разработанный и поддерживаемый Volatility Foundation
Он обычно используется для извлечения цифровых артефактов из образцов энергозависимой памяти (RAM)
Volatility написан на Python и состоит из плагинов и модулей Python, разработанных как способ анализа дампов памяти по принципу «включай и работай».
Доступен для Windows, Linux и Mac OS и написан исключительно на Python.

Методы извлечения выполняются совершенно независимо от исследуемой системы, но обеспечивают видимость состояния системы во время выполнения.
Чтобы начать анализ дампа, вам сначала нужно будет определить тип изображения
После того, как вы отсортируете тип изображения и другие плагины, вы можете начать анализ дампа, используя различные плагины волатильности.

Поскольку Volatility полностью независима от исследуемой системы, это позволяет провести полную сегментацию, но при этом получить полное представление о состоянии системы во время выполнения.
*** Примечание: при чтении сообщений в блогах и статей о Volatility вы можете увидеть упоминание или использование синтаксиса volatility2, весь синтаксис был изменен в volatility3

При загрузке вы можете выбрать использование предварительно упакованного исполняемого файла (файл .whl), который будет работать так же и не требует зависимостей (только Windows)
Или вы можете запустить его напрямую из Python.
Чтобы получить предварительно упакованный исполняемый файл, просто загрузите zip-файл, содержащий приложение, со страницы релизов. https://github.com/volatilityfoundation/volatility3/releases/tag/v1.0.1
Чтобы начать запуск проекта из исходного кода, вам сначала нужно будет загрузить следующие зависимости:

    -   Python 3.5.3 или более позднюю версию
    -   Pefile 2017.8.1 или более позднюю версию. https://pypi.org/project/pefile/
    -   yara-python 3.8.0 или более позднюю версию https://github.com/VirusTotal/yara-python
    -   capstone 3.0.0 или более позднюю версию https://www.capstone-engine.org/download.html

Важно отметить, что для любых файлов памяти Linux или Mac вам нужно будет загрузить файлы символов с Volatility GitHub  -   https://github.com/volatilityfoundation/volatility3#symbol-tables

Команда для скачивания Volatility с Github  -   git clone https://github.com/volatilityfoundation/volatility3.git
Чтобы протестировать установку, запустите файл vol.py с параметром help -   python3 vol.py -h

=====================================================================
* Memory Extraction *
*********************

Извлечение дампа памяти может быть выполнено различными способами, в зависимости от требований вашего расследования.
Ниже перечислены некоторые методы и инструменты, которые можно использовать для извлечения памяти из машины без ОС.

    -   FTK Imager
    -   Redline
    -   DumpIt.exe
    -   win32dd.exe / win64dd.exe
    -   Memoryze
    -   FastDump

При использовании инструмента извлечения на хосте без ОС обычно может потребоваться значительное количество времени (учтите это во время расследования, если время ограничено)

Большинство упомянутых выше инструментов для извлечения памяти выведут файл .raw, за некоторыми исключениями, такими как Redline, который может использовать собственный агент и структуру сеанса.

Для виртуальных машин сбор файла памяти можно легко осуществить, собрав файл виртуальной памяти с диска хост-машины.
Этот файл может меняться в зависимости от используемого гипервизора
Ниже перечислены некоторые файлы виртуальной памяти гипервизора, с которыми вы можете столкнуться.

    -   VMWare - .vmem
    -   Hyper-V - .bin
    -   Parallels - .mem
    -   VirtualBox - .sav (*это только частичный файл памяти)

Соблюдайте осторожность при попытке извлечь или переместить память как из голых, так и из виртуальных машин.

=====================================================================
* Plugins Overview *
********************

Volatility предлагает множество плагинов, которые можно использовать для помощи в ваших возможностях поиска и обнаружения при поиске вредоносных программ или других аномалий в памяти системы.

После перехода на Python 3 структура плагина для Volatility изменилась довольно кардинально.
В предыдущих версиях Volatility вам нужно было бы определить конкретный профиль ОС, точно соответствующий операционной системе и версии сборки хоста, что могло быть трудно найти или использовать с плагином, который мог бы давать ложные срабатывания.
В Volatility3 профили были упразднены, и Volatility автоматически определяет хост и сборку файла памяти.

Структура именования плагинов также изменилась.
В предыдущих версиях Volatility соглашение об именовании было просто именем плагина и было универсальным для всех операционных систем и профилей.
Теперь с Volatility3 вам нужно указать операционную систему перед указанием плагина для использования, например, windows.info против linux.info.
Это связано с тем, что больше нет профилей для различения различных операционных систем для плагинов, поскольку каждая операционная система имеет кардинально разные структуры памяти и операции.
Ниже приведены параметры синтаксиса плагина операционной системы.

    -   .windows
    -   .linux
    -   .mac

С Volatility доступно несколько плагинов, а также сторонние плагины
Так как количество плагинов огромное, то мы рассмотрим лишь небольшую часть плагинов, которые может предложить Volatility.

Чтобы ознакомиться с доступными плагинами, используйте меню справки (~:$ ~:$ python3 <folder\where\volatility\located\in> vol.py -h)
Поскольку Volatility3 в настоящее время находится в активной разработке, список плагинов по сравнению с его аналогом на Python 2 все еще невелик
Однако текущий список по-прежнему позволяет вам выполнять весь необходимый анализ.

    +++++++++++++++++++++++++++++++++++++++
    + Identifying Image Info and Profiles +
    +++++++++++++++++++++++++++++++++++++++

    По умолчанию Volatility поставляется со всеми существующими профилями Windows (Windows XP до Windows 11)
    Профили образов может быть сложно определить, если вы точно не знаете, какая версия и сборка машины была у вас на компьютере, из которого вы извлекли дамп памяти.
    В некоторых случаях вам может быть предоставлен файл памяти без какого-либо другого контекста, и вам придется решать, что делать дальше.
    В этом случае Volatility прикрывает вас и поставляется с плагином   -   imageinfo.
    Этот плагин возьмет предоставленный дамп памяти и назначит ему список наилучших возможных профилей ОС.

    Примечание: imageinfo не всегда верен и может давать разные результаты в зависимости от предоставленного дампа; используйте его с осторожностью и тестируйте несколько профилей из предоставленного списка.

    Если мы все еще хотим получить информацию о том, что запущено на хосте из дампа памяти, мы можем использовать следующие три плагина, которые предоставят информацию о хосте из дампа памяти.

        -   windows.info
        -   linux.info
        -   mac.info. 

    Синтаксис: ~:$ python3 <folder\where\volatility\located\in> vol.py -f <where\dump_file\located\in\file_name.*> windows.info

    +++++++++++++++++++++++++++++++++++++
    + Listing Processes and Connections +
    +++++++++++++++++++++++++++++++++++++

    Пять различных плагинов в Volatility позволяют вам выгружать процессы и сетевые соединения, каждый из которых использует различные методы. 
    
        1)  Самый простой способ перечисления процессов     -   pslist
            Этот плагин получит список процессов из двусвязного списка, который отслеживает процессы в памяти, эквивалентного списку процессов в диспетчере задач.
            Вывод этого плагина будет включать все текущие процессы и завершенные процессы с их временем выхода.

                ~:$ python3 <folder\where\volatility\located\in> vol.py -f <where\dump_file\located\in\file_name.*> windows.pslist

            Некоторые вредоносные программы, как правило, руткиты, в попытке скрыть свои процессы отвязывают себя от списка.
            Отвязав себя от списка, вы больше не увидите их процессы при использовании pslist.
        
        2)  Для борьбы с этим методом уклонения мы можем использовать   -   psscan
            Этот метод перечисления процессов будет находить процессы, находя структуры данных, соответствующие _EPROCESS.
            Хотя этот метод может помочь в противодействии уклонению, он также может вызывать ложные срабатывания.

                ~:$ python3 <folder\where\volatility\located\in> vol.py -f <where\dump_file\located\in\file_name.*> windows.psscan

        3)  Третий плагин процесса      -   pstree
            Он не предлагает никаких других специальных методов для определения уклонения, как два последних плагина
            Однако этот плагин выведет список всех процессов на основе идентификатора их родительского процесса, используя те же методы, что и pslist.
            Это может быть полезно для аналитика, чтобы получить полную историю процессов и того, что могло происходить во время извлечения.

                ~:$ python3 <folder\where\volatility\located\in> vol.py -f <where\dump_file\located\in\file_name.*> windows.pstree

        4)  Используется для идентификации сетевых соединений, присутствующие во время извлечения на хост-машине    -   netstat
            Он попытается идентифицировать все структуры памяти с сетевым соединением.

                ~:$ python3 <folder\where\volatility\located\in> vol.py -f <where\dump_file\located\in\file_name.*> windows.netstat

            Эта команда в текущем состоянии volatility3 может быть очень нестабильной, особенно вокруг старых сборок Windows.
            Чтобы бороться с этим, вы можете использовать другие инструменты, чтобы извлечь файл PCAP из файла памяти, такие как    -   bulk_extractor (https://tools.kali.org/forensics/bulk-extractor)
            В некоторых случаях это предпочтительно в сетевых соединениях, которые вы не можете идентифицировать только из Volatility. 

        5)  Последний плагин, который мы рассмотрим, — dlllist.
            Этот плагин выведет список всех DLL, связанных с процессами во время извлечения.
            Это может быть особенно полезно после того, как вы проведете дополнительный анализ и сможете отфильтровать вывод по определенной DLL, которая может быть индикатором определенного типа вредоносного ПО, которое, по вашему мнению, присутствует в системе.

                ~:$ python3 <folder\where\volatility\located\in> vol.py -f <where\dump_file\located\in\file_name.*> windows.dlllist
    
    +++++++++++++++++++++++++++++++++++++++++++++++++
    + Volatility Hunting and Detection Capabilities +
    +++++++++++++++++++++++++++++++++++++++++++++++++

    Рекомендуется, чтобы у вас было базовое понимание того, как злоумышленники используют методы уклонения и различные методы вредоносного ПО, а также как их искать и обнаруживать, прежде чем переходить к этому разделу.

        i)  malfind     -   является одним из самых полезных при поиске внедрения кода
                            Этот плагин попытается идентифицировать внедренные процессы и их PID вместе со смещенным адресом и представлением зараженной области в шестнадцатеричном, Ascii и Disassembly.
                            Плагин работает путем сканирования кучи и определения процессов, у которых установлен исполняемый бит RWE или RX и/или нет файла, отображенного в память на диске (бесфайловое вредоносное ПО).

                            На основе того, что идентифицирует malfind, внедренная область изменится.
                            Заголовок MZ является индикатором исполняемого файла Windows. Внедренная область также может быть направлена ​​на шелл-код, что требует дальнейшего анализа.

                                ~:$ python3 <folder\where\volatility\located\in> vol.py -f <where\dump_file\located\in\file_name.*> windows.malfind

        ii) arascan     -   предлагает возможность сравнивать файл памяти с правилами YARA.
                            Он будет искать строки, шаблоны и составные правила по набору правил.
                            Вы можете использовать файл YARA в качестве аргумента или перечислить правила в командной строке.

                                ~:$ python3 <folder\where\volatility\located\in> vol.py -f <where\dump_file\located\in\file_name.*> windows.yarascan

    +++++++++++++++++++++++++++++
    + Advanced Memory Forensics +
    +++++++++++++++++++++++++++++

    Расширенная криминалистика памяти может сбить с толку, когда вы начинаете говорить о системных объектах и ​​о том, как вредоносное ПО напрямую взаимодействует с системой, особенно если у вас нет предыдущего опыта охоты на некоторые используемые методы, такие как перехват и манипуляция драйверами.
    При работе с продвинутым противником вы можете столкнуться с вредоносным ПО, в большинстве случаев с руткитами, которые будут использовать очень неприятные меры уклонения, которые потребуют от вас как аналитика погружения в драйверы, мьютексы и перехваченные функции.
    Ряд модулей могут помочь нам в этом путешествии для дальнейшего раскрытия вредоносного ПО, скрывающегося в памяти.

        a)  Первый метод уклонения, который мы будем охотиться, — это hooking (перехват)
            Есть пять методов перехвата, используемых злоумышленниками, описанных ниже:

                -   SSDT Hooks
                -   IRP Hooks
                -   IAT Hooks
                -   EAT Hooks
                -   Inline Hooks

            Мы сосредоточимся только на охоте на перехват SSDT, поскольку это один из самых распространенных методов при работе с уклонением от вредоносного ПО и самый простой плагин для использования с базовыми плагинами волатильности.

            Плагин ssdt будет искать перехваты и выводить результаты.
            Перехваты могут использоваться легитимными приложениями, поэтому вам как аналитику решать, что является злом.
            Вот краткий обзор того, что такое перехват SSDT:
            
                -   SSDT означает System Service Descriptor Table
                -   ядро ​​Windows использует эту таблицу для поиска системных функций.
                    Злоумышленник может подключиться к этой таблице и изменить указатели, чтобы они указывали на местоположение, контролируемое руткитом.
                    Могут быть сотни записей таблицы, которые ssdt выгрузит; затем вам придется проанализировать вывод дальше или сравнить с базовым уровнем.
            
            Предлагается использовать этот плагин после исследования первоначальной компрометации и отработки ее в рамках вашего расследования.

                ~:$ python3 <folder\where\volatility\located\in> vol.py -f <where\dump_file\located\in\file_name.*> windows.ssdt

        b)  Злоумышленники также будут использовать вредоносные файлы драйверов в качестве части своего уклонения.
            Volatility предлагает два плагина для перечисления драйверов.

                MODULES
                    Он выведет список загруженных модулей ядра
                    Это может быть полезно для идентификации активного вредоносного ПО.
                    Однако если вредоносный файл бездействует или скрыт, этот плагин может его пропустить.

                    Этот плагин лучше всего использовать после того, как вы провели дальнейшее исследование и нашли потенциальные индикаторы для использования в качестве входных данных для поиска и фильтрации.

                        ~:$ python3 <folder\where\volatility\located\in> vol.py -f <where\dump_file\located\in\file_name.*> windows.modules

                DRIVERSCAN
                    Он будет сканировать драйверы, присутствующие в системе во время извлечения.
                    Этот плагин может помочь определить файлы драйверов в ядре, которые плагин modules мог пропустить или которые были скрыты.

                    Как и в случае с последним плагином, снова рекомендуется провести предварительное исследование, прежде чем переходить к этому плагину.
                    Также рекомендуется просмотреть плагин modules перед driverscan.

                        ~:$ python3 <folder\where\volatility\located\in> vol.py -f <where\dump_file\located\in\file_name.*> windows.driverscan

                    В большинстве случаев driverscan не выдаст никаких результатов
                    Однако, если вы ничего не найдете с плагином modules, может быть полезно попробовать использовать этот плагин.

            Ниже перечислены и другие плагины, которые могут быть полезны при попытке поиска сложных вредоносных программ в памяти.

                -   modscan
                -   driverirp
                -   callbacks
                -   idt
                -   apihooks
                -   moddump
                -   handles

            Примечание: некоторые из них присутствуют только в Volatility2 или являются частью сторонних плагинов.
            Чтобы получить максимальную отдачу от Volatility, вам может потребоваться перейти на некоторые сторонние или пользовательские плагины.