=====================================================================
* Введение *
************

Volatility — это бесплатный инструмент для криминалистики памяти, разработанный и поддерживаемый Volatility Foundation
Он обычно используется для извлечения цифровых артефактов из образцов энергозависимой памяти (RAM)
Volatility написан на Python и состоит из плагинов и модулей Python, разработанных как способ анализа дампов памяти по принципу «включай и работай».
Доступен для Windows, Linux и Mac OS и написан исключительно на Python.

Методы извлечения выполняются совершенно независимо от исследуемой системы, но обеспечивают видимость состояния системы во время выполнения.
Чтобы начать анализ дампа, вам сначала нужно будет определить тип изображения
После того, как вы отсортируете тип изображения и другие плагины, вы можете начать анализ дампа, используя различные плагины волатильности.

Поскольку Volatility полностью независима от исследуемой системы, это позволяет провести полную сегментацию, но при этом получить полное представление о состоянии системы во время выполнения.
*** Примечание: при чтении сообщений в блогах и статей о Volatility вы можете увидеть упоминание или использование синтаксиса volatility2, весь синтаксис был изменен в volatility3

Вот список основных ресурсов по Volatility	-	https://volatilityfoundation.org/
                                                https://volatilityfoundation.org/the-volatility-framework/
                                                https://volatility3.readthedocs.io/en/latest/index.html
							                    https://medium.com/@careertechnologymiraroad/volatility-978e32316616
							                    https://www.varonis.com/blog/how-to-use-volatility
                                                https://blog.onfvp.com/post/volatility-cheatsheet/
                                                https://www.boozallen.com/insights/cyber/tech/volatility-is-an-essential-dfir-tool-here-s-why.html
							                    https://github.com/volatilityfoundation/volatility
                                                https://github.com/volatilityfoundation/volatility/wiki/Command-Reference
                                                https://github.com/volatilityfoundation/volatility3/releases/tag/v1.0.1                       
		                                                                             
При загрузке вы можете выбрать использование предварительно упакованного исполняемого файла (файл .whl), который будет работать так же и не требует зависимостей (только Windows)
Или вы можете запустить его напрямую из Python.
Чтобы получить предварительно упакованный исполняемый файл, просто загрузите zip-файл, содержащий приложение, со страницы релизов (https://github.com/volatilityfoundation/volatility3/releases/tag/v1.0.1)

Чтобы начать запуск проекта из исходного кода, рекомендуется сначала загрузить следующие зависимости:

    -   Python 3.5.3 или более позднюю версию
    -   Pefile 2017.8.1 или более позднюю версию (https://pypi.org/project/pefile/)
    -   yara-python 3.8.0 или более позднюю версию (https://github.com/VirusTotal/yara-python)
    -   capstone 3.0.0 или более позднюю версию (https://www.capstone-engine.org/download.html)

Важно отметить, что для любых файлов памяти Linux или Mac вам нужно будет загрузить файлы символов с Volatility GitHub  -   https://github.com/volatilityfoundation/volatility3#symbol-tables

Команда для скачивания Volatility с Github  -   git clone https://github.com/volatilityfoundation/volatility3.git

Для просмотра краткой информации по Volatility, а также список доступных модулей, достаточно использовать следующую команду

	<user_name>@<host_name>$ vol.py --help

=====================================================================
* Plugins/Modules Overview (General) *
**************************************

Модули или плагины Volatility — это расширения или надстройки, которые улучшают функциональность Volatility Framework, извлекая определенную информацию или выполняя определенные задачи анализа образов памяти.
Volatility предлагает множество плагинов, которые можно использовать для помощи в ваших возможностях поиска и обнаружения при поиске вредоносных программ или других аномалий в памяти системы.

После перехода на Python 3 структура плагина для Volatility изменилась довольно кардинально.
В предыдущих версиях Volatility вам нужно было бы определить конкретный профиль ОС, точно соответствующий операционной системе и версии сборки хоста, что могло быть трудно найти или использовать с плагином, который мог бы давать ложные срабатывания.
В Volatility3 профили были упразднены, и Volatility автоматически определяет хост и сборку файла памяти.

Структура именования плагинов также изменилась.
В предыдущих версиях Volatility соглашение об именовании было просто именем плагина и было универсальным для всех операционных систем и профилей.
Теперь с Volatility3 вам нужно указать операционную систему перед указанием плагина для использования, например, windows.info против linux.info.
Это связано с тем, что больше нет профилей для различения различных операционных систем для плагинов, поскольку каждая операционная система имеет кардинально разные структуры памяти и операции.
Ниже приведены параметры синтаксиса плагина операционной системы.

    -   .windows
    -   .linux
    -   .mac

С Volatility доступно несколько плагинов, а также сторонние плагины
Так как количество плагинов огромное, то мы рассмотрим лишь небольшую часть плагинов, которые может предложить Volatility.
***	Имя используемого файла - Win7-2515534d.vmem

	-	imageinfo
		определение профиля дампа памяти ОС
		
	-	pslist
		список запущенных процессов.

	-	cmdline
		отображение аргументов командной строки процесса.

	-	netscan
		сканирование сетевых подключений и открытых портов.

	-	malfind
		сканирование потенциально вредоносного кода, внедренного в процессы.

	-	handles
		сканирование открытых дескрипторов.

	-	svcscan
		список служб Windows.

	-	dlllist
		список загруженных DLL (библиотек динамической компоновки) в процессе.

	-	hivelist
		список кустов реестра в памяти

	+++++++++++++++++++++++++++++++++++++++
	+ Identifying the Profile (imageinfo) +
	+++++++++++++++++++++++++++++++++++++++

    Профили образов может быть сложно определить, если вы точно не знаете, какая версия и сборка машины была у вас на компьютере, из которого вы извлекли дамп памяти.
	Профили необходимы для Volatility v2 для правильной интерпретации данных памяти (идентификация профилей была улучшена в v3).
	Чтобы определить профиль, соответствующий операционной системе дампа памяти, мы можем использовать плагин imageinfo следующим образом.

		<user_name>@<host_name>$ vol.py -f /folder/where/MemoryDumps/file/located/in/<file_name>.vmem imageinfo
		Volatility Foundation Volatility Framework 2.6.1
		/usr/local/lib/python2.7/dist-packages/volatility/plugins/community/YingLi/ssh_agent_key.py:12: CryptographyDeprecationWarning: Python 2 is no longer supported by the Python core team. Support for it is now deprecated in cryptography, and will be removed in the next release.
  		from cryptography.hazmat.backends.openssl import backend
		INFO    : volatility.debug    : Determining profile based on KDBG search...
    	Suggested Profile(s) : Win7SP1x64, Win7SP0x64, Win2008R2SP0x64, Win2008R2SP1x64_24000, Win2008R2SP1x64_23418, Win2008R2SP1x64, Win7SP1x64_24000, Win7SP1x64_23418
                    		
		AS Layer1 			        : WindowsAMD64PagedMemory (Kernel AS)
    	AS Layer2 			        : FileAddressSpace (/home/htb-student/MemoryDumps/Win7-2515534d.vmem)
    	PAE type 			        : No PAE
       	DTB 				        : 0x187000L
       	KDBG 				        : 0xf80002be9120L
        Number of Processors 		: 1
     	Image Type (Service Pack) 	: 1
        KPCR for CPU 0 			    : 0xfffff80002beb000L
        KUSER_SHARED_DATA 		    : 0xfffff78000000000L
        Image date and time 		: 2023-06-22 12:34:03 UTC+0000
     	Image local date and time 	: 2023-06-22 18:04:03 +0530

    *** Примечание: imageinfo не всегда верен и может давать разные результаты в зависимости от предоставленного дампа
                    Поэтому используйте его с осторожностью и тестируйте несколько профилей из предоставленного списка.

    Каждая ОС имеет свой информациоонеый плагин/модуль

        -   windows.info
        -   linux.info
        -   mac.info.     

	++++++++++++++++++++++++++++++++++++++++++
	+ Identifying Running Processes (pslist) +
	++++++++++++++++++++++++++++++++++++++++++

    Самый простой способ перечисления процессов     -   pslist
    Этот плагин получит список процессов из двусвязного списка, который отслеживает процессы в памяти, эквивалентного списку процессов в диспетчере задач.

    Давайте проверим, верен ли предлагаемый профиль Win7SP1x64, попробовав вывести список запущенных процессов с помощью плагина pslist.

		<user_name>@<host_name>$ vol.py -f /folder/where/MemoryDumps/file/located/in/<file_name> --profile=Win7SP1x64 pslist
		Volatility Foundation Volatility Framework 2.6.1
		/usr/local/lib/python2.7/dist-packages/volatility/plugins/community/YingLi/ssh_agent_key.py:12: CryptographyDeprecationWarning: Python 2 is no longer supported by the Python core team. Support for it is now deprecated in cryptography, and will be removed in the next release.
  		from cryptography.hazmat.backends.openssl import backend
		Offset(V)          Name                    PID   PPID   Thds     Hnds   Sess  Wow64 Start                          Exit                          
		------------------ -------------------- ------ ------ ------ -------- ------ ------ ------------------------------ ------------------------------
		0xfffffa8000ca8860 System                    4      0     97      446 ------      0 2023-06-22 12:04:39 UTC+0000                                 
		0xfffffa8001a64920 smss.exe                264      4      2       29 ------      0 2023-06-22 12:04:39 UTC+0000                                 
		0xfffffa80028a39a0 csrss.exe               352    344      8      626      0      0 2023-06-22 12:04:40 UTC+0000                                 
		...<SNIP>...                             
		0xfffffa8000eee060 sppsvc.exe             1080    508      4      146      0      0 2023-06-22 12:06:47 UTC+0000                                 
		0xfffffa8000ea6a00 svchost.exe             608    508     15      431      0      0 2023-06-22 12:06:47 UTC+0000                                 
		0xfffffa8001d0f8b0 tasksche.exe           2972   1512      0 --------      1      0 2023-06-22 12:31:13 UTC+0000   2023-06-22 12:31:43 UTC+0000  
		0xfffffa8001d22b00 tasksche.exe           1792   1044      8       82      0      1 2023-06-22 12:31:13 UTC+0000                                 
		0xfffffa8000f2f1c0 audiodg.exe            4048    744      6      128      0      0 2023-06-22 12:33:33 UTC+0000                                 
		0xfffffa8000dbc5a0 cmd.exe                2080   1468      0 --------      0      0 2023-06-22 12:34:03 UTC+0000   2023-06-22 12:34:03 UTC+0000  
		0xfffffa8000f90b00 conhost.exe            3292    352      0 --------      0      0 2023-06-22 12:34:03 UTC+0000   2023-06-22 12:34:03 UTC+0000  
		0xfffffa8000f7b790 ipconfig.exe           2360   2080      0 --------      0      0 2023-06-22 12:34:03 UTC+0000   2023-06-22 12:34:03 UTC+0000

	Следует отметить, что даже если мы укажем другой профиль из предложенного списка (обнаруженного с использованием модуля imageinfo), Volatility все равно может предоставить нам правильный вывод.

    Некоторые вредоносные программы, как правило, руткиты, в попытке скрыть свои процессы отвязывают себя от списка.
    Отвязав себя от списка, вы больше не увидите их процессы при использовании pslist

	+++++++++++++++++++++++++++++++++++++++++++
	+ Identifying Network Artifacts (netscan) +
    +++++++++++++++++++++++++++++++++++++++++++

	Плагин netscan можно использовать для сканирования сетевых артефактов следующим образом.

		<user_name>@<host_name>$ vol.py -f /folder/where/MemoryDumps/file/located/in/<file_name>.vmem --profile=Win7SP1x64 netscan
		Volatility Foundation Volatility Framework 2.6.1
		/usr/local/lib/python2.7/dist-packages/volatility/plugins/community/YingLi/ssh_agent_key.py:12: CryptographyDeprecationWarning: Python 2 is no longer supported by the Python core team. Support for it is now deprecated in cryptography, and will be removed in the next release.
  		from cryptography.hazmat.backends.openssl import backend
		Offset(P)          Proto    Local Address                  Foreign Address      State            Pid      Owner          Created
		0x1a15caa0         UDPv4    0.0.0.0:3702                   *:*                                   1348     svchost.exe    2023-06-22 12:05:10 UTC+0000
		0x1a15caa0         UDPv6    :::3702                        *:*                                   1348     svchost.exe    2023-06-22 12:05:10 UTC+0000
		0x1fd7cac0         TCPv4    0.0.0.0:49155                  0.0.0.0:0            LISTENING        508      services.exe   
		0x1fd7cac0         TCPv6    :::49155                       :::0                 LISTENING        508      services.exe   
		0x3da01a70         UDPv4    0.0.0.0:3702                   *:*                                   1348     svchost.exe    2023-06-22 12:05:10 UTC+0000
		...<SNIP>...    
		0x3e963ad0         TCPv4    127.0.0.1:9050                 0.0.0.0:0            LISTENING        3012     taskhsvc.exe   
		0x3ec4f620         TCPv4    0.0.0.0:49152                  0.0.0.0:0            LISTENING        404      wininit.exe    
		0x3f1fd6f0         TCPv6    :::554                         :::0                 LISTENING        2968     wmpnetwk.exe   
		0x3ec2d010         TCPv4    127.0.0.1:50313                127.0.0.1:50314      ESTABLISHED      -1                      
		0x3ecb1220         TCPv4    127.0.0.1:50314                127.0.0.1:50313      ESTABLISHED      -1                      
		0x3f3ced90         UDPv4    0.0.0.0:3702                   *:*                                   1348     svchost.exe    2023-06-22 12:05:10 UTC+0000
		0x3f2284c0         TCPv4    0.0.0.0:49156                  0.0.0.0:0            LISTENING        516      lsass.exe      
		0x3fcfd930         UDPv4    127.0.0.1:1900                 *:*                                   1348     svchost.exe    2023-06-22 12:06:48 UTC+0000
		0x3fd5fec0         UDPv6    :::5005                        *:*                                   2968     wmpnetwk.exe   2023-06-22 12:06:48 UTC+0000
		0x3fc02ca0         TCPv4    0.0.0.0:554                    0.0.0.0:0            LISTENING        2968     wmpnetwk.exe   
		0x3fca6010         TCPv4    0.0.0.0:2869                   0.0.0.0:0            LISTENING        4        System         
		0x3fca6010         TCPv6    :::2869                        :::0                 LISTENING        4        System         
		0x3fc4f600         TCPv4    127.0.0.1:55206                127.0.0.1:9050       ESTABLISHED      -1                      
		0x3fe604f0         TCPv4    127.0.0.1:9050                 127.0.0.1:55206      ESTABLISHED      -1  

	Чтобы найти структуры _TCPT_OBJECT с помощью сканирования тегов пула, используйте команду connscan.
	Это может найти артефакты из предыдущих соединений, которые были с тех пор завершены, в дополнение к активным.

	+++++++++++++++++++++++++++++++++++++++
	+ Identifying Injected Code (malfind) +
	+++++++++++++++++++++++++++++++++++++++

	Плагин malfind является одним из самых полезных при выявления и извлечения внедренного кода и вредоносных данных из памяти запущенного процесса.

    Этот плагин попытается идентифицировать внедренные процессы и их PID вместе со смещенным адресом и представлением зараженной области в шестнадцатеричном, Ascii и Disassembly.
    Он работает путем сканирования кучи и определения процессов, у которых установлен исполняемый бит RWE или RX и/или нет файла, отображенного в память на диске (бесфайловое вредоносное ПО).
    На основе того, что идентифицирует malfind, внедренная область изменится.
    
    Заголовок MZ является индикатором исполняемого файла Windows.
    Внедренная область также может быть направлена ​​на шелл-код, что требует дальнейшего анализа.

		<user_name>@<host_name>$ vol.py -f /folder/where/MemoryDumps/file/located/in/<file_name>.vmem --profile=Win7SP1x64 malfind --pid=608
		Volatility Foundation Volatility Framework 2.6.1
		/usr/local/lib/python2.7/dist-packages/volatility/plugins/community/YingLi/ssh_agent_key.py:12: CryptographyDeprecationWarning: Python 2 is no longer supported by the Python core team. Support for it is now deprecated in cryptography, and will be removed in the next release.
  		from cryptography.hazmat.backends.openssl import backend
		Process: svchost.exe Pid: 608 Address: 0x12350000
		Vad Tag: VadS Protection: PAGE_EXECUTE_READWRITE
		Flags: CommitCharge: 128, MemCommit: 1, PrivateMemory: 1, Protection: 6

		0x0000000012350000  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................
		0x0000000012350010  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................
		0x0000000012350020  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................
		0x0000000012350030  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................

		0x0000000012350000 0000             ADD [EAX], AL
		0x0000000012350002 0000             ADD [EAX], AL
		0x0000000012350004 0000             ADD [EAX], AL
		0x0000000012350006 0000             ADD [EAX], AL
		0x0000000012350008 0000             ADD [EAX], AL
		0x000000001235000a 0000             ADD [EAX], AL
		...<SNIP>...
		0x0000000012350036 0000             ADD [EAX], AL
		0x0000000012350038 0000             ADD [EAX], AL
		0x000000001235003a 0000             ADD [EAX], AL
		0x000000001235003c 0000             ADD [EAX], AL
		0x000000001235003e 0000             ADD [EAX], AL
	
	+++++++++++++++++++++++++++++++++
	+ Identifying Handles (handles) +
	+++++++++++++++++++++++++++++++++

	Плагин handles в Volatility используется для анализа дескрипторов (ссылок на файлы и объекты), удерживаемых определенным процессом в дампе памяти.
	Понимание дескрипторов, связанных с процессом, может дать ценную информацию во время реагирования на инциденты и расследований цифровой криминалистики, поскольку оно показывает ресурсы и объекты, с которыми взаимодействует процесс.
	Вот как использовать плагин handles.

		<user_name>@<host_name>$ -f /folder/where/MemoryDumps/file/located/in/<file_name>.vmem --profile=Win7SP1x64 handles -p <PID#> --object-type=Key
		Volatility Foundation Volatility Framework 2.6.1
		/usr/local/lib/python2.7/dist-packages/volatility/plugins/community/YingLi/ssh_agent_key.py:12: CryptographyDeprecationWarning: Python 2 is no longer supported by the Python core team. Support for it is now deprecated in cryptography, and will be removed in the next release.
  		from cryptography.hazmat.backends.openssl import backend
		Offset(V)             Pid             Handle             Access Type             Details
		------------------ ------ ------------------ ------------------ ---------------- -------
		0xfffff8a0022f85e0   1792                0x4                0x9 Key              MACHINE\SOFTWARE\MICROSOFT\WINDOWS NT\CURRENTVERSION\IMAGE FILE EXECUTION OPTIONS
		0xfffff8a001e03ad0   1792               0x14                0x9 Key              MACHINE\SOFTWARE\MICROSOFT\WINDOWS NT\CURRENTVERSION\IMAGE FILE EXECUTION OPTIONS
		0xfffff8a0023af9b0   1792               0x20            0x20019 Key              MACHINE\SYSTEM\CONTROLSET001\CONTROL\NLS\SORTING\VERSIONS
		0xfffff8a0023b4820   1792               0x24                0x1 Key              MACHINE\SYSTEM\CONTROLSET001\CONTROL\SESSION MANAGER
		0xfffff8a001b21fa0   1792               0x3c            0xf003f Key              MACHINE
		0xfffff8a0025cf400   1792               0x58                0x1 Key              MACHINE\SYSTEM\CONTROLSET001\CONTROL\NLS\CUSTOMLOCALE
		0xfffff8a002308d50   1792              0x104            0x20019 Key              MACHINE\SOFTWARE\WOW6432NODE\MICROSOFT\WINDOWS\CURRENTVERSION\EXPLORER\FOLDERDESCRIPTIONS\{B4BFCC3A-DB2C-424C-B029-7FE99A87C641}\PROPERTYBAG
		0xfffff8a001e975c0   1792              0x128            0xf003f Key              USER\.DEFAULT
		0xfffff8a001690e80   1792              0x12c                0x1 Key              USER\.DEFAULT\SOFTWARE\MICROSOFT\WINDOWS\CURRENTVERSION\EXPLORER
		0xfffff8a0022951a0   1792              0x134            0x20019 Key              MACHINE\SOFTWARE\WOW6432NODE\MICROSOFT\WINDOWS\CURRENTVERSION\EXPLORER\FOLDERDESCRIPTIONS\{FDD39AD0-238F-46AF-ADB4-6C85480369C7}\PROPERTYBAG
		0xfffff8a002295060   1792              0x138            0x20019 Key              USER\.DEFAULT\CONTROL PANEL\INTERNATIONAL
		0xfffff8a003289540   1792              0x13c            0x20019 Key              MACHINE\SOFTWARE\WOW6432NODE\MICROSOFT\WINDOWS\CURRENTVERSION\EXPLORER\FOLDERDESCRIPTIONS\{ED4824AF-DCE4-45A8-81E2-FC7965083634}\PROPERTYBAG
		0xfffff8a001d2ad30   1792              0x15c                0x8 Key              USER\.DEFAULT\SOFTWARE\MICROSOFT\WINDOWS NT\CURRENTVERSION
		0xfffff8a001f31150   1792              0x160                0x8 Key              MACHINE\SOFTWARE\WOW6432NODE\MICROSOFT\WINDOWS NT\CURRENTVERSION\APPCOMPATFLAGS

	Параметр --object-type= может отличаться в зависимости от ваших нужд (Key, Deirectory, File, Event, Mutant, Process, etc)
	Если вы не знаете какой параметр за что отвечает, то можете спросить гугл
	А чтобы посмотреть все доступные --object-type= параметры для данного процесса или модуля, то можно запустить этуже комнаду, НО без данного параметра
	Тогда вывод будет содержать все возможные параметры с их значениями

	++++++++++++++++++++++++++++++++++++++++++
	+ Identifying Windows Services (svcscan) +
	++++++++++++++++++++++++++++++++++++++++++

	Плагин svcscan в Volatility используется для листинга и анализа служб Windows, запущенных в системе в дампе памяти.
	Вот как использовать плагин svcscan.

		<user_name>@<host_name>$ -f /folder/where/MemoryDumps/file/located/in/<file_name>.vmem --profile=Win7SP1x64 svcscan | more
		Volatility Foundation Volatility Framework 2.6.1
		/usr/local/lib/python2.7/dist-packages/volatility/plugins/community/YingLi/ssh_agent_key.py:12: CryptographyDeprecationWarning: Python 2 is no longer supported by the Python core team. Support for it is now deprecated in cryptography, and will be removed in the next release.
  		from cryptography.hazmat.backends.openssl import backend

		Offset: 0xb755a0
		Order: 71
		Start: SERVICE_AUTO_START
		Process ID: 628
		Service Name: DcomLaunch
		Display Name: DCOM Server Process Launcher
		Service Type: SERVICE_WIN32_SHARE_PROCESS
		Service State: SERVICE_RUNNING
		Binary Path: C:\Windows\system32\svchost.exe -k DcomLaunch
		
		Offset: 0xb754b0
		Order: 70
		Start: SERVICE_DEMAND_START
		Process ID: -
		Service Name: dc21x4vm
		Display Name: dc21x4vm
		Service Type: SERVICE_KERNEL_DRIVER
		Service State: SERVICE_STOPPED
		Binary Path: -
		...<SNIP>...

	+++++++++++++++++++++++++++++++++++++
	+ Identifying Loaded DLLs (dlllist) +
	+++++++++++++++++++++++++++++++++++++

	Плагин dlllist в Volatility используется для составления списка динамически подключаемых библиотек (DLL), загруженных в адресное пространство определенного процесса в дампе памяти.
	Это может быть особенно полезно после того, как вы проведете дополнительный анализ и сможете отфильтровать вывод по определенной DLL, которая может быть индикатором определенного типа вредоносного ПО, которое, по вашему мнению, присутствует в системе.
   
   	    <user_name>@<host_name>$ -f /folder/where/MemoryDumps/file/located/in/<file_name>.vmem --profile=Win7SP1x64 dlllist -p 1512
		Volatility Foundation Volatility Framework 2.6.1
		/usr/local/lib/python2.7/dist-packages/volatility/plugins/community/YingLi/ssh_agent_key.py:12: CryptographyDeprecationWarning: Python 2 is no longer supported by the Python core team. Support for it is now deprecated in cryptography, and will be removed in the next release.
  		from cryptography.hazmat.backends.openssl import backend
		************************************************************************
		Ransomware.wan pid:   1512
		Command line : "C:\Users\Analyst\Desktop\Samples\Ransomware.wannacry.exe"


		Base                             Size          LoadCount LoadTime                       Path
		------------------ ------------------ ------------------ ------------------------------ ----
		0x0000000000400000           0x66b000             0xffff 1970-01-01 00:00:00 UTC+0000   C:\Users\Analyst\Desktop\Samples\Ransomware.wannacry.exe
		0x00000000773f0000           0x19f000             0xffff 1970-01-01 00:00:00 UTC+0000   C:\Windows\SYSTEM32\ntdll.dll
		0x00000000739d0000            0x3f000                0x3 2023-06-22 12:23:42 UTC+0000   C:\Windows\SYSTEM32\wow64.dll
		0x0000000073970000            0x5c000                0x1 2023-06-22 12:23:42 UTC+0000   C:\Windows\SYSTEM32\wow64win.dll
		0x0000000073960000             0x8000                0x1 2023-06-22 12:23:42 UTC+0000   C:\Windows\SYSTEM32\wow64cpu.dll
		0x0000000000400000           0x66b000             0xffff 1970-01-01 00:00:00 UTC+0000   C:\Users\Analyst\Desktop\Samples\Ransomware.wannacry.exe
		0x00000000775b0000           0x180000             0xffff 1970-01-01 00:00:00 UTC+0000   C:\Windows\SysWOW64\ntdll.dll
		0x0000000075b50000           0x110000             0xffff 2023-06-22 12:23:42 UTC+0000   C:\Windows\syswow64\kernel32.dll
		...<SNIP>...
		0x0000000071ac0000            0x17000                0x1 2023-06-22 12:30:20 UTC+0000   C:\Windows\system32\CRYPTSP.dll
		0x000000006d420000            0x3b000                0x1 2023-06-22 12:30:20 UTC+0000   C:\Windows\system32\rsaenh.dll
		0x0000000071ab0000             0xe000                0x1 2023-06-22 12:30:20 UTC+0000   C:\Windows\system32\RpcRtRemote.dll
		0x000000006bae0000             0x8000                0x1 2023-06-22 12:30:20 UTC+0000   C:\Windows\System32\npmproxy.dll
		0x000000006ced0000            0x4c000             0xffff 2023-06-22 12:31:13 UTC+0000   C:\Windows\system32\apphelp.dll

	Если список DLL библиотек большой, а вам нужна конкретная, то вывод можно отобразить через команду grep, коотрая поможет найти нужную библиотеку и процесс еще запустивший
	Однако процесс может содержать много бибилиотек.
	Поэтому лучше дополнить команду grep дополнительным ключем (к примеру -B##, который отобразит не только строку содержащую совпадение, но и указанное количество строк сверху

	++++++++++++++++++++++++++++++++
	+ Identifying Hives (hivelist) +
	++++++++++++++++++++++++++++++++

	Плагин hivelist в Volatility используется для составления списка кустов (файлов реестра), присутствующих в дампе памяти системы Windows.
		
		<user_name>@<host_name>$ -f /folder/where/MemoryDumps/file/located/in/<file_name>.vmem --profile=Win7SP1x64 hivelist
		Volatility Foundation Volatility Framework 2.6.1
		/usr/local/lib/python2.7/dist-packages/volatility/plugins/community/YingLi/ssh_agent_key.py:12: CryptographyDeprecationWarning: Python 2 is no longer supported by the Python core team. Support for it is now deprecated in cryptography, and will be removed in the next release.
  		from cryptography.hazmat.backends.openssl import backend
		Virtual            Physical           Name
		------------------ ------------------ ----
		0xfffff8a001710010 0x000000002c2e4010 \??\C:\Users\Analyst\AppData\Local\Microsoft\Windows\UsrClass.dat
		0xfffff8a001d4b410 0x000000001651f410 \??\C:\System Volume Information\Syscache.hve
		0xfffff8a00000f010 0x0000000026de8010 [no name]
		0xfffff8a000024010 0x00000000273f3010 \REGISTRY\MACHINE\SYSTEM
		0xfffff8a000058010 0x0000000026727010 \REGISTRY\MACHINE\HARDWARE
		0xfffff8a0000f7410 0x0000000019824410 \SystemRoot\System32\Config\DEFAULT
		0xfffff8a000844010 0x000000001a979010 \Device\HarddiskVolume1\Boot\BCD
		0xfffff8a0009d6010 0x000000001998d010 \SystemRoot\System32\Config\SOFTWARE
		0xfffff8a000e0a010 0x000000000724e010 \SystemRoot\System32\Config\SAM
		0xfffff8a000e36010 0x0000000012f0e010 \SystemRoot\System32\Config\SECURITY
		0xfffff8a000f7e010 0x0000000012f7b010 \??\C:\Windows\ServiceProfiles\NetworkService\NTUSER.DAT
		0xfffff8a00100c410 0x0000000006de7410 \??\C:\Windows\ServiceProfiles\LocalService\NTUSER.DAT
		0xfffff8a0016a8010 0x000000002aecd010 \??\C:\Users\Analyst\ntuser.dat

    Помимо плагинов/модулей перечисленных выше, я бы хотел указать еще несколько, наиболее часто используемых
    Синтаксис применения аналогичен с опысанными выше
    

        .drivermodule       Определяет, были ли скрыты загруженные драйверы руткитом
        .filescan           Сканирует на наличие файловых объектов, присутствующих в определенном образе памяти
        .getsids            Печать идентификаторов безопасности, владеющих каждым процессом
        .netstat            Используется для идентификации сетевых соединений, присутствующие во время извлечения на хост-машине
        .mftscan            Сканирует на наличие альтернативного потока данных
        .psscan             Этот метод перечисления процессов будет находить процессы, находя структуры данных, соответствующие _EPROCESS
        .pstree             Выведет (в дереве) список всех процессов на основе идентификатора их родительского процесса, используя те же методы, что и pslist
        .yarascan           Будет искать строки, шаблоны и составные правила по набору правил и сравнивать файл памяти с правилами YARA

=====================================================================
* Plugins/Modules for Advanced Memory Forensics *
*************************************************

Расширенная криминалистика памяти может сбить с толку, когда вы начинаете говорить о системных объектах и ​​о том, как вредоносное ПО напрямую взаимодействует с системой, особенно если у вас нет предыдущего опыта охоты на некоторые используемые методы, такие как перехват и манипуляция драйверами.
При работе с продвинутым противником вы можете столкнуться с вредоносным ПО, в большинстве случаев с руткитами, которые будут использовать очень неприятные меры уклонения, которые потребуют от вас как аналитика погружения в драйверы, мьютексы и перехваченные функции.
Ряд модулей могут помочь нам в этом путешествии для дальнейшего раскрытия вредоносного ПО, скрывающегося в памяти.

    a)  SSDT
        Первый метод уклонения, на который мы будем охотиться, — это hooking (перехват)
        Есть пять методов перехвата, используемых злоумышленниками, описанных ниже:

            -   SSDT Hooks
            -   IRP Hooks
            -   IAT Hooks
            -   EAT Hooks
            -   Inline Hooks

        Мы сосредоточимся только на охоте на перехват SSDT, поскольку это один из самых распространенных методов при работе с уклонением от вредоносного ПО и самый простой плагин для использования с базовыми плагинами волатильности.

        Плагин ssdt будет искать перехваты и выводить результаты.
        Перехваты могут использоваться легитимными приложениями, поэтому вам как аналитику решать, что является злом.
        Вот краткий обзор того, что такое перехват SSDT:
            
            -   SSDT означает System Service Descriptor Table
            -   ядро ​​Windows использует эту таблицу для поиска системных функций.
                Злоумышленник может подключиться к этой таблице и изменить указатели, чтобы они указывали на местоположение, контролируемое руткитом.
                Могут быть сотни записей таблицы, которые ssdt выгрузит; затем вам придется проанализировать вывод дальше или сравнить с базовым уровнем.
            
        Предлагается использовать этот плагин после исследования первоначальной компрометации и отработки ее в рамках вашего расследования.

            <user_name>@<host_name>$ python3 <folder\where\volatility\located\in> vol.py -f <where\dump_file\located\in\file_name.*> windows.ssdt

    b)  Modules
        Злоумышленники также будут использовать вредоносные файлы драйверов в качестве части своего уклонения.
        Modules - это один из двуз плагина, который предлагает Volatility для перечисления драйверов.

        Он выведет список загруженных модулей ядра ('то может быть полезно для идентификации активного вредоносного ПО)
        Однако если вредоносный файл бездействует или скрыт, этот плагин может его пропустить.
        Этот плагин лучше всего использовать после того, как вы провели дальнейшее исследование и нашли потенциальные индикаторы для использования в качестве входных данных для поиска и фильтрации.

            <user_name>@<host_name>$ python3 <folder\where\volatility\located\in> vol.py -f <where\dump_file\located\in\file_name.*> windows.modules

    c)  Drivescan
        Этот плагин будет сканировать драйверы, присутствующие в системе во время извлечения.
        Он может помочь определить файлы драйверов в ядре, которые плагин modules мог пропустить или которые были скрыты.

        Как и в случае с плагином modules, сперва рекомендуется провести предварительное исследование, прежде чем переходить к этому плагину.
        Также рекомендуется просмотреть плагин modules перед driverscan.

            <user_name>@<host_name>$ python3 <folder\where\volatility\located\in> vol.py -f <where\dump_file\located\in\file_name.*> windows.driverscan

        В большинстве случаев driverscan не выдаст никаких результатов
        Однако, если вы ничего не найдете с плагином modules, может быть полезно попробовать использовать этот плагин.

        Ниже перечислены и другие плагины, которые могут быть полезны при попытке поиска сложных вредоносных программ в памяти.

            -   modscan
            -   driverirp
            -   callbacks
            -   idt
            -   apihooks
            -   moddump
            -   handles

        *** Примечание: некоторые из них присутствуют только в Volatility2 или являются частью сторонних плагинов.
                        Чтобы получить максимальную отдачу от Volatility, вам может потребоваться перейти на некоторые сторонние или пользовательские плагины.