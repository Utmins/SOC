=====================================================================
* General *
***********

Одним из лучших, если не лучшим, быстрым решением для анализа и извлечения артефактов является KAPE (Kroll Artifact Parser and Extractor).
KAPE — это мощный инструмент в области цифровой криминалистики и реагирования на инциденты.
Он был создан для помощи экспертам-криминалистам и следователям, KAPE облегчает сбор и анализ цифровых доказательств из систем на базе Windows.
KAPE славится своими комплексными функциями сбора, адаптивностью и интуитивно понятным интерфейсом.

Это инструмент, может значительно сократить время, необходимое для реагирования на инцидент, предоставляя артефакты цифровой экспертизы из работающей системы или устройства хранения данных намного раньше, чем завершится процесс создания образа.

Интерент ресурсы:

	https://www.kroll.com/en/services/cyber-risk/incident-response-litigation-support/kroll-artifact-parser-extractor-kape
	https://ericzimmerman.github.io/KapeDocs/#!index.md
	https://github.com/EricZimmerman/KapeFiles
	https://motasemhamdan.medium.com/computer-forensics-tools-kroll-artifact-parser-and-extractor-tryhackme-kape-cc617f03f188

KAPE служит двум основным целям:

    1)  собирать файлы
    2)  обрабатывать собранные файлы в соответствии с предоставленными параметрами.
    
Для достижения этих целей KAPE использует концепцию целей и модулей.
Цели можно определить как артефакты цифровой экспертизы, которые необходимо собрать.
Модули — это программы, которые обрабатывают собранные артефакты и извлекают из них информацию.

Эти элементы направляют инструмент при обработке данных и извлечении криминалистических артефактов.
Когда мы передаем источник в KAPE, он дублирует определенные криминалистические файлы в указанный выходной каталог, сохраняя при этом метаданные каждого файла.		
На схеме ниже показан операционный поток KAPE.

-----------------		-----------------		-----------------		-----------------		-----------------
|     Source	|------>|      KAPE		|------>|  Destination	|------>|      KAPE		|------>| Module Output	|
-----------------		-----------------		-----------------		-----------------		-----------------
- Live System			- Target Options		- Files from Source		- Module Options		- Programs run 
- Mounted image			are copied here				against
- F-Response										Destinations files

KAPE расширяем и легко настраивается.
По сути, двоичный файл KAPE собирает файлы и обрабатывает их в соответствии с предоставленной конфигурацией.

Во время Сбор файлов (целей) KAPE помещает файлы в очередь и распределяет их в два прохода.

    -   На первом проходе он копирует файлы, которые может.
        Это работает для файлов, которые ОС не заблокировала.
        Остальные файлы передаются во вторичную очередь.
    
    -   Вторичная очередь обрабатывается с использованием другой техники, которая использует необработанные чтения с диска для обхода блокировок ОС и копирования файлов.
        Скопированные файлы сохраняются с исходными временными метками и метаданными и хранятся в аналогичной структуре каталогов.

После сбора данных KAPE может обрабатывать их с помощью модулей.
Модули могут быть независимыми двоичными файлами, которые работают с собранными данными и обрабатывают их для извлечения информации. 
Например, KAPE соберет и скопирует файл Prefetch в наше целевое место назначения во время целевого сбора.
Запуск модуля Prefetch Parser (PECmd) на этой цели извлечет файл предварительной выборки и сохранит его в файле CSV.

KAPE не требует установки.
Он портативен и может использоваться из сетевых расположений или USB-накопителей.
Его достаточно скачать с официального сайта и распаковать архив в любую нужную Вам папку - https://www.kroll.com/en-gb/services/cyber-risk/incident-response-litigation-support/kroll-artifact-parser-extractor-kape
Архив (обычно) сожержит следующий набор файлов/папок:

    -   Documentation (folder)
    -   Modules (folder)
    -   Targets 
        Эта папка, содержит набор файлов-артефактов (*.tkape)
        Файл TKAPE содержит информацию об артефакте, который мы хотим собрать, такую ​​как путь, категория и маски файлов для сбора
        А также место, куда должны будут скопированы найденные результаты
    -   ChangeLog.txt
    -   Get-KAPEUpdate.ps1 (это скрипт Powershell, который проверяет и загружает обновления)
    -   gkape.exe
    -   kape.exe
    *   gkape.settings (файл, который хранит настройки по умолчанию для GUI-версии. может и не быть в архиве)

Выходной каталог KAPE содержит плоды сбора и обработки артефактов.
Точное содержимое этого каталога может отличаться в зависимости от выбранных артефактов и установленных конфигураций.
Среди собранных данные мы можем обнаружить файл $MFT, а также каталоги Users и Windows.
Стоит отметить, что KAPE также может собрать журналы событий Windows, которые находятся в подпапках каталога Windows.

=====================================================================
* TARGET Options *
******************

В лексиконе KAPE, Targets — это артефакты, которые необходимо собрать из системы или образа и скопировать в указанное нами место назначения.
Например, как мы знаем, Windows Prefetch — это криминалистический артефакт доказывающий выполнения, чтобы мы могли создать для него Target.
Аналогично, мы также можем создавать Target для ульев реестра. 
Иначе говоря, Targets копируют файлы из одного места в другое.

Целевые файлы KAPE имеют расширение .tkape и находятся в каталоге <path to kape>\KAPE\Targets.
Например, целевой RegistryHivesSystem.tkape указывает местоположения и маски файлов, связанные с системными кустами реестра.
В этой целевой конфигурации RegistryHivesSystem.tkape содержит информацию для сбора файлов с маской файла SAM.LOG* из каталога C:\Windows\System32\config.

Папка Targets KAPE, помимо основных направлений поиска (папки с характерными названиями) содержит еще и 4 файла ( два .template и 2 .guide)
Последние четыре файла внизу — это руководства и шаблоны для создания собственных целей и составных целей.

Папка с характерным направлением (к примеру Windows) содержит файлы-сборщики
Эти файлы говорят, какая информация будет собрана и куда помещен результат

    ++++++++++++++++++++
    + Compound Targets +
    ++++++++++++++++++++

	KAPE также предлагает Compound Targets, которые по сути являются объединениями нескольких целей.
	Эта функция ускоряет процесс сбора, собирая несколько файлов, определенных для различных целей, за один проход.
	Файл KapeTriage каталога Compound предоставляет обзор содержимого этой составной цели.
    Это цели, которые являются составными частями нескольких других целей.
    
    Как упоминалось ранее, KAPE часто используется для быстрого сбора и анализа сортировки.
    Цель KAPE не будет достигнута, если нам придется собирать каждый артефакт по отдельности.
    Поэтому составные цели помогают нам собирать несколько целей, давая одну команду.
    Примеры составных целей включают !BasicCollection, !SANS_triage и KAPEtriage.
    Мы можем просматривать составные цели по пути KAPE\Targets\Compound.
    
    +++++++++++++
    + !Disabled +
    +++++++++++++

    Этот каталог содержит цели, которые вы хотите сохранить в экземпляре KAPE, но не хотите, чтобы они отображались в списке активных целей.

    ++++++++++
    + !Local +
    ++++++++++

    Если вы создали некоторые цели, которые вы не хотите синхронизировать с репозиторием KAPE Github, вы можете поместить их в этот каталог.
    Это могут быть цели, специфичные для вашей среды.
    Аналогично, все, чего нет в репозитории Github, когда мы обновляем KAPE, будет перемещено в каталог !Local.

=====================================================================
* MODULE Options *
******************

Модули, в лексиконе KAPE, запускают определенные инструменты для предоставленного набора файлов.
Их цель — не копировать файлы из одного места в другое, а скорее запустить некоторую команду и сохранить вывод.
Обычно вывод имеет форму файлов CSV или TXT.

Аналогично TARGETS, в папке Modules мы видим .guide и .templates для создания модулей и составных модулей.
Мы также видим каталоги !Disabled, !Local и Compound, которые похожи на те, что мы видели в TARGETS.

Файлы-модули имеют ращирение .mkape
Обратите внимание, что файл MKAPE сообщает KAPE об:

    -   исполняемом файле, который должен быть запущен
    -   параметрах командной строки исполняемого файла
    -   формате экспорта выходных данных
    -   и имени файла для экспорта.

Но что, если исполняемый файл, который мы хотим запустить, отсутствует в системе? Это приводит нас к каталогу bin

    +++++++
    + BIN +
    +++++++

    Каталог BIN - это шлавное отличего MODULES от TARGETS.

    Ог содержит исполняемые файлы, которые мы хотим запустить в системе, но изначально не присутствуют в большинстве систем.
    KAPE будет запускать исполняемые файлы либо из каталога bin, либо из полного пути.
    Примером файлов, которые следует хранить в каталоге bin, являются инструменты Эрика Циммермана, которые, как правило, отсутствуют в системе Windows.

=====================================================================
* KAPE User Interface *
***********************

    +++++++
    + CLI +
    +++++++

    Хотя KAPE имеет вариант с графическим интерфейсом, но в основном является инструментом командной строки.
    Поэтому важно знать, как использовать KAPE через командную строку, чтобы в полной мере использовать его.

    Для получения списка всех различных переключателей, которые можно использовать с KAPE, откройте CMD или PowerShell (от имени администратора), перейдите по пути, где находится двоичный файл KAPE, и введите kape.exe.
    Основными и часто используемыми являются следующие преключатели:

        -   tsource / target / tdestИз  -   необходимы при сборе целей
        -   module / mdest              -   применяются, при обработке файлов с использованием модулей.
    
    Остальные переключатели являются необязательными в соответствии с требованиями сбора.

    В качестве примера, давайте создадим команду для сбора данных сортировки с помощью KapeTriage Compound Target и обработаем их с помощью !EZParser Compound Module.
    Поскольку мы не используем версию с графическим интерфейсом, мы начнем с ввода:

        kape.exe --tsource C: --target KapeTriage --tdest C:\Users\thm-4n6\Desktop\Target --mdest C:\Users\thm-4n6\Desktop\module --module !EZParser

            -   kape.exe        -   запускает программу
            -   --tsource       -   указываем источник цели (в нашем примере это - C:)
            -   --target        -   данный флаг будет использоваться для выбора цели, т.е. какие именно артефакты должны быть собраны (в нашем примере это - KapeTriage)

                *** Если мы хотим очистить место назначения Target, мы можем добавить --tflush

            -   --tdest         -   используется для назначения цели (в нашем примере это - C:\Users\thm-4n6\Desktop\Target)

                *** При использование только указаных выше флагов, команда соберет данные сортировки, определенные в KapeTriage Target, и сохранит их в указанном месте назначения.
                    Однако она не будет обрабатывать их или выполнять какие-либо другие действия с данными.
                
            -   --mdest         -   используется для назначения модуля (в нашем примере это - C:\Users\thm-4n6\Desktop\module)
                
                *** Если бы мы использовали источник Module, мы бы использовали флаг (--msource) аналогично флагу (--tsource).
                    Но в этом случае давайте используем место назначения Target в качестве источника Module.
                    Сделав это, нам не нужно будет добавлять его явно, и мы можем перейти к добавлению назначения модуля с помощью флага --mdest
            
            -   --module        -   указывает какой именно модуль будет использоваться для обработки (в нашем примере это - !EZParser)
    
        //////////////////
        /// BATCH Mode ///
        //////////////////

        KAPE также может быть запущен в пакетном режиме (т.н. Batch Mode).
        Это означает, что мы можем предоставить список команд для запуска KAPE в файле с именем _kape.cli.
        Затем мы сохраняем этот файл в каталоге, содержащем двоичный файл KAPE.
        Когда kape.exe запускается от имени администратора, он проверяет, есть ли в каталоге файл _kape.cli.
        Если да, он выполняет команды, указанные в файле cli.
        
        Этот режим можно использовать, если вам нужно, чтобы кто-то запустил KAPE для вас
        Тогда вы сперва сохраняете все команды в одной строке, и все, что вам нужно, это чтобы человек щелкнул правой кнопкой мыши и запустил kape.exe от имени администратора.
        
        Например, если нам нужно выполнить ту же задачу, что и ранее, но используя пакетный режим, то нам нужно будет создать файл _kape.cli со следующим содержимым:

            --tsource C: --target KapeTriage --tdest C:\Users\thm-4n6\Desktop\Target --mdest C:\Users\thm-4n6\Desktop\module --module !EZParser

        Когда мы запустим kape.exe, он выполнит те же задачи, что и при запуске его через CLI выше.
    
    +++++++
    + GUI +
    +++++++

    Графический интрефейс значительно отличается от командной версии и не только визуализацией
    
    Во-первых, сразу после загрузкт пограммы, вы можете видеть, что рабочая область поделена на две части
    
        -   Use Target Options
        -   Use Module Options
    
    Во-вторых, изначально все опции отключены.
    И чтобы нам включить нужную часть рабочего окна, необходимо спрева поставить галочку в соотвествующей опции (Target или Module)
    
    После активации, действуем как и раньше - по порядку
    
        1)      Если мы хотим провести экспертизу на той же машине, на которой запущен KAPE, мы укажем C:\ (для Target Source)
        2)      Мы можем выбрать целевой пункт назначения (Target Destination) по нашему выбору.
                Все файлы сортировки будут скопированы в целевой пункт назначения, который мы укажем.
        2.1)    Здесь флажок Flush удалит все содержимое целевого назначения, поэтому нам нужно быть осторожными при его использовании.
                Мы отключили флажок Flush, чтобы он не удалял данные, уже имеющиеся в каталогах.
        2.2)    Add %d добавит информацию о дате к имени каталога, в котором сохраняются собранные данные.
        2.3)    Add %m добавит информацию о машине к целевому каталогу назначения.
        3)      Мы можем выбрать желаемый Target из списка.
                Панель поиска помогает нам быстро находить имена желаемых Target.
        4)      Мы можем выбрать, хотим ли мы обрабатывать теневые копии томов, включив Process VSCs.
        4.1)    Мы можем установить флажок Transfer, если мы хотим передавать собранные артефакты через сервер SFTP или контейнер S3.
        4.2)    Для передачи файлы должны быть заключены в Container, который может быть Zip, VHD или VHDX.
        4.3)    Аналогично мы можем предоставить SHA-1 Exclusions, и KAPE не будет копировать исключенные файлы. 
        4.4)    При заключении в контейнер нам нужно будет указать Base Name, которое будет использоваться для всех созданных файлов.
                Это не требуется, если мы не передаем файлы или не заключаем их в контейнер
        5)      Более опытные пользователи могут воспользоваться областью Target Variables для более тонкой настрокой фильтрации и посика

        ***     На вкладке Current command line мы можем видеть, как добавляются или удаляются параметры командной строки при настройке пользовательского интерфейса.
                Это окно будет показывать больше параметров в командной строке по мере добавления параметров.

                Далее переходим к вкладке Module
        
        6)      При использовании как Target, так и Module Options предоставление Module Source не требуется.
                Выбранные модули будут использовать Target destination в качестве источника.
        7)      Остальные параметры для Модулей аналогичны параметрам для Targets
