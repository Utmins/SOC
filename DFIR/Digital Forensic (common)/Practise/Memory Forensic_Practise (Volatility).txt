=====================================================================
* Searching for Suspicious Activity *
*************************************

После того, как мы выяснили первоначально-необходимыую информацию о цели, можно попробоватьидентифицировать любую подозрительную активность в дампе памяти.

Подозрительная активность относится к техническим аномалиям, которые могут присутствовать в системе, таким как неожиданные процессы, необычные сетевые подключения или изменения реестра.
Эти действия часто сигнализируют о потенциальных угрозах безопасности, таких как атаки вредоносного ПО или утечки данных.

Начать поиск можно с любой оласти дампа
Мы же начнем с наблюдения за любой потенциальной сетевой активностью.
Для этого мы используем плагин windows.netstat, чтобы увидеть, есть ли интересное или необычное подключение.
На этом этапе следует искать подключения удаленного доступа или доступ к подозрительным сайтам.
Как правило такие соединения имеют статус   -   ESTABLISHED (но не факт, так что проверять сетевые адреса тоже может понадобиться)

    <user_name>@<host_name>$ vol -f memdump.mem windows.netstat
            Volatility 3 Framework 2.5.2
            Progress:  100.00PDB scanning finished                        
            
            Offset          Proto   LocalAddr           LocalPort       ForeignAddr         ForeignPort     State           PID     Owner               Created

            0xe50ed9170ac0  TCPv4   192.168.182.139     49723           192.16.49.85        80              CLOSE_WAIT      4780    SearchApp.exe       2024-02-24 22:48:49.000000 
            0xe50ed8a4ca20  TCPv4   192.168.182.139     49814           52.142.223.178      443             SYN_SENT        368     svchost.exe         2024-02-24 22:52:43.000000 
            0xe50ed9275a20  TCPv4   192.168.182.139     3389            192.168.182.150     49253           ESTABLISHED     744     svchost.exe         2024-02-24 22:47:52.000000 
            0xe50ed9df3a20  TCPv4   192.168.182.139     49745           13.107.213.254      443             CLOSE_WAIT      4780    SearchApp.exe       2024-02-24 22:50:42.000000 
            0xe50ed8c52a20  TCPv4   192.168.182.139     49719           23.222.237.202      443             CLOSE_WAIT      4780    SearchApp.exe       2024-02-24 22:48:47.000000 
            0xe50ed9427a20  TCPv4   192.168.182.139     49694           20.7.1.246          443             ESTABLISHED     368     svchost.exe         2024-02-24 22:47:54.000000 
            0xe50ed83ea4d0  TCPv4   192.168.182.139     49743           23.222.237.203      443             CLOSE_WAIT      4780    SearchApp.exe       2024-02-24 22:50:39.000000 
            0xe50edac57a20  TCPv4   192.168.182.139     49712           152.199.55.200      443             CLOSE_WAIT      4780    SearchApp.exe       2024-02-24 22:48:06.000000 
            0xe50ed9508a20  TCPv4   192.168.182.139     49744           23.222.237.203      443             CLOSE_WAIT      4780    SearchApp.exe       2024-02-24 22:50:39.000000 

Как мы можем наблюдать установленное соединение на порту 3389 с IP 192.168.182.139 с временной меткой 2024-02-24 22:47:52.00
Это может указывать на первоначальный доступ злоумышленника.

Теперь, когда у нас есть информация о сети, давайте рассмотрим процессы.
Плагин для изменчивости, который мы можем использовать, — это windows.pstree, который отобразит дерево процесса, запущенного в ОС.

    <user_name>@<host_name>$ vol -f memdump.mem windows.pstree
            Volatility 3 Framework 2.5.2
            Progress:  100.00PDB scanning finished                        
            
            PID         PPID    ImageFileName       Offset(V)           Threads         Handles     SessionId   Wow64       CreateTime                      ExitTime

            4           0       System              0xe50ed3687040      150             -           N/A         False       2024-02-24 22:47:35.000000      N/A
            * 312       4       smss.exe            0xe50ed68b0040      2               -           N/A         False       2024-02-24 22:47:35.000000      N/A
            * 600       4       MemCompression      0xe50ed379e280      50              -           N/A         False       2024-02-24 22:47:36.000000      N/A
            * 92        4       Registry            0xe50ed36ed080      4               -           N/A         False       2024-02-24 22:47:31.000000      N/A
            424         400     csrss.exe           0xe50ed67d7140      9               -           0           False       2024-02-24 22:47:35.000000      N/A
            500         400     wininit.exe         0xe50ed7366080      2               -           0           False       2024-02-24 22:47:35.000000      N/A
            * 664       500     lsass.exe           0xe50ed7360080      8               -           0           False       2024-02-24 22:47:35.000000      N/A
            * 776       500     fontdrvhost.ex      0xe50ed7c69140      6               -           0           False       2024-02-24 22:47:35.000000      N/A
            * 636       500     services.exe        0xe50ed73d3080      6               -           0           False       2024-02-24 22:47:35.000000      N/A
            ** 896      636     svchost.exe         0xe50ed7d112c0      9               -           0           False       2024-02-24 22:47:36.000000      N/A
            ** 1924     636     svchost.exe         0xe50ed73ab2c0      5               -           0           False       2024-02-24 22:47:36.000000      N/A
            ** 3464     636     svchost.exe         0xe50ed88e3080      7               -           1           False       2024-02-24 22:47:39.000000      N/A
            ** 7312     636     SecurityHealth      0xe50ed9af1280      10              -           0           False       2024-02-24 22:47:56.000000      N/A
            ** 2964     636     dllhost.exe         0xe50ed858d280      14              -           0           False       2024-02-24 22:47:37.000000      N/A
            ** 3348     636     svchost.exe         0xe50ed8b722c0      6               -           0           False       2024-02-24 22:47:39.000000      N/A
            ** 7060     636     WUDFHost.exe        0xe50ed9ad41c0      9               -           0           False       2024-02-24 22:47:53.000000      N/A
            ** 792      636     svchost.exe         0xe50ed7c85240      13              -           0           False       2024-02-24 22:47:35.000000      N/A
            **** 1648   7960    critical_updat      0xe50ed94c1080      5               -           1           False       2024-02-24 22:51:50.000000      N/A
            ***** 1612  1648    updater.exe         0xe50edab53080      6               -           1           False       2024-02-24 22:51:50.000000      N/A

Как мы можем видеть из вышеприведенного вывода, команда предоставляет нам информацию о процессах, иерархически запущенных в системе, указывая нам процесс и соответствующий ему родительский процесс.
В этом случае Services.exe является родительским процессом dllhost.exe

Но как мы можем идентифицировать подозрительный процесс?
Один из наиболее распространенных способов — проверить имя процесса
Cубъекты угроз обычно используют имена, чтобы попытаться замаскировать выполнение.
Один из способов сделать это — проверить, что этот процесс обычно не присутствует (гугл в помощь)

Учитывая вышеизложенное и снова взглянув на вывод, мы можем наблюдать процесс с усеченным именем critical_updat.
Этот процесс не выглядит как часть системы, и при детальном рассмотрении он является родительским процессом updater.exe, который также не указан как часть процесса ОС Windows.
Отлично. Мы идентифицируем возможный вредоносный процесс и должны отметить информацию, такую ​​как временная метка, PID, PPID и смещение памяти.

Используя собранную нами информацию, мы можем исследовать процесс critical_updat, который мы идентифицировали и у которого есть дочерний процесс, называемый updater.
Давайте более подробно рассмотрим дочерний процесс.

Начнем с того, что посмотрим, где на диске он был сохранен
Для этого мы можем использовать плагин windows.filescan, который позволит нам изучить файлы, к которым был получен доступ и которые хранятся в дампе памяти.
Этот вывод довольно большой, поэтому для лучшего доступа к данным мы будем использовать символ > в bash, чтобы перенаправить вывод в файл, в данном случае filescan_out.

    <user_name>@<host_name>$ vol -f memdump.mem windows.filescan > filescan_out

После выполнения команды мы можем проверить данные с помощью cat и отфильтровать с помощью команды grep, как показано ниже.

    <user_name>@<host_name>$ cat filescan_out | grep updater
            0xe50ed736e8a0\Users\user01\Documents\updater.exe216
            0xe50ed846fc60\Program Files (x86)\Microsoft\EdgeUpdate\1.3.185.17\msedgeupdateres_en.dll216
            0xe50ed8482d10\Program Files (x86)\Microsoft\EdgeUpdate\1.3.185.17\msedgeupdateres_en.dll216

Выше мы можем заметить, что файлы были сохранены в каталоге \Users\user01\Documents\updater.exe или C:\Users\user01\Documents\updater.exe

Если мы хотим получить более подробную информацию, например, когда файл был доступен или изменен, мы можем использовать плагин windows.mftscan.
MFTScan, вывод которого также довольно большой, поэтому мы перенаправим вывод в файл mftscan_out, как показано ниже.

    <user_name>@<host_name>$ vol -f memdump.mem windows.mftscan.MFTScan > mftscan_out

Затем мы можем снова использовать команду grep, чтобы проанализировать файл на наличие updater.exe.

    <user_name>@<host_name>$ cat mftscan_out | grep updater
            * 0xd389c63ce528FILE1114172FileArchiveFILE_NAME2024-02-24 22:51:50.000000 2024-02-24 22:51:50.000000 2024-02-24 22:51:50.000000 2024-02-24 22:51:50.000000 updater[1].exe

Из результата мы видим, что последние четыре временные метки соответствуют временным меткам Created, Modified, Updated и Accessed.

Идем дальше....
Давайте получим информацию о процессе.
На этот раз мы выгрузим область памяти, соответствующую updater.exe , и проверим ее.

Для выполнения вышеизложенного мы воспользуемся плагином windows.memmap.
Но укажем выходной каталог с помощью переключателя -o.
В этом случае мы будем использовать тот же каталог, обозначенный символом " . ", и опцию --dump, за которой следует опция --pid и PID процесса, который соответсвуте updater.exe.

    <user_name>@<host_name>$ vol -f memdump.mem -o . windows.memmap --dump --pid 1612

После завершения команды выше у нас будет файл с расширением .dmp в Вашем рабочем каталоге.

Просмотр файла с помощью команды cat не принесет желаемых результатов, так как файл содержит непечатаемые символы
Поэтому мы воспользуемся командой strings для лучшего анализа вывода.
Поскольку у нас теперь есть строки файлов, мы можем искать ключевые шаблоны, такие как HTTP или key, или любой шаблон, который может быстро привести нас к артефакту.
*** Количество сопадений может быть огромным1

Другой способ прокрутки терминала — использовать команду strings, переданную по конвейеру less, чтобы перемещаться по выходным данным, как показано ниже.

    <user_name>@<host_name>$ strings pid.1612.dmp |less

Как мы можем заметить, мы сразу же определили возможный ключ и домен из URL, к которому мог получить доступ процесс.
Кроме того, прокрутив страницу вниз, мы обнаружили больше указаний на то, что это вредоносный процесс, поскольку мы можем найти имя файла important_document.pdf, указывающее на взаимодействие с файлом.

Отлично, мы можем сделать вывод, что процесс updater.exe получил доступ к документу important_document.pdf и получил доступ к "ключу" в какой-то момент URL http://key.critical-update.com/encKEY.txt .
Если мы используем команду grep для поиска HTTP-запроса, который может храниться в памяти,
Мы можем сделать это с помощью -B и -A, чтобы найти 10 строк выше и ниже нашего совпадения, чтобы посмотреть, сможем ли мы обнаружить что-то еще.

    <user_name>@<host_name>$ strings pid.1612.dmp |grep -B 10 -A 10 "http://key.critical-update.com/encKEY.txt"
            ...SNIP...
            @s1/0/_dk_http://critical-update.com http://critical-update.com http://key.critical-update.com/encKEY.txt
            HTTP/1.0 200 OK
            Server: SimpleHTTP/0.6 Python/3.10.4
            Date: Sat, 24 Feb 2024 22:52:40 GMT
            Content-type: text/plain
            Content-Length: 9
            Last-Modified: Fri, 23 Feb 2024 22:56:51 GMT
            192.168.182.128
            cafebabe
            ul1/0/_dk_https://microsoft.com https://microsoft.com https://edge.microsoft.com/entityextractiontemplates/api/v1/assets/find-assets?name=product_category_en&version=1.*.*&channel=stable&key
            =d414dd4f9db345fa8003e32adc81b362
            1/0/_dk_https://critical-update.com https://critical-update.com https://key.critical-update.com/encKEY.txt/
            ...SNIP...

Прокручивая вверх, мы можем наблюдать HTTP-запрос, как он отображается

Из вышесказанного мы можем наблюдать в конце HTTP-запроса содержимое файла encKey.txt, и в том же запросе мы можем наблюдать данные со значением cafebabe.
Это может быть ключом к шифрованию PDF, используемого злоумышленником, который не был загружен на диск.
Отлично. Мы собрали ценную информацию из дампа памяти, включая возможный ключ, использованный для шифрования документов.

=====================================================================
* Rootkit Analysis with Volatility v2 *
***************************************

Давайте теперь посмотрим демонстрацию использования Volatility v2 для анализа дампа памяти, сохраненного как rootkit.vmem
Для этого мы должны пройти следующие этапы

	++++++++++++++++++++++++++++++++
	+ Понимание структуры EPROCESS +
	++++++++++++++++++++++++++++++++

	EPROCESS — это структура данных в ядре Windows, которая представляет процесс.
	Каждый запущенный процесс в операционной системе Windows имеет соответствующий блок EPROCESS в памяти ядра.
	Во время анализа памяти изучение структур EPROCESS имеет решающее значение для понимания запущенных процессов в системе, выявления родительско-дочерних связей и определения того, какие процессы были активны во время захвата памяти.

	Интернет ресурсы:

		https://learn.microsoft.com/en-us/windows-hardware/drivers/kernel/eprocess			
		https://www.nirsoft.net/kernel_struct/vista/EPROCESS.html
		https://www.geoffchappell.com/studies/windows/km/ntoskrnl/inc/ntos/ps/eprocess/index.htm
		https://medium.com/@s12deff/eprocess-structure-in-windows-kernel-1937aa79c5a4
		https://medium.com/@boutnaru/the-windows-kernel-data-structures-journey-struct-eprocess-executive-process-d43e93c51996

	+++++++++++++++++++
	+ FLINK and BLINK +
	+++++++++++++++++++

	Двусвязный список — это фундаментальная структура данных в информатике и программировании.
	Это тип связанного списка, в котором каждый узел (запись) содержит две ссылки или указатели:

		-	Next Pointer:
			указывает на следующий узел в списке, что позволяет нам перемещаться по списку в прямом направлении.
			
		-	Previous Pointer:
			указывает на предыдущий узел в списке, что позволяет нам перемещаться по списку в обратном направлении.

	В структуре EPROCESS у нас есть ActiveProcessLinks как двусвязный список, который содержит поле flink и поле blink.

		-	flink:
			это прямой указатель, который указывает на запись списка ActiveProcessLinks структуры _next_ EPROCESS в списке активных процессов.

		-	blink:
			это обратный указатель в структуре EPROCESS, который указывает на запись списка ActiveProcessLinks структуры _previous_ EPROCESS в списке активных процессов.

	Эти связанные списки структур EPROCESS используются ядром Windows для быстрого перебора всех запущенных процессов в системе.
	Чтобы наглядно ознакомиться с этой взаимосвязью, рекомендуется посеить данный ресурс -	https://medium.com/@boutnaru/the-windows-kernel-data-structures-journey-struct-eprocess-executive-process-d43e93c51996

	+++++++++++++++++++++++++++++
	+ Identifying Rootkit Signs +
	+++++++++++++++++++++++++++++

	Direct Kernel Object Manipulation (Прямая манипуляция объектами ядра - DKOM) — это сложная техника, используемая руткитами и усовершенствованным вредоносным ПО для манипулирования структурами данных ядра операционной системы Windows с целью скрыть вредоносные процессы, драйверы, файлы и другие артефакты от обнаружения инструментами безопасности и утилитами, работающими в пользовательском пространстве (т. е. в пользовательском режиме).

	Если, например, инструмент мониторинга зависит от структуры EPROCESS для перечисления запущенных процессов, и в системе запущен руткит, который манипулирует структурой EPROCESS непосредственно в памяти ядра, изменяя структуру EPROCESS или отсоединяя процесс от списков, инструмент мониторинга не сможет получить скрытый процесс в списке запущенных в данный момент процессов.

	Вот список интрент ресурсво, где детально описан данный процесс:

		https://www.ibm.com/think/x-force/direct-kernel-object-manipulation-attacks-etw-providers
		https://www.blackhat.com/presentations/win-usa-04/bh-win-04-butler.pdf
		https://ioactive.com/wp-content/uploads/2014/09/dodcc11-2.pdf

	++++++++++
	+ PSSCAN +
	++++++++++

	Плагин psscan используется для перечисления запущенных процессов.
	Он сканирует теги пула памяти, связанные со структурой EPROCESS каждого процесса.
	Этот метод может помочь идентифицировать процессы, которые могли быть скрыты или отсоединены руткитами, а также процессы, которые были завершены, но еще не удалены из памяти.
	Этот плагин можно использовать следующим образом.

		<user_name>@<host_name>$ vol.py -f /folder/where/MemoryDumps/file/located/in/rootkit.vmem psscan
		Volatility Foundation Volatility Framework 2.6.1
		/usr/local/lib/python2.7/dist-packages/volatility/plugins/community/YingLi/ssh_agent_key.py:12: CryptographyDeprecationWarning: Python 2 is no longer supported by the Python core team. Support for it is now deprecated in cryptography, and will be removed in the next release.
  		from cryptography.hazmat.backends.openssl import backend
		Offset(P)          Name                PID   PPID PDB        Time created                   Time exited                   
		------------------ ---------------- ------ ------ ---------- ------------------------------ ------------------------------
		0x0000000001a404b8 ipconfig.exe       2988   2980 0x091403c0 2023-06-24 07:31:16 UTC+0000   2023-06-24 07:31:17 UTC+0000  
		0x0000000001a63138 cmd.exe            2980   2004 0x091401c0 2023-06-24 07:31:16 UTC+0000   2023-06-24 07:31:17 UTC+0000  
		0x0000000001b24888 explorer.exe       1444    624 0x09140320 2023-06-23 16:34:38 UTC+0000                                 
		0x0000000001bc62a8 tasksche.exe       1084   1684 0x091403e0 2023-06-24 07:28:16 UTC+0000                                 
		0x0000000001c3d2d8 @WanaDecryptor@    2248   1084 0x091403a0 2023-06-24 07:29:20 UTC+0000                                 
		0x0000000001c4e020 cmd.exe            1932   1444 0x09140380 2023-06-24 07:27:16 UTC+0000                                 
		0x0000000001c54da0 cmd.exe            2396   2264 0x091401c0 2023-06-24 07:29:30 UTC+0000   2023-06-24 07:29:37 UTC+0000  
		0x0000000001c8a020 @WanaDecryptor@    2324   2284 0x09140440 2023-06-24 07:29:20 UTC+0000                                 
		0x0000000001cb7628 test.exe           1344    668 0x09140360 2023-06-24 07:28:15 UTC+0000                                 
		0x0000000002063ab8 svchost.exe        1220    668 0x09140160 2023-06-23 16:14:54 UTC+0000                                 
		0x0000000002093020 services.exe        668    624 0x09140080 2023-06-23 16:14:53 UTC+0000                                 
		0x0000000002094da0 ctfmon.exe          564    232 0x09140240 2023-06-23 16:15:09 UTC+0000                                 
		0x0000000002095020 csrss.exe           600    368 0x09140040 2023-06-23 16:14:51 UTC+0000                                 
		0x000000000209fa78 vmtoolsd.exe       2004    668 0x091402a0 2023-06-23 16:15:24 UTC+0000                                 
		0x00000000020a2a90 spoolsv.exe        1556    668 0x091401a0 2023-06-23 16:14:59 UTC+0000                                 
		0x00000000020ceb40 alg.exe            1520    668 0x091402c0 2023-06-23 16:15:26 UTC+0000                                 
		0x00000000020ff870 wmiprvse.exe        560    880 0x09140300 2023-06-23 16:15:26 UTC+0000                                 
		0x000000000216a650 taskhsvc.exe       2340   2248 0x09140340 2023-06-24 07:29:22 UTC+0000                                 
		0x0000000002172da0 winlogon.exe        624    368 0x09140060 2023-06-23 16:14:52 UTC+0000                                 
		0x00000000021adda0 msmsgs.exe          548    232 0x09140220 2023-06-23 16:15:09 UTC+0000                                 
		0x000000000224b128 svchost.exe         992    668 0x09140100 2023-06-23 16:14:53 UTC+0000                                 
		0x000000000225cda0 VGAuthService.e    1832    668 0x09140280 2023-06-23 16:15:16 UTC+0000                                 
		0x0000000002269490 vmacthlp.exe        848    668 0x091400c0 2023-06-23 16:14:53 UTC+0000                                 
		0x0000000002288770 wmic.exe           2416   2396 0x09140400 2023-06-24 07:29:30 UTC+0000   2023-06-24 07:29:37 UTC+0000  
		0x00000000022ee020 cmd.exe            1628   1444 0x091402e0 2023-06-24 07:25:01 UTC+0000                                 
		0x0000000002346990 svchost.exe         880    668 0x091400e0 2023-06-23 16:14:53 UTC+0000                                 
		0x00000000023c7618 taskmgr.exe         260   1444 0x091401e0 2023-06-24 07:27:55 UTC+0000                                 
		0x0000000002419850 svchost.exe        1136    668 0x09140120 2023-06-23 16:14:53 UTC+0000                                 
		0x000000000248c020 smss.exe            368      4 0x09140020 2023-06-23 16:14:49 UTC+0000                                 
		0x000000000248f020 svchost.exe        1176    668 0x09140140 2023-06-23 16:14:53 UTC+0000                                 
		0x000000000249fda0 vmtoolsd.exe        540    232 0x09140180 2023-06-23 16:15:09 UTC+0000                                 
		0x00000000024a57a8 lsass.exe           680    624 0x091400a0 2023-06-23 16:14:53 UTC+0000                                 
		0x00000000024cb928 svchost.exe        1708    668 0x09140260 2023-06-23 16:15:16 UTC+0000                                 
		0x000000000250e020 rundll32.exe        532    232 0x09140200 2023-06-23 16:15:09 UTC+0000                                 
		0x00000000025c8830 System                4      0 0x0031c000

	Аналогичный вывод может прежоставить плагин pslist
	Однако pslist не смог найти test.exe, который был скрыт руткитом, но плагин psscan смог его найти.

		<user_name>@<host_name>$ vol.py -f /folder/where/MemoryDumps/file/located/in/rootkit.vmem pslist
		Volatility Foundation Volatility Framework 2.6.1
		/usr/local/lib/python2.7/dist-packages/volatility/plugins/community/YingLi/ssh_agent_key.py:12: CryptographyDeprecationWarning: Python 2 is no longer supported by the Python core team. Support for it is now deprecated in cryptography, and will be removed in the next release.
  		from cryptography.hazmat.backends.openssl import backend
		Offset(V)  Name                    PID   PPID   Thds     Hnds   Sess  Wow64 Start                          Exit                          
		---------- -------------------- ------ ------ ------ -------- ------ ------ ------------------------------ ------------------------------
		0x823c8830 System                    4      0     58      476 ------      0                                                              
		0x8228c020 smss.exe                368      4      3       19 ------      0 2023-06-23 16:14:49 UTC+0000                                 
		0x81e95020 csrss.exe               600    368     14      544      0      0 2023-06-23 16:14:51 UTC+0000                                 
		0x81f72da0 winlogon.exe            624    368     19      514      0      0 2023-06-23 16:14:52 UTC+0000                                 
		0x81e93020 services.exe            668    624     16      277      0      0 2023-06-23 16:14:53 UTC+0000                                 
		0x822a57a8 lsass.exe               680    624     23      358      0      0 2023-06-23 16:14:53 UTC+0000                                 
		0x82069490 vmacthlp.exe            848    668      1       25      0      0 2023-06-23 16:14:53 UTC+0000                                 
		0x82146990 svchost.exe             880    668     18      202      0      0 2023-06-23 16:14:53 UTC+0000                                 
		0x8204b128 svchost.exe             992    668     11      272      0      0 2023-06-23 16:14:53 UTC+0000                                 
		0x82219850 svchost.exe            1136    668     84     1614      0      0 2023-06-23 16:14:53 UTC+0000                                 
		0x8228f020 svchost.exe            1176    668      5       77      0      0 2023-06-23 16:14:53 UTC+0000                                 
		0x81e63ab8 svchost.exe            1220    668     15      218      0      0 2023-06-23 16:14:54 UTC+0000                                 
		0x81ea2a90 spoolsv.exe            1556    668     11      129      0      0 2023-06-23 16:14:59 UTC+0000                                 
		0x8230e020 rundll32.exe            532    232      4       78      0      0 2023-06-23 16:15:09 UTC+0000                                 
		0x8229fda0 vmtoolsd.exe            540    232      6      247      0      0 2023-06-23 16:15:09 UTC+0000                                 
		0x81fadda0 msmsgs.exe              548    232      2      190      0      0 2023-06-23 16:15:09 UTC+0000                                 
		0x81e94da0 ctfmon.exe              564    232      1       75      0      0 2023-06-23 16:15:09 UTC+0000                                 
		0x822cb928 svchost.exe            1708    668      5       87      0      0 2023-06-23 16:15:16 UTC+0000                                 
		0x8205cda0 VGAuthService.e        1832    668      2       60      0      0 2023-06-23 16:15:16 UTC+0000                                 
		0x81e9fa78 vmtoolsd.exe           2004    668      7      278      0      0 2023-06-23 16:15:24 UTC+0000                                 
		0x81eff870 wmiprvse.exe            560    880     12      236      0      0 2023-06-23 16:15:26 UTC+0000                                 
		0x81eceb40 alg.exe                1520    668      6      107      0      0 2023-06-23 16:15:26 UTC+0000                                 
		0x81924888 explorer.exe           1444    624     17      524      0      0 2023-06-23 16:34:38 UTC+0000                                 
		0x821c7618 taskmgr.exe             260   1444      3       75      0      0 2023-06-24 07:27:55 UTC+0000                                 
		0x81a3d2d8 @WanaDecryptor@        2248   1084      3       57      0      0 2023-06-24 07:29:20 UTC+0000                                 
		0x81a8a020 @WanaDecryptor@        2324   2284      2       56      0      0 2023-06-24 07:29:20 UTC+0000                                 
		0x81f6a650 taskhsvc.exe           2340   2248      2       60      0      0 2023-06-24 07:29:22 UTC+0000                                 
		0x81863138 cmd.exe                2980   2004      0 --------      0      0 2023-06-24 07:31:16 UTC+0000   2023-06-24 07:31:17 UTC+0000  
		0x818404b8 ipconfig.exe           2988   2980      0 --------      0      0 2023-06-24 07:31:16 UTC+0000   2023-06-24 07:31:17 UTC+0000

=====================================================================
* Memory Analysis Using Strings *
*********************************

Анализ строк в дампах памяти — ценный метод в криминалистике памяти и реагировании на инциденты.
Строки часто содержат информацию, которую может прочитать человек, например текстовые сообщения, пути к файлам, IP-адреса и даже пароли.

Мы можем использовать инструмент Strings из пакета Sysinternals, если наша система основана на Windows, или команду strings из Binutils, если наша система основана на Linux.

Давайте рассмотрим несколько примеров для дампа памяти с именем Win7-2515534d.vmem

	++++++++++++++++++++++++++++++
	+ Identifying IPv4 Addresses +
	++++++++++++++++++++++++++++++

	Простое использование утилиты strings для отображения необходимой информации (в нашем пример это IPv4 адреса), будет не достаточно
	Нам придется ее дополнить командой grep и RegEx выражением

		<user_name>@<host_name>$ strings /folder/where/MemoryDumps/file/located/in/Win7-2515534d.vmem | grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b"
		---SNIP---
		127.192.0.0/10
		212.83.154.33
		directory server at 10.10.10.1:52860
		127.192.0.0/10
		0.0.0.0
		192.168.182.254
		---SNIP---

	+++++++++++++++++++++++++++++++
	+ Identifying Email Addresses +
	+++++++++++++++++++++++++++++++

		<user_name>@<host_name>$ strings /folder/where/MemoryDumps/file/located/in/Win7-2515534d.vmem | grep -oE "\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}\b"
		CPS-requests@verisign.com
		silver-certs@saunalahti.fi
		joe@freebsd.org
		info@netlock.net
		UtV@UtV.UtT
		acrse@economia.gob
		CPS-requests@verisign.com
		dl@comres.dll
		info@globaltrust.info
		ll@tzres.dll
		am@tzres.dll
		sy@tzres.dll
		d@tzres.dll
		5@tzres.dll
		ic@tzres.dll
		ll@tzres.dll
		oo@tzres.dll
		N@tzres.dll
		1@tzres.dll

	++++++++++++++++++++++++++++++++++++++++++++++++++++++
	+ Identifying Command Prompt or PowerShell Artifacts +
	++++++++++++++++++++++++++++++++++++++++++++++++++++++

		<user_name>@<host_name>$ strings /folder/where/MemoryDumps/file/located/in/Win7-2515534d.vmem | grep -E "(cmd|powershell|bash)[^\s]+"
		---SNIP---
		ComSpec=C:\WINDOWS\system32\cmd.exe
		ComSpec=C:\WINDOWS\system32\cmd.exe
		cmd.exe
		cmd.exe
		cmd.exe
		cmd.exe
		C:\WINDOWS\system32\cmd.exe
		cmd.exe /c "C:\Intel\ueqzlhmlwuxdg271\tasksche.exe"
		ComSpec=C:\WINDOWS\system32\cmd.exe
		cmd.exe /c "%s"
		cmd.exe /c start /b @WanaDecryptor@.exe vs
		cmd /c ""C:\Program Files\VMware\VMware Tools\suspend-vm-default.bat""
		---SNIP--
  