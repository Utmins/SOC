Данные советы были собраны во время работы на практическими заданиями серии BOOGEYMAN (1/2/3) от TryHackMe
Подробный разбор каждого практического задания можно найти в интеренете
Я же перечислю только те моменты, которые могут быть использованны в повседневной рутине

=====================================================================
* TOOLs *
*********

Данный утилиты не были описаны в основном учебном метериале, но тем не мнее широко используются при анализе 

    ++++++++++++
    + LNKParse +
    ++++++++++++

    Утилита на базе Python для криминалистического анализа двоичного файла с расширением LNK, акже известного как Microsoft Shell Link, также известного как ярлык Windows.
    Данную утилиту можно скачать -  https://github.com/Matmaus/LnkParse3

    ++++++
    + JQ +
    ++++++

    Это легкий и гибкий JSON-процессор командной строки.

    Другими словами - это своего рода фильтр, который повзволят отображать только необходимые элементы JSON-файла
    Всю необходимуб информацию и установочный фал можно найти тут - https://jqlang.github.io/jq/

    ++++++++++
    + Olevba +
    ++++++++++

    Это инструмент для анализа и извлечения макросов VBA из документов Microsoft Office
    Он явялется частью пакета утилит "Oletools"
    Утилиту можно скачать тут - https://github.com/decalage2/oletools/wiki/olevba

    +++++++++++
    + strings +
    +++++++++++

    Команда 'strings' в Linux — это универсальный инструмент, который ищет в двоичных данных и отображает последовательности печатных символов.
    Эти последовательности, или 'строки', часто скрыты в двоичных данных исполняемых программ и объектных файлов.

=====================================================================
* HINTs *
*********

    ++++++++++++++++++++++++++++++
    + MEMORY DUMP via VOLATILITY +
    ++++++++++++++++++++++++++++++

        /////////////////
        /// Processes ///
        /////////////////
        
            1)  Чтобы увидеть, что было запущено на Windows-машине (какие процессы) во время захвата дампа памяти
                Мы можем использовать команду pslist
                    
                    vol -f <file_name.raw> windows.pslist
            
            2)  Если нам надо посмотреть последовательность запущенные процессов, относящихся к искомому файлу/процессу
                То лучше использовать команду pstree

                    vol -f <file_name.raw> windows.pstree
        
        //////////////////////
        /// NetConnections ///
        //////////////////////

            1)  Для поиска любых установленных IP-соединений, указывающих на потенциальный C2
                Мы можем использовать команду netscan

                    vol -f <file_name.raw> windows.netscan
        
        /////////////////////////////
        /// File Trace & Analysis ///
        /////////////////////////////

            1)  Если нам надо узнать, где в системе был помещен искомый документ/файл.
                Мы можем использовать filescan
                А для более точно отображения результат (без шума) добавить grep

                    vol -f <file_name.raw> windows.filescan | grep <filename without extension>
            
            2)  Чтобы узнать, что происходит в конкретном процессе, мы можем выгрузить все артефакты памяти, связанные с этим процессом, создав каталог с именем memdump
                ДЛя этого используем команду memmap

                    vol -f  <file_name.raw> -o memdump/ windows.memmap --dump --pid <PID of the process>
            
            3)  К сожалению анализ дампа процесса, посредством анализатора дампов (volatility), не откроет нам все содержание (различные скрытые строки и символы)
                Для просмотра этих скратах строк и символом используем команду strings
                * Допустим мы хотим узнать все что связано с утилитами powershell.exe и cmd.exe

                    strings memdump/<pid.filename.dmp> | grep -i 'powershell.exe\|cmd.exe'
            
            4)  С помощью комнады strings мы также можем просмотреть и основной файл дампа памяти
                * К примеру для поиска запланированных заданий
            
                    strings <file_name.raw> | grep schtasks

