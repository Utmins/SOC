=====================================================================
* General *
***********

Анализ кода — это процесс изучения и расшифровки поведения и функциональности скомпилированной программы или двоичного файла.
Это включает анализ инструкций, потока управления и структур данных в коде, в конечном итоге проливая свет на цель, функциональность и потенциальные индикаторы компрометации (IOC).

Понимание программы или фрагмента вредоносного ПО часто требует от нас обратить процесс компиляции.
Поэтому, чтобы распутать сложную паутину машинного кода, мы обращаемся к дуэту мощных инструментов:
    
    -   дизассемблер (Disassembler)
    -   отладчикам (Debugger)

Преобразуя машинный код обратно в инструкции языка ассемблера (другими словами - обратное проектирование или reverse engineering), мы получаем набор инструкций, которые являются символическими и мнемоническими, что позволяет нам декодировать логику и работу программы

Обратное проектирование (Reverse engineering)   -   это процесс, который позволяет нам проникнуть под поверхность исполняемых файлов или скомпилированного машинного кода, что позволяет нам расшифровать их функциональность, поведенческие черты и структуру.
При отсутствии исходного кода мы переходим к анализу инструкций дизассемблированного кода, также известному как анализ ассемблерного кода.
Этот более глубокий уровень понимания помогает нам раскрыть скрытые или неуловимые функции, которые остаются скрытыми даже после статического и динамического анализа.

Дизассемблер (Disassembler) -   это наш инструмент по выбору, когда мы хотим провести статический анализ кода, что означает, что нам не нужно выполнять код.
Этот тип анализа бесценен, поскольку он помогает нам понять структуру и логику кода, не активируя потенциально опасные функции.
Некоторые яркие примеры дизассемблеров включают IDA, Cutter и Ghidra.

Отладчик (Debugger), с другой стороны, служит двойной цели.
Подобно дизассемблеру, он декодирует машинный код в инструкции по сборке.
Кроме того, он позволяет нам выполнять код контролируемым образом, выполняя инструкцию за инструкцией, переходя к определенным местам или останавливая поток выполнения в обозначенных точках с помощью точек останова.
Примерами отладчиков являются x32dbg, x64dbg, IDA и OllyDbg.

Давайте сделаем шаг назад и поймем, какая задача стоит перед нами.
Путешествие кода из понятных человеку высокоуровневых языков, таких как C или C++, в машинный код — это билет в один конец, направляемый компилятором.
Машинный код, двоичный язык, который компьютеры обрабатывают напрямую, — это зашифрованное повествование для аналитиков-людей.
Вот где в игру вступает язык ассемблера, выступая в качестве моста между нами и машинным кодом, позволяя нам расшифровать историю последнего.

Дизассемблер преобразует машинный код обратно в язык ассемблера, предоставляя нам читаемую последовательность инструкций.
Понимание ассемблера и его мнемоники имеет решающее значение для анализа функциональности вредоносного ПО.

    '''''''''''''''''''''       '''''''''''''''''''''       '''''''''''''''''       ''''''''''''''''''''' 
    '   Source Code     '------>'   Compilation     '------>'   Assembly    '------>'   Machine Code    '
    '     (c, c++)      '       '''''''''''''''''''''       '''''''''''''''''       '   (*.o или *.obj) '
    '''''''''''''''''''''                                           ^               '''''''''''''''''''''                
                                                                    |                       |
                                                                    |                       |
                                                                    |                       /
                                                                DISASSEMBLY         '''''''''''''''''       '''''''''''''''''''''''''''''
                                                        (Reversing the executabl    '   Linking     '<------'   Static Library Linking  '
                                                        code into assembly code)    '''''''''''''''''       '       (eg. *.dll)         '
                                                                    |                       |               '''''''''''''''''''''''''''''
                                                                    |                       |
                                                                    |                       /
                                                                    |               '''''''''''''''''''''''''''''''''
                                                                    |               '   Executable Machine code     '
                                                                    ----------------'   (eg./- Executable file .exe)'
                                                                                    '''''''''''''''''''''''''''''''''

    -   Source Code (C, C++)
        Это высокоуровневые языки программирования
    
    -   Compilation
        Непосредственно программы-компиляторы (к примеру    -   MinGW, gcc)

    -   Assembly
        Непосредственно процесс сборки, который "превращает" исползуемыйы до этого язык програмирования в понятный человеку код
        Как правило собранны файлы имею расширения *.asm
    
    -   Machine Code
        Процес транформации шестнадцатеричного кода в бинарный, чтобы процессор мог понимать инструкции
    
    -   Linking
        Этап связывания всех используемых файлов (библиотек, *.ini, *.conf и других) между собой
        Это необходимо, чтобы инструкции могли взаимодействовать друг с другом
    
    -   Executable Machine code
        Финальный этап  -   объединение всех файлов в один исполняемый файл
        Пример исполняемого файла   -   *.exe

    -   DISASSEMBLY
        Процесс обратного инжениринга

        Дизассемблеры — наши союзники в этом процессе.
        Эти специализированные инструменты берут двоичный код, генерируют соответствующие инструкции по сборке и часто дополняют их дополнительным контекстом, таким как адреса памяти, имена функций и анализ потока управления.
        Одним из таких мощных инструментов является IDA -   широко используемый дизассемблер и отладчик, почитаемый за свои расширенные функции анализа.
        Он поддерживает несколько форматов исполняемых файлов и архитектур, предоставляя всеобъемлющее представление дизассемблирования и мощные возможности анализа.

ДИСАССЕМБЛЕРЫ:

    IDA     -   https://hex-rays.com/ida-free
    
    Cutter  -   https://cutter.re/
            -   https://github.com/rizinorg/cutter
    
    Ghidra  -   https://ghidra-sre.org/
                https://github.com/NationalSecurityAgency/ghidra

ОТЛАДЧИКИ (Debugger):

    x32dbg      -   https://x64dbg.com/
    x64dbg          https://github.com/x64dbg/x64dbg
                    https://www.varonis.com/blog/how-to-use-x64dbg
    
    OllyDbg     -   https://www.ollydbg.de/
                    https://medium.com/@careertechnologymiraroad/ollydbg-debugger-7f6206f233d3
                    https://ollydbg.net/whatsnew.htm

*** Самая часто используемая утилита это    -   IDA
    Так как она может быть как и Disassembler, так и Debugger