=====================================================================
* Debugging *
*************

Отладка добавляет динамический, интерактивный уровень к анализу кода, предлагая обзор поведения вредоносного ПО в реальном времени.
Он позволяет аналитикам подтверждать свои открытия, наблюдать влияние времени выполнения и углублять свое понимание выполнения программы.
Объединение анализа кода и отладки позволяет получить всестороннее понимание вредоносного ПО, что приводит к эффективному выявлению вредоносного поведения.

Один из часто используемых отладчиков	-	x64dbg, удобный инструмент, предназначенный для анализа и отладки 64-битных исполняемых файлов Windows.
***	Также сузествует и вариант для 32-битных исполняемых файлов Windows	-	x32dgb
Он оснащен графическим интерфейсом для визуализации разобранного кода, внедрения точек останова, проверки памяти и регистров, а также управления выполнением программ.

Вот как запустить образец в x64dbg, чтобы ознакомиться с его работой.

	-	Запустите x64dbg.
	-	В верхней части интерфейса x64dbg щелкните меню Файл.
	-	Выберите "Open", чтобы выбрать исполняемый файл, который Вы хотите отладить.
	-	Перейдите в каталог, содержащий исполняемый файл, и выберите его.
	-	При желании в появившемся диалоговом окне можно указать аргументы командной строки или рабочий каталог.
	-	Нажмите ОК, чтобы загрузить исполняемый файл в x64dbg.

После открытия окно по умолчанию останавливается на точке останова по умолчанию в точке входа программы.
Рабочая область программы представлена 4 окнами
***	Содержание окон может варьироавться в зависимости от выбранных вкладок каждого окна
	Поэтому, описание, представленное ниже, будет основываться на значения окон вкладки CPU
	Порядок окон по часовой стреке

		1)	Disassembly View (CPU Tab)
			Загрузка исполняемого файла в x64dbg открывает вид дизассемблирования, демонстрируя инструкции по сборке программы, тем самым помогая понять поток кода.

			***	Сразу под этим окно будет небольшое окно, демонстрирующее содержание выбранного регистра, НО в альтернативном исполнении

		2)	Registers
			Справа окно регистра, которое раскрывает значения регистров ЦП, проливая свет на состояние программы.
			
		3)	Staks
			Под окном регистра отображается представление стека демонстрирующее текущий кадр стека, позволяя проверять вызовы функций и локальные переменные.

		4)	Memory Dump
			Наконец, в нижнем левом углу мы находим представление дампа памяти, предоставляющее наглядное представление памяти программы, облегчающее анализ структур данных и переменных.

	++++++++++++++++++++++++++++++++
	+ Simulating Internet Services +
	++++++++++++++++++++++++++++++++

	Роль INetSim в моделировании типичных интернет-сервисов в нашей ограниченной тестовой среде является ключевой.
	Он предлагает поддержку множества сервисов, включая DNS, HTTP, FTP, SMTP и другие.
	Мы можем настроить его для воспроизведения определенных ответов, тем самым обеспечивая более специализированное исследование поведения вредоносного ПО.
	Наш подход будет включать поддержание работоспособности InetSim, чтобы он мог перехватывать любые DNS, HTTP или другие запросы, исходящие от образца вредоносного ПО, тем самым предоставляя ему контролируемые синтетические ответы.

	***	Примечание: настоятельно рекомендуется использовать вашу собственную виртуальную машину/машину для запуска InetSim.
		Так как виртуальная машина представленная данной обучающей платформой должна быть подключена к VPN с помощью предоставленного файла конфигурации VPN, который находится в конце этого раздела.

	Мы должны настроить INetSim следующим образом

		<user_name>@<host_name>$ sudo nano /etc/inetsim/inetsim.conf

	Нижеследующее необходимо раскомментировать и указать

		service_bind_address <TUN IP машины с которой вы хотите подключиться к виртуальной машине-песочнице, которая без интренета>
		dns_default_ip <TUN IP машины с которой вы хотите подключиться к виртуальной машине-песочнице, которая без интренета>
		dns_default_hostname www
		dns_default_domainname iuqerfsodp9ifjaposdfjhgosurijfaewrwergwea.com

	Инициализация INetSim включает выполнение следующей команды

		<user_name>@<host_name>$ sudo inetsim 

			INetSim 1.3.2 (2020-05-19) by Matthias Eckert & Thomas Hungenberg
			Using log directory:      /var/log/inetsim/
			Using data directory:     /var/lib/inetsim/
			Using report directory:   /var/log/inetsim/report/
			Using configuration file: /etc/inetsim/inetsim.conf
			Parsing configuration file.
			Configuration file parsed successfully.
			=== INetSim main process started (PID 34711) ===
			Session ID:     34711
			Listening on:   0.0.0.0
			Real Date/Time: 2023-06-11 00:18:44
			Fake Date/Time: 2023-06-11 00:18:44 (Delta: 0 seconds)
			Forking services...
				* dns_53_tcp_udp - started (PID 34715)
				* smtps_465_tcp - started (PID 34719)
				* pop3_110_tcp - started (PID 34720)
				* smtp_25_tcp - started (PID 34718)
				* http_80_tcp - started (PID 34716)
				* ftp_21_tcp - started (PID 34722)
				* https_443_tcp - started (PID 34717)
				* pop3s_995_tcp - started (PID 34721)
				* ftps_990_tcp - started (PID 34723)
			done.
			Simulation running.

		***	Более подробный ресурс по настройке INetSim	-	https://medium.com/@xNymia/malware-analysis-first-steps-creating-your-lab-21b769fb2a64

	Наконец, DNS созданной цели должен быть направлен на машину/виртуальную машину, где запущен INetSim
	Для, этого в сетевых настройках интренет соединения вартуальной машины-песочницы, необходимо изменить адрес DNS-сервера, на TUN IP машины с которой вы хотите подключиться к виртуальной машине-песочнице

	+++++++++++++++++++++++++++++++++++++++++++++++++
	+ Applying the Patches to Bypass Sandbox Checks +
	+++++++++++++++++++++++++++++++++++++++++++++++++

	Учитывая, что проверки песочницы мешают прямому выполнению вредоносного ПО на машине, нам нужно исправить эти проверки, чтобы обойти обнаружение песочницы.
	Вот как мы можем обойти проверки обнаружения песочницы во время отладки с помощью x64dbg.
	Существуют много методов, которые могут привести Вас к инструкциям, где выполняется обнаружение песочницы.
	Мы обсудим некоторые из них.

		///////////////////////////////////////
		/// By Copying the Address from IDA ///
		///////////////////////////////////////

		Во время анализа кода мы наблюдали проверку обнаружения песочницы, связанную с разделом реестра
		Мы можем извлечь адрес первой инструкции cmp непосредственно из IDA.

		Чтобы найти адрес, вернемся к окнам IDA, откроем первую функцию, которую мы переименовали в suggests_Main, и найдем инструкцию cmp.
		***	Вот номер инструкции	-	sub_403250 (это, если вы начали анализ файла заново и не помните номер иструкции)

			cmp     [rsp+148h+Type], 1
			jnz     short loc_4032FD

		Чтобы просмотреть адреса, мы можем перейти из графического представления в текстовое представление, нажав кнопку пробела.
		Это раскрывает адрес (как выделено на снимке экрана ниже)

			.text:00000000004032C8                 cmp     [rsp+148h+Type], 1

		Мы можем скопировать адрес 00000000004032C8 из IDA.

		Переходим в x64dbg
		В x64dbg мы можем щелкнуть правой кнопкой мыши в любом месте disassembly view (CPU) и выбрать Go to > Expressio.
		Или мы можем нажать Ctrl+G (перейти к выражению) в качестве сочетания клавиш.

		В появившемся окне нам надо ввести скопированный адрес и нажать Enter
		Это перенаправит нас к инструкции сравнения, где мы можем реализовать изменения.\

		////////////////////////////////////////
		/// By Searching Through the Strings ///
		////////////////////////////////////////

		Давайте найдем сообщение "Sandbox detected" в ссылках на строки (String references), и установим точку разрыва/остановки (breakpoint), чтобы при нажатии кнопки «Run» выполнение остановилось в этой точке.

			i)		Для этого заново откроем наш файл в x64dbg и нажмите кнопку «Run» один раз (или F9)

			ii)		Затем щелкните правой кнопкой мыши в любом месте, любого столбка (пром первого) Disassembly View и выберите «Search for» -> «Current Module» -> «String references».

			iii)		Далее нам надо добавить точку разрыва/остановки, чтобы отметить местоположение
					А затем изучить инструкции перед этим Sandbox MessageBox, чтобы понять, как был сделан переход к инструкции, печатающей "Sandbox tested".

					Для этого сперва прокручиваем до конце вниз и выделяем нужную нам строку
					Теперь жмем на ней правой кнопкой мыши и выбираем параметр "Toggle Breakpoint" (на или просто нажимаем F2)

					***	Если список прокрутки достаточно большой, то можно использовать поле "Search" внизу появившегося окна для поиска нужной нам информации
						Однаком результат поиска может содержать несколько совпадений
					
						В нашем случае нас интересует последнее совпадение, которое обнаружено после инструкции "cmp" (либо сразу, либо спустя несколько инструкций)
						Как вы помните (ну или можете вернуться в IDA и ознакомиться еще раз), интересующее нас сообщение "Sandbox detected" как раз было вызвано проверочной инструкций "cmp"
						Поэтому другие совпадения нас будут мало интересовать в нашем примере 

			iv)		Затем мы можем дважды щелкнуть по строке (после того как установили breakpoint), чтобы перейти по адресу, где находятся инструкции для печати Sandbox detected.

					Как было сказано выше	-	инструкция cmp присутствует над этим MessageBox, которая сравнивает значение с 1 после того, как было выполнено сравнение пути реестра.
					Давайте изменим это значение сравнения, чтобы оно соответствовало 0.
			
			v)		Это можно сделать, поместив курсор на эту инструкцию и нажав пробел на клавиатуре.
					Должно появиться окошко с названием "Assemble at #########....."
					Это позволяет нам редактировать инструкции ассемблерного кода.

					Мы можем изменить значение сравнения 0x1 на 0x0.
					Изменение сравнения на 0 смест поток управления кода, и он не должен переходить на адрес, где отображается MessageBox.

		В результате, при нажатии на Run (или F9) не будет достигнута точка остановки для первого кода сообщения обнаружения песочницы.
		Это означает, что мы успешно исправили инструкции.

		Аналогичным образом мы можем добавить точку останова на следующую функцию обнаружения песочницы, прежде чем она также выведет MessageBox.
		Для этого точку останова следует поместить на предпоследнюю строку обнаружения песочницы (0000000000402F13).
		Если мы дважды щелкнем по этой строке, то заметим, что есть инструкция перехода, которую мы можем пропустить, направив поток выполнения на следующую инструкцию, которая вызывает другую функцию.
		***	Для определения инструкции переходма Вы можете вернуться в IDA и определить, какая именно инструкция вызывает это сообщение
			Чтобы определить к какому именно блоку функций принадлежит данная инструкция Вам нужно после того как вы 2 раза щелкнули на (0000000000402F13) и перешли в ее местонахождение в списке инструкций
			Нужно построчно прокурчивать вверх пока не достишните инструкции "push" или строки со значением "nope"
			Так вот как раз ID инструкции со значением "push" или любым другим значением, идущим сразу после "nope" и будет являться ID блока функций

		Это именно то, что нам нужно — вместо MessageBox обнаружения песочницы он переходит на другую функцию.

		Перейдя в IDA Вы сможете с легкость найти инструкцию перехода.
		Чаще всего она начинается либо с jmp, либо с jz
		В x64bdg она будет начинаться с je и называться (je shell.402F09)
		Поэтому, нам надо изменить инструкцию с "je shell.402F09" на "jne shell.402F09".

		Осталась последнее сообщение "Sandbox detected", которое мы должны обойти
		Наш вредоносный файл выполняет обнаружение песочницы, проверяя наличие интернет-подключения.
		А так как наша песочница не имеет интернет-подключения, то мы должны исправить этот метод обнаружения песочницы.
		Для этого Вам надо выбрать последнюю (но первую в списке среди строк Sandbox detected)	-	0000000000402CBD и исправить следующую инструкцию.
		С jne 0x0000000000402CD0 на jmp 0x0000000000402CD0
		***	Как вы могли заметить мы исправляли существующие инструкции на не существующие, тем самым отправляя переход в никуда

		После внесения всех правок (ну или в процессе на определнных этапах) Вы можете сохранять исправленный исполняемый файл, нажав Ctrl+P и добавить Patched_file.
		Это действие сохраняет исправленный файл, который пропускает проверки песочницы.
		Это необходимо для того, чтобы гарантировать, что в следующий раз, когда мы запустим сохраненный исправленный файл, он будет выполнен напрямую без проверок песочницы, и мы сможем наблюдать все события в ProcessMonitor.

		Теперь, Вы можете запустить, пропатченный исполняемый файл
		Спустя какое-то врямя должно появиться сообщение	-	"This is the INETSim defaul binary"
		А также сообщениеа	-	"Connection sent to C2"
		Это говорит нам о том, что пропатченный исполняемый файл продолжает работу и загружает другой исполняемый файл (согласно настройкам) из INetSim и запускает его.
		***	В реальном мире таких сообщений не будет

=====================================================================
* Analyzing Malware Traffic *
*****************************

***	Помните, что анализ трафика не только может, но и в идеале должен быть включен в качестве неотъемлемой части динамического анализа.

Давайте теперь воспользуемся Wireshark, чтобы захватить и изучить сетевой трафик, сгенерированный вредоносным ПО.
Помните о цветовой кодировке трафика:

	-	красный соответствует трафику клиент-сервер
	-	синий обозначает обмены сервер-клиент.

Порядок действия следующий:

	1)	Сперва запускаем Wireshark

	2)	Затем наш пропатченный исполняемый файл и ждем пока появтся все сообщения
		Нажав ОК на каждый MessageBox, исполняемый файл завершит свою работу

	3)	Останавливаем захват пакетов Wireshark

	4)	Сперва фильтруем все пакеты по HTTP
		Запрос вредоносной программы на svchost.exe запрашивает двоичный файл по умолчанию из InetSim (GET /svchost.exe HTTP/1.1)
		При проверке HTTP-ответа становится очевидным, что InetSim вернул свой двоичный файл по умолчанию в качестве ответа вредоносному ПО (HTTP/1.1 200 OK (x-msdod-program))
		Этот двоичный файл отвечает MessageBox с сообщением	-	This is the INetSim default binary.

		Изучение HTTP-запроса показывает, что образец вредоносного ПО добавляет имя хоста основного компьютера компьютера в поле пользовательского агента.

	5)	Далее проверям DNS запросы, так как мы указывали в качестве DNS-сервера наш основной хост
		Как мы видим, вредоносная программа отправляла DNS-запросы на случайный домен и адрес ms-windows-update[.]com,
		А INetSim отвечал поддельными ответами (в этом случае INetSim работал на основном хосте).

=====================================================================
* Analyzing Process Injection & Memory Region *
***********************************************

В ходе анализа кода мы обнаружили, что наш исполняемый файл выполняет инъекцию процесса в notepad.exe и отображает MessageBox с сообщением Connection sended to C2.
Чтобы глубже изучить инъекцию процесса, мы предлагаем установить точки останова на функциях:

	-	WINAPI VirtualAllocEx
	-	WriteProcessMemory
	-	CreateRemoteThread.

Эти точки останова позволят нам тщательно изучить содержимое, хранящееся в регистрах во время инъекции процесса.
Вот процедура установки этих точек останова (е забываем сперва запустить наш пропатченный исполняемый файл):

	i)		Откройте интерфейс x64dbg и перейдите на вкладку Symbols

	ii)		В поле поиска символов найдите нужное имя DLL слева (например Kernel32.dll) и имена функций справа (например VirtualAllocEx, WriteProcessMemory и CreateRemoteThread)
			Вместо того, чтобы вручную прокручивать список имен функции, можно воспользоваться сткройо поска, которая находится сразу под списком

	iii)		По мере появления имен функций в результатах поиска щелкните правой кнопкой мыши и выберите Toggle breakpoint в контекстном меню для каждой функции.
			Альтернативный способ — нажать F2.

			Выполнение этих шагов устанавливает точку останова в точке входа каждой функции.
			Мы повторим эти шаги для всех функций, которые мы собираемся изучить.

	iv)		После установки точек останова нажимаем F9 или выбираем Run на панели инструментов, пока не достигнем точки останова для WriteProcessMemory.
			До этого момента блокнот был запущен, но шеллкод еще не был записан в память блокнота.

	+++++++++++++++++++++++++++++++++++++++++++++++
	+ Attaching Another Running Process In x64dbg +
	+++++++++++++++++++++++++++++++++++++++++++++++

	Чтобы углубиться дальше, давайте откроем еще один экземпляр x64dbg и прикрепим его к notepad.exe.

		-	Запустите новый экземпляр x64dbg

		-	Перейдите в меню File и выберите Attach (или используйте сочетание клавиш Alt + A)

		-	В диалоговом окне Attach появится список запущенных процессов.
			Выберите notepad.exe из списка

		-	Нажмите кнопку Attach, чтобы начать процесс прикрепления

		-	После успешного прикрепления x64dbg инициирует отладку целевого процесса
			А в главном окне отображается код сборки вместе с другой отладочной информацией.

		-	Теперь мы можем устанавливать точки останова, пошагово выполнять код, проверять регистры и память и изучать поведение прикрепленного процесса notepad.exe с помощью x64dbg.

		-	Вторым аргументом WriteProcessMemory является lpBaseAddress, который содержит указатель на базовый адрес в указанном процессе, в который записываются данные.
			В нашем случае он должен быть в регистре RDX.

			При вызове функции WriteProcessMemory регистр rdx содержит параметр lpBaseAddress.
			Этот параметр представляет адрес в адресном пространстве целевого процесса, куда будут записаны данные.

			Мы стремимся изучить регистры, когда функция WriteProcessMemory вызывается в экземпляре x64dbg, запускающем процесс shell.exe.
			Это покажет адрес в notepad.exe, куда будет записан шеллкод.

		-	Далее мы копируем этот адрес, чтобы изучить его содержимое в дампе памяти присоединенного процесса notepad.exe во втором экземпляре x64dbg.
			Теперь мы выбираем  Go to -> Expression, щелкнув правой кнопкой мыши в любом месте дампа памяти во втором экземпляре x64dbg, где запущен notepad.exe.

			После ввода скопированного адреса отображается содержимое по этому адресу (щелкнув правой кнопкой мыши по адресу и выбрав Follow in Dump -> Selected Address), которое в данный момент пусто.

		-	Далее мы запускаем shell.exe в первом экземпляре x64dbg, нажав на кнопку Run.
			Наблюдаем, что вписано в эту область памяти notepad.exe.

			После его выполнения мы идентифицируем внедренный шеллкод, который совпадает с тем, что мы обнаружили ранее во время анализа кода.
			Мы можем проверить это в Process Hacker и сохранить его в файл для последующего изучения