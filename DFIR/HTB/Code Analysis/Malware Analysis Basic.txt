=====================================================================
* General *
***********

***	Важно пояснить, что этот модуль не претендует на звание всеобъемлющей или исчерпывающей программы по анализу вредоносных программ.
	Этот модуль обеспечивает надежную основу для аналитиков SOC, позволяя им уверенно решать ключевые задачи анализа вредоносных программ.
	Основное внимание в модуле будет уделено анализу вредоносных программ, нацеленных на операционную систему Windows.

	++++++++++++++++++++++
	+ Malware Definition +
	++++++++++++++++++++++

	Malware (сокращение от malicious software)	-	это термин, охватывающий различные типы ПО, предназначенные для проникновения, эксплуатации или повреждения компьютерных систем, сетей и данных.

	Хотя все вредоносное ПО используется для злонамеренных целей, конкретные цели вредоносного ПО могут различаться у разных субъектов угроз.
	Эти цели обычно делятся на несколько категорий:

		-	Нарушение работы хост-системы
		-	Кража критически важной информации, включая персональные и финансовые данные
		-	Получение несанкционированного доступа к системам
		-	Осуществление шпионской деятельности
		-	Отправка спам-сообщений
		-	Использование системы жертвы для атак типа «распределенный отказ в обслуживании» (DDoS)
		-	Внедрение программ-вымогателей для блокировки файлов жертвы на ее хосте и требование выкупа

	+++++++++++++++++
	+ Malware Types +
	+++++++++++++++++

	В сегодняшнем мире киберугроз мы сталкиваемся с широким спектром сложных и разнообразных форм вредоносного ПО, которые представляют собой непреодолимую проблему для нашей киберзащиты.
	Для нас крайне важно понять многогранную природу вредоносного ПО, поскольку мы стремимся укрепить безопасность наших систем и сетей.
	Давайте разберем слои некоторых часто встречающихся типов вредоносного ПО, с которыми мы часто сталкиваемся в наших усилиях по обеспечению кибербезопасности.

		-	Вирусы (Viruses)
			Эти известные формы вредоносного ПО предназначены для проникновения и размножения в файлах хоста, переходя из одной системы в другую.
			Они цепляются за надежные программы, приступая к действию при запуске зараженных файлов.
			Их разрушительные способности могут варьироваться от повреждения или изменения данных до нарушения функций системы и даже распространения по сетям, вызывая широкомасштабный хаос.

		-	Черви (Worms)
			Черви — это автономные вредоносные программы, способные размножаться в сетях без необходимости вмешательства человека.
			Они используют слабые места сети для проникновения в системы без разрешения.
			Попав внутрь, они могут либо доставить вредоносные полезные нагрузки, либо продолжить размножаться на других уязвимых устройствах.
			Черви могут инициировать быстрые и эскалационные заражения, что приводит к огромным сбоям и даже потенциальным атакам типа «отказ в обслуживании».

		-	Трояны (Trojans)
			Также известные как троянские кони, они маскируются под настоящее программное обеспечение, чтобы обманом заставить пользователей запустить их.
			При проникновении в систему они создают бэкдоры, позволяя злоумышленникам получить несанкционированный контроль удаленно.
			Трояны могут быть использованы в качестве оружия для кражи конфиденциальных данных, таких как пароли или финансовая информация, и организации других вредоносных действий на скомпрометированной системе.

		-	Программы-вымогатели (Ransomware)
			Этот тип вредоносного ПО шифрует файлы в системе цели, делая их недоступными.
			Затем злоумышленники требуют выкуп в обмен на ключ дешифрования, фактически удерживая данные жертвы для выкупа.
			Последствия атак программ-вымогателей могут ослабить как организации, так и отдельных лиц, что приводит к серьезному финансовому и репутационному ущербу.

		-	Шпионское ПО (Spyware)
			Этот тип вредоносного ПО скрытно собирает конфиденциальные данные и действия пользователя без его согласия.
			Он может отслеживать привычки просмотра в Интернете, записывать нажатия клавиш и захватывать учетные данные для входа, создавая серьезный риск для конфиденциальности и безопасности.
			Украденные данные часто отправляются на удаленные серверы с вредоносными целями.

		-	Рекламное ПО (Adware)
			Хотя и не столь разрушительное, рекламное ПО все равно может быть раздражающим и представлять угрозу безопасности.
			Оно показывает непрошеную и навязчивую рекламу на зараженных системах, что часто приводит к плохому пользовательскому опыту.
			Рекламное ПО также может отслеживать поведение пользователя и собирать данные для целевой рекламы.

		-	Ботнеты (Botnets)
			Это сети взломанных устройств, часто называемых ботами или зомби, контролируемые центральным сервером управления и контроля (C2).
			Ботнеты могут использоваться для различных вредоносных действий, включая запуск DDoS-атак, распространение спама или распространение других вредоносных программ.

		-	Руткиты (Rootkits)
			Это скрытые формы вредоносного ПО, предназначенные для получения несанкционированного доступа и контроля над основными компонентами («корнем») операционной системы.
			Они изменяют системные функции, чтобы скрыть свое присутствие, что делает их чрезвычайно сложными для обнаружения и устранения.
			Злоумышленники могут использовать руткиты для поддержания длительного доступа и обхода протоколов безопасности.

		-	Бэкдоры/RAT (Remote Access Trojans)
			Бэкдоры и RAT созданы для предоставления несанкционированного доступа и контроля над скомпрометированными системами из удаленных мест.
			Злоумышленники могут использовать их для сохранения длительного контроля, извлечения данных или инициирования дополнительных атак.

		-	Дропперы (Droppers)
			Это вид вредоносного ПО, используемого для транспортировки и установки дополнительных вредоносных нагрузок на зараженные системы.
			Они служат каналом для другого вредоносного ПО, обеспечивая скрытую установку и выполнение более сложных угроз.

		-	Похитители информации (Information Stealers)
			Они предназначены для нацеливания и извлечения конфиденциальных данных, таких как учетные данные для входа, личная информация или интеллектуальная собственность, для вредоносных целей.
			Это включает в себя кражу личных данных или продажу данных в темной паутине.

	Эти примеры едва ли скользят по поверхности типов вредоносного ПО, с которыми мы сталкиваемся в сегодняшнем ландшафте угроз.
	Важно помнить, что киберпреступники постоянно совершенствуют свои стратегии, методы и варианты вредоносного ПО, чтобы избежать обнаружения и использовать новые уязвимости.

	+++++++++++++++++++
	+ Malware Samples +
	+++++++++++++++++++

	Когда дело доходит до усиления нашей киберзащиты и понимания существующих угроз, иногда нам приходится погружаться в темные уголки кибермира.
	Это означает получение в свои руки реальных образцов вредоносного ПО, будь то для исследований, анализа или образовательных целей.
	Однако крайне важно подчеркнуть, что работа с реальными образцами вредоносного ПО должна осуществляться в безопасной и контролируемой среде, чтобы предотвратить случайные заражения и потенциальный вред.
	Вот некоторые ресурсы, как бесплатные, так и платные, где мы можем найти такие образцы.

		-	VirusShare (https://virusshare.com/)
			Отличный ресурс для исследователей вредоносного ПО, VirusShare содержит обширную коллекцию образцов вредоносного ПО.
			В настоящее время в их репозитории более 30 миллионов образцов, все из которых находятся в свободном доступе для общественности.

		-	Hybrid Analysis (https://www.hybrid-analysis.com/)
			Этот веб-сайт позволяет нам отправлять файлы для анализа вредоносного ПО.
			Однако у них также есть публичный канал своих анализов, где часто публикуются образцы вредоносного ПО.

		-	TheZoo (https://github.com/ytisf/theZoo)
			Репозиторий GitHub, содержащий коллекцию живых вредоносных программ для анализа и обучения.
			Репозиторий также содержит дополнительную информацию о каждом образце, например, его семейство и тип выполняемых им действий.

		-	Malware-Traffic-Analysis.net (https://malware-traffic-analysis.net/)
			Этот веб-сайт предоставляет упражнения по анализу трафика, которые могут быть чрезвычайно полезны для людей, пытающихся узнать о шаблонах трафика вредоносных программ.
			Они часто предоставляют pcap-файлы фактического трафика вредоносных программ, которые могут быть весьма информативны.

		-	VirusTotal (https://www.virustotal.com/)
			VirusTotal проверяет элементы с помощью более 70 антивирусных сканеров и служб блокировки URL/доменов, в дополнение к множеству инструментов для извлечения сигналов из изучаемого контента.
			Любой пользователь может выбрать файл на своем компьютере с помощью своего браузера и отправить его в VirusTotal.
			VirusTotal предлагает ряд методов отправки файлов, включая основной общедоступный веб-интерфейс, загрузчики для настольных компьютеров, расширения браузера и программный API.

		-	ANY.RUN (https://app.any.run/)
			Интерактивная онлайн-песочница для анализа вредоносных программ.
			Служба позволяет исследователям анализировать поведение вредоносных программ, запуская образцы в контролируемой среде.
			Хотя он предлагает как бесплатные, так и платные уровни, даже бесплатная версия предоставляет доступ к публичным заявкам, которые могут включать различные образцы вредоносных программ.

		-	Contagio Malware Dump (https://contagiodump.blogspot.com/)
			Contagio Dump — это коллекция образцов вредоносных программ, отчетов об угрозах и связанных с ними ресурсов, созданная исследователем вредоносных программ по имени Мила.
			Сайт предоставляет прямой анонимный доступ к широкому спектру образцов вредоносных программ, включая различные типы троянов, червей, программ-вымогателей и эксплойтов.
			Он часто используется исследователями и аналитиками безопасности для изучения поведения вредоносных программ и разработки методов смягчения последствий.

		-	VX Underground (https://www.vx-underground.org/)
			VX-Underground — одна из крупнейших коллекций исходного кода вредоносных программ, статей и документов в Интернете.
			Она направлена ​​на сбор, сохранение и распространение всех видов материалов, связанных с вредоносными программами, эксплойтами и культурой взлома.
			Этот ресурс представляет ценность для исследователей и энтузиастов безопасности, которые хотят изучить конструкцию и поведение вредоносных программ с более технической и кодоориентированной точки зрения.

		-	Cuckoo Sandbox (https://cuckoosandbox.org/index.html)
			Песочница Cuckoo — самая известная песочница в сообществе анализа вредоносных программ.
        	Она была разработана в рамках проекта Google Summer of Code в 2010 году.
        	Это проект с открытым исходным кодом, который вы часто увидите развернутым в средах SOC и домашних лабораториях энтузиастов.
        	Преимущества песочницы Cuckoo включают огромную поддержку сообщества, простую для понимания документацию и множество настроек.
        	Вы можете развернуть его в своей сети и позволить подписям сообщества помочь вам определить, какие файлы являются вредоносными, а какие — безвредными, благодаря обширному корпусу подписей сообщества, которые идут с ним.

        	Песочница Cuckoo была заархивирована, и ожидается обновление.
        	Она также не поддерживает Python 3, что делает ее устаревшей на данный момент.
        	Однако не все потеряно, потому что у нас есть альтернативы

			Вот список ресурсов по данной песочнице		-	https://github.com/cuckoosandbox
															https://cuckoo.readthedocs.io/en/latest/introduction/what/
															https://www.varonis.com/blog/cuckoo-sandbox
															https://cuckoo.cert.ee/
															https://sandbox.pikker.ee/
		
		-	CAPE Sandbox (https://capev2.readthedocs.io/en/latest/)
			Это немного более продвинутая версия песочницы Cuckoo.
       		Она поддерживает отладку и дамп памяти для поддержки распаковки упакованных вредоносных программ.
        	Хотя новички могут использовать эту песочницу, для ее полноценного использования требуются продвинутые знания.
        	Версия этой песочницы для сообщества доступна в сети, с помощью которой можно выполнить тестовый запуск перед установкой.
        	Песочница CAPE Sandbox на данный момент активно разрабатывается и поддерживает Python 3.

			Вот список ресурсов по данной песочнице		-	https://github.com/kevoreilly/CAPEv2
															https://medium.com/@rizqisetyokus/building-capev2-automated-malware-analysis-sandbox-part-1-da2a6ff69cdb
															https://endsec.au/blog/building-an-automated-malware-sandbox-using-cape/
															https://mariohenkel.medium.com/using-cape-sandbox-and-fog-to-analyze-malware-on-physical-machines-4dda328d4e2c

	++++++++++++++++++++++++++++++++
	+ Malware/Evidence Acquisition +
	++++++++++++++++++++++++++++++++

	Когда дело доходит до сбора доказательств во время расследования цифровой криминалистики или реагирования на инцидент, наличие правильных инструментов для выполнения образов дисков и получения памяти имеет решающее значение.
	Давайте обсудим некоторые бесплатные решения, которые мы можем использовать для сбора необходимых данных для наших расследований.

		//////////////////////////////
		/// Disk Imaging Solutions ///
		//////////////////////////////
	
		-	FTK Imager (https://www.exterro.com/ftk-imager)
			Разработанный AccessData (теперь приобретен Exterro), FTK Imager является одним из наиболее широко используемых инструментов создания образов дисков в области кибербезопасности.
			Он позволяет нам создавать идеальные копии (или образы) компьютерных дисков для анализа, сохраняя целостность доказательств.
			Он также позволяет нам просматривать и анализировать содержимое устройств хранения данных, не изменяя данные.

		-	OSFClone (https://www.osforensics.com/tools/create-disk-images.html)
			Бесплатная утилита с открытым исходным кодом, разработанная для создания и клонирования криминалистических образов дисков.
			Она проста в использовании и поддерживает широкий спектр файловых систем.

		-	DD и DCFLDD (https://medium.com/@abhinavnandgaonkar98/execute-the-three-commands-dd-ddfldd-dc3dd-46f3e2a5195)
			Обе являются утилитами командной строки, доступными в системах на базе Unix (включая Linux и MacOS).
			DD — это универсальный инструмент, включенный в большинство систем на базе Unix по умолчанию
			В то время как DCFLDD — это расширенная версия DD с функциями, специально полезными для криминалистики, такими как хеширование

		////////////////////////////////////
		/// Memory Acquisition Solutions ///
		////////////////////////////////////

		-	DumpIt (https://www.magnetforensics.com/resources/magnet-dumpit-for-windows/)
			Простая утилита, которая генерирует дамп физической памяти машин Windows и Linux.
			В Windows она объединяет 32- и 64-разрядную физическую память системы в один выходной файл, что делает ее чрезвычайно простой в использовании.

		-	MemDump (http://www.nirsoft.net/utils/nircmd.html)
			MemDump — это бесплатная, простая утилита командной строки, которая позволяет нам захватывать содержимое оперативной памяти системы.
			Она весьма полезна в криминалистических расследованиях или при анализе системы на предмет вредоносной активности.
			Ее простота и удобство использования делают ее популярным выбором для получения памяти.

		-	Belkasoft RAM Capturer (https://belkasoft.com/ram-capturer)
			Это еще один мощный инструмент, который мы можем использовать для получения памяти, предоставляемый бесплатно Belkasoft.
			Он может захватывать оперативную память работающего компьютера Windows, даже если есть активная защита от отладки или от дампа.
			Это делает ее высокоэффективным инструментом для извлечения как можно большего количества данных во время реального криминалистического расследования.

		-	Magnet RAM Capture (https://www.magnetforensics.com/resources/magnet-ram-capture/)
			Разработанный Magnet Forensics, этот инструмент предоставляет бесплатный и простой способ захвата энергозависимой памяти системы.

		-	LiME (Linux Memory Extractor - https://github.com/504ensicsLabs/LiME)
			LiME — это загружаемый модуль ядра (LKM), который позволяет захватывать энергозависимую память.
			Он уникален тем, что разработан так, чтобы быть прозрачным для целевой системы, избегая многих распространенных мер противодействия криминалистике.
		
		-	Volatility (https://github.com/volatilityfoundation/volatility)
			Это бесплатный инструмент для криминалистики памяти, разработанный и поддерживаемый Volatility Foundation
			Он обычно используется для извлечения цифровых артефактов из образцов энергозависимой памяти (RAM)
			Volatility написан на Python и состоит из плагинов и модулей Python, разработанных как способ анализа дампов памяти по принципу «включай и работай».
			Доступен для Windows, Linux и Mac OS и написан исключительно на Python.

		////////////////////////////////////////////
		/// Other Evidence Acquisition Solutions ///
		////////////////////////////////////////////

		-	KAPE (Kroll Artifact Parser and Extractor - https://www.kroll.com/en/services/cyber-risk/incident-response-litigation-support/kroll-artifact-parser-extractor-kape)
			KAPE — это программа сортировки, разработанная для быстрого и эффективного сбора и анализа артефактов.
			Она фокусируется на целевом сборе, сокращая объем собираемых данных и время, необходимое для анализа.
			KAPE бесплатна для использования и является важным инструментом в нашем наборе инструментов цифровой криминалистики.

		-	Velociraptor (https://github.com/Velocidex/velociraptor)
			Velociraptor — это универсальный инструмент, разработанный для реагирования на инциденты на основе хоста и цифровой криминалистики.
			Он позволяет быстро и целенаправленно собирать данные с большого количества машин.
			Velociraptor использует язык запросов Velocidex (VQL), мощный инструмент для сбора и обработки артефактов.
			Открытый исходный код Velociraptor делает его ценным бесплатным инструментом в нашем арсенале.
		
		-	Eric Zimmerman's tools (https://ericzimmerman.github.io/#!index.md)
			Эрик Циммерман создал набор криминалистических инструментов, используемых для анализа артефактов Windows, называемых EZTools.
			Вот список некоторых утилит, которые входят в его набо: EZviewer, WxTCmd, JLECmd, AmcacheParser, MFTECmd, LECmd и другие
			Также рекумендую охнакомиться со следующими ресурсами:

				i)		Get-ZimmermanTools (https://www.sans.org/tools/get-zimmermantools/)
						Скрипт PowerShell для автоматического обнаружения и обновления всех инструментов Zimmerman (в среде Windows)
				
				ii)		EZTools (https://www.sans.org/tools/ez-tools/)

				iii)	Windows Installation Guide (https://cylab.be/blog/290/install-eric-zimmermans-forensics-toolkit)

				iv)		GitHub page Eric Zimmerman (https://github.com/EricZimmerman)
	
		-	Autopsy (https://www.autopsy.com/)
			Это ведущая платформа криминалистики с открытым исходным кодом, которая является быстрой, простой в использовании и способна анализировать все типы мобильных устройств и цифровых носителей.
			Ее архитектура подключаемых модулей обеспечивает расширяемость с помощью разработанных сообществом или специально созданных модулей.
			Autopsy создана, чтобы удовлетворить потребности специалистов в области правоохранительных органов, национальной безопасности, поддержки судебных разбирательств и корпоративных расследований
		
		-	Redline (https://fireeye.market/apps/211364)
			Это инструмент реагирования на инциденты, разработанный и свободно распространяемый FireEye.
    		Он может собирать криминалистические данные из системы и помогать с собранной криминалистической информацией.

	+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	+ Malware Analysis Definition, Purpose, & Common Activities +
	+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

	Процесс понимания поведения и внутренней работы вредоносного ПО известен как анализ вредоносного ПО, важнейший аспект кибербезопасности, который помогает понять угрозу, создаваемую вредоносным ПО, и разработать эффективные контрмеры.

	В нашем стремлении к анализу вредоносного ПО мы углубляемся в код, структуру и функциональность вредоносного ПО, чтобы получить глубокое понимание его цели, методов распространения и потенциального воздействия на целевые системы.
	Отвечая на соответствующие вопросы, такие как

		-	тип вредоносного ПО (например, шпионский бот, кейлоггер, программа-вымогатель)
		-	его предполагаемое поведение на конечных точках
		-	последствия его выполнения (включая сгенерированные артефакты в сети или конечной точке и возможные подключения к серверам управления и контроля (C2))
		-	степень ущерба, который оно может нанести
		-	принадлежность к определенным группам угроз и создание правил обнаружения на основе анализа для обнаружения вредоносного ПО во всей сети, мы можем разработать надежные механизмы защиты от этих угроз.

	Анализ вредоносных программ служит нескольким основным целям, таким как:

		-	Detection and Classification (Обнаружение и классификация)
			С помощью анализа вредоносных программ мы можем идентифицировать и классифицировать различные типы угроз на основе их уникальных характеристик, сигнатур или шаблонов.
			Это позволяет нам разрабатывать правила обнаружения и дает специалистам по безопасности возможность получить полное представление о природе вредоносных программ, с которыми они сталкиваются.

		-	Reverse Engineering (Обратная разработка)
			Анализ вредоносных программ часто включает в себя сложный процесс обратной разработки кода вредоносных программ для выявления их базовых операций и используемых методов.
			Это может раскрыть скрытые функции, методы шифрования, сведения об инфраструктуре управления и контроля, а также методы, используемые для запутывания и уклонения.

		-	Behavioral Analysis (Поведенческий анализ)
			Тщательно изучая поведение вредоносных программ во время выполнения, мы получаем представление о их действиях, таких как изменения в файловой системе, сетевые коммуникации, изменения в системном реестре и попытки использовать уязвимости.
			Этот анализ предоставляет бесценную информацию о влиянии вредоносных программ на зараженные системы и помогает в разработке потенциальных контрмер.

		-	Threat Intelligence (Анализ угроз)
			С помощью анализа вредоносного ПО исследователи угроз могут собирать критически важную информацию о злоумышленниках, их тактиках, методах и процедурах (TTP), а также о происхождении вредоносного ПО.
			Эти ценные данные могут быть переданы более широкому сообществу безопасности для улучшения возможностей обнаружения, предотвращения и реагирования.

	Методы, используемые при анализе вредоносного ПО, охватывают широкий спектр методов и инструментов, включая:

		-	Static Analysis (Статический анализ)
			Этот подход включает в себя изучение кода вредоносного ПО без его выполнения, изучение структуры файла, идентификацию строк, поиск известных сигнатур и изучение метаданных для получения предварительной информации о характеристиках вредоносного ПО.

		-	Dynamic Analysis (Динамический анализ)
			Динамический анализ подразумевает выполнение вредоносного ПО в контролируемой среде, такой как песочница или виртуальная машина, для наблюдения за его поведением и захвата его действий во время выполнения.
			Это включает в себя мониторинг сетевого трафика, системных вызовов, изменений файловой системы и других взаимодействий.

		-	Code Analysis (Анализ кода)
			Анализ кода (включая обратную разработку) и включает в себя дизассемблирование или декомпиляцию кода вредоносного ПО для понимания его логики, функций, алгоритмов и используемых методов.
			Это помогает в выявлении скрытых функций, методов эксплуатации, методов шифрования, сведений об инфраструктуре управления и контроля и методов, используемых для сокрытия и уклонения.
			В принципе, анализ кода также может помочь в обнаружении потенциальных индикаторов компрометации (IOC).

		-	Memory Analysis (Анализ памяти)
			Анализ взаимодействия вредоносного ПО с системной памятью помогает в выявлении внедренного кода, хуков или других манипуляций во время выполнения.
			Это может быть полезно для обнаружения руткитов, анализа методов антианализа или выявления вредоносных полезных нагрузок.

		-	Malware Unpacking (Распаковка вредоносного ПО)
			Этот метод относится к процессу извлечения и изоляции скрытого вредоносного кода внутри вредоносного ПО, которое использует методы упаковки для избежания обнаружения.
			Упаковщики используются авторами вредоносного ПО для сжатия, шифрования или обфускации своего вредоносного кода, что затрудняет антивирусному программному обеспечению и другим инструментам безопасности идентификацию угрозы.
			Распаковка включает в себя обратную разработку этих методов упаковки для выявления исходного, незапутанного кода для дальнейшего анализа.
			Это может позволить исследователям понять функциональность, поведение и потенциальное воздействие вредоносного ПО.

	В сегодняшнее время использование анализа вредоносных программ играет ключевую роль в наших стратегиях защиты от кибербезопасности.
	Поскольку киберугрозы становятся все более изощренными, мы должны постоянно расширять наши возможности по выявлению, анализу и снижению рисков, создаваемых вредоносным программным обеспечением.

	Благодаря анализу вредоносных программ мы получаем бесценную информацию о природе угроз, с которыми сталкиваемся.
	Понимание конкретных атрибутов вредоносных программ позволяет нам соответствующим образом адаптировать тактику реагирования, точно устраняя каждую угрозу.

=====================================================================
* Anti-analysis techniques *
****************************

Пока исследователи безопасности разрабатывают методы и инструменты для анализа вредоносных программ, авторы вредоносных программ работают над тем, чтобы сделать эти инструменты и методы неэффективными.
Ниже приведены некоторые методы, которые авторы вредоносных программ используют для того же самого.

    +++++++++++++++++++++++++++
    + Packing and Obfuscation +
    +++++++++++++++++++++++++++

    Авторы вредоносных программ часто используют упаковку и обфускацию, чтобы усложнить жизнь аналитика.
    
    Упаковщик обфусцирует, сжимает или шифрует содержимое вредоносных программ.
    Эти методы затрудняют статический анализ вредоносных программ.
    В частности, упакованная вредоносная программа не будет показывать важную информацию при запуске строкового поиска по ней.
    
    Например, если запустить строковый поиск (string) по PE файлу.
    То мы заметим, что этот файл содержит в основном мусорные строки, которые не представляют для нас особой ценности.
    
    Однако, если запустить pecheck, чтобы посмотреть, что еще мы получим.
    Как и предполагалось, мы видим, что исполняемый файл имеет характеристики, типичные для упакованного исполняемого файла, согласно pecheck.
    Мы заметим, что в образце нет раздела .text, а другие разделы имеют разрешения на выполнение, что показывает, что эти разделы содержат исполняемые инструкции или будут заполнены исполняемыми инструкциями во время выполнения.
    Мы также увидим, что в этом образце не так много импортов, которые могли бы показать нам его функциональность.

    Для анализа упакованных исполняемых файлов первым шагом обычно является распаковка образца.

    +++++++++++++++++++
    + Sandbox evasion +
    +++++++++++++++++++

    Как мы уже говорили, мы всегда можем запустить образец в песочнице, чтобы проанализировать его.
    Во многих случаях это может помочь нам проанализировать образцы, которые обходят наши основные методы статического анализа.
    Однако у авторов вредоносных программ есть некоторые трюки в рукаве, которые мешают этим усилиям.
    Вот некоторые из этих методов:

        -   Long sleep calls
            Авторы вредоносных программ знают, что песочницы работают в течение ограниченного времени.
            Поэтому они программируют вредоносную программу так, чтобы она не выполняла никаких действий в течение длительного времени после выполнения.
            Это часто достигается с помощью длительных вызовов сна.
            Цель этого метода — истечь времени ожидания песочницы.

        -   User activity detection
            Некоторые образцы вредоносных программ будут ждать активности пользователя, прежде чем выполнять вредоносные действия.
            Предпосылка этого метода заключается в том, что в песочнице не будет пользователя. Поэтому не будет движения мыши или ввода текста на клавиатуре.
            Расширенное вредоносное ПО также обнаруживает закономерности в движениях мыши, которые часто используются в автоматизированных песочницах.
            Этот метод предназначен для обхода обнаружения автоматизированной песочницы.

        -   Footprinting user activity
            Некоторые вредоносные программы проверяют файлы или активность пользователя
            Например, есть ли какие-либо файлы в истории MS Office или истории просмотра интернета.
            Если активность не обнаружена или незначительна, вредоносная программа будет считать машину песочницей и завершит работу.

        -   Detecting VMs
            Песочницы работают на виртуальных машинах.
            Виртуальные машины оставляют артефакты, которые могут быть идентифицированы вредоносным ПО.
            Например, некоторые драйверы, установленные на виртуальных машинах, работающих на VMWare или Virtualbox, выдают тот факт, что машина является виртуальной машиной.
            Авторы вредоносных программ часто связывают виртуальные машины с песочницами и завершают работу вредоносного ПО, если обнаруживается виртуальная машина.

    Приведенный выше список не является исчерпывающим, но дает нам представление о том, чего ожидать при анализе вредоносного ПО.

=====================================================================
* Windows Internals *
*********************

Для проведения эффективного анализа вредоносных программ необходимо глубокое понимание внутренних компонентов ОС (Операционной Системы).

Операционные системы Windows работают в двух основных режимах:

	-	User Mode
		В этом режиме работает большинство приложений и пользовательских процессов.
		Приложения в пользовательском режиме имеют ограниченный доступ к системным ресурсам и должны взаимодействовать с операционной системой через интерфейсы прикладного программирования (API).
		Эти процессы изолированы друг от друга и не могут напрямую получать доступ к оборудованию или критически важным системным функциям.
		Однако в этом режиме вредоносное ПО все еще может манипулировать файлами, параметрами реестра, сетевыми подключениями и другими доступными пользователю ресурсами, а также может попытаться повысить привилегии, чтобы получить больший контроль над системой.

	-	Kernel Mode
		В отличие от User Mode, режим ядра является высокопривилегированным режимом, в котором работает ядро ​​Windows.
		Ядро имеет неограниченный доступ к системным ресурсам, оборудованию и критически важным функциям.
		Оно предоставляет основные службы операционной системы, управляет системными ресурсами и обеспечивает безопасность и стабильность.
		Драйверы устройств, которые облегчают связь с аппаратными устройствами, также работают в режиме ядра.
		Если вредоносное ПО работает в режиме ядра, оно получает повышенный контроль и может манипулировать поведением системы, скрывать свое присутствие, перехватывать системные вызовы и вмешиваться в механизмы безопасности.

	++++++++++++++++++++++++++++++++++++++++
	+ Windows Architecture At A High Level +
	++++++++++++++++++++++++++++++++++++++++

	На схеме ниже показана упрощенная версия архитектуры Windows.

		'''''''''''''    '''''''''''''    '''''''''''''''    '''''''''''''''
		' System    '    ' Service   '    ' 	User	'    ' Environment '
		' Support   '    ' Processes '    ' Application '    ' Subsystem   '
		' Processes '    '			 '    '				'    '			   '
		'''''''''''''    '''''''''''''    '''''''''''''''    '''''''''''''''
		      |		       |	         |	            			|
		      |		 ''''''''''''''''''''''''''''''''	    		|
		      |		 '			Subsystem DLLS		'	    		|
		      |		 ''''''''''''''''''''''''''''''''	    		|
		      |		       |		 	 |		    				|
		      |		 ''''''''''''''''''''''''''''''''	    		|
		      |		 ' 	    	NTDLL.DLL			'	    		|
		      |		 ''''''''''''''''''''''''''''''''	    		|
		USER  |		       |			 |		    				|	MODE
		--------------------------------------------------------------------
		KERNEL							      							MODE
		      ''''''''''''''''''''''''''''''''''''		
		      '		   Executive		 '				''''''''''''
		      ''''''''''''''''''''''''''''''''''''		' Windowing'
		      '     Kernel     ' Device Drivers  '		'    and   '
		      ''''''''''''''''''''''''''''''''''''		' Graphics '
		      ' Hardware Abstraction Layer (HAL) '		''''''''''''
		      ''''''''''''''''''''''''''''''''''''

	Упрощенная архитектура Windows включает в себя компоненты как пользовательского режима, так и режима ядра, каждый из которых имеет свои собственные обязанности в функционировании системы:

		////////////////////////////
		/// User-mode Components ///
		////////////////////////////

		Компоненты пользовательского режима — это те части операционной системы, которые не имеют прямого доступа к оборудованию или структурам данных ядра.
		Они взаимодействуют с системными ресурсами через API и системные вызовы.
		Давайте обсудим некоторые из них:

			-	System Support Processes (Процессы поддержки системы)
				Это основные компоненты, которые предоставляют важные функции и службы, такие как:
					i.		процессы входа в систему (winlogon.exe)
					ii.		диспетчер сеансов (smss.exe)
					iii.	диспетчер управления службами (services.exe).
				
				Это не службы Windows, но они необходимы для правильного функционирования системы.

			-	Service Processes (Процессы служб)
				Эти процессы размещают службы Windows, такие как:
					i.		служба обновления Windows (Windows Update Service)
					ii.		ланировщик заданий (Task Scheduler)
					iii.	служба очереди печати (Print Spooler)

				​​Они обычно работают в фоновом режиме, выполняя задачи в соответствии со своей конфигурацией и параметрами.

			-	User Applications (Пользовательские приложения)
				Это процессы, созданные пользовательскими программами, включая как 32-разрядные, так и 64-разрядные приложения.
				Они взаимодействуют с операционной системой через API, предоставляемые Windows.
				Эти вызовы API перенаправляются в NTDLL.DLL, запуская переход из пользовательского режима в режим ядра, где выполняется системный вызов.
				Затем результат возвращается в приложение пользовательского режима, и происходит переход обратно в пользовательский режим.

			-	Environment Subsystems (Подсистемы среды)
				Эти компоненты отвечают за предоставление сред выполнения для определенных типов приложений или процессов.
				Они включают в себя подсистему Win32, POSIX и OS/2.

			-	Subsystem DLLs (DLL подсистем)
				Эти динамически подключаемые библиотеки преобразуют документированные функции в соответствующие внутренние системные вызовы, в первую очередь реализованные в NTDLL.DLL.
				Примерами являются kernelbase.dll, user32.dll, wininet.dll и advapi32.dll

		//////////////////////////////
		/// Kernel-mode Components ///
		//////////////////////////////

		Компоненты режима ядра — это те части операционной системы, которые имеют прямой доступ к оборудованию и структурам данных ядра.
		К ним относятся:

			-	Executive
				Этот верхний уровень в режиме ядра доступен через функции из NTDLL.DLL.
				Он состоит из таких компонентов, как:
					.)	I/O Manager
					.)	Object Manager
					.)	Security Reference Monitor
					.)	Process Manager
					.)	и других, управляющих основными аспектами операционной системы, такими как операции ввода-вывода, управление объектами, безопасность и процессы.

				Сначала он выполняет некоторые проверки, а затем передает вызов ядру или вызывает соответствующий драйвер устройства для выполнения запрошенной операции.

			-	Kernel
				Этот компонент управляет системными ресурсами, предоставляя низкоуровневые службы, такие как планирование потоков, диспетчеризация прерываний и исключений и многопроцессорная синхронизация.

			-	Device Drivers
				Эти программные компоненты позволяют ОС взаимодействовать с аппаратными устройствами.
				Они служат посредниками, позволяя системе управлять и контролировать аппаратные и программные ресурсы.

			-	Hardware Abstraction Layer (HAL)
				Этот компонент обеспечивает уровень абстракции между аппаратными устройствами и ОС.
				Она позволяет разработчикам программного обеспечения взаимодействовать с оборудованием согласованным и независимым от платформы образом.

			-	Windowing and Graphics System (Win32k.sys)
				Эта подсистема отвечает за управление графическим пользовательским интерфейсом (GUI) и отображение визуальных элементов на экране.

	+++++++++++++++++++++++++
	+ Windows API Call Flow +
	+++++++++++++++++++++++++

	Теперь давайте обсудим, что происходит за кулисами, когда пользовательское приложение вызывает функцию Windows API.

	Вредоносное ПО часто использует вызовы API Windows для взаимодействия с системой и выполнения вредоносных операций.
	Понимая внутренние детали функций API, их параметры и ожидаемое поведение, аналитики могут выявлять подозрительное или несанкционированное использование API.

	Рассмотрим пример потока вызовов API Windows, где приложение пользовательского режима пытается получить доступ к привилегированным операциям и системным ресурсам с помощью функции ReadProcessMemory.
	ReadProcessMemory	-	https://learn.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-readprocessmemory
	Эта функция позволяет процессу читать память другого процесса.

	
						'''''''''''''''''''''
						' User Application	'
						'	(shell.exe)		'
						'''''''''''''''''''''
								|		^
		ReadProcessMemory		|		|
								/		|
						'''''''''''''''''''''
						'		Kernel 32	'<----
						'''''''''''''''''''''    |
								|		----------
		NtReadVirtualMemory		|		|
								/		|
						'''''''''''''''''''''
						'		NTDLL		'<-----------
						'''''''''''''''''''''		    |	
							|				    		|
				System Call	|				    		|
					        |				    		|										User Mode
		------------------------------------------------|--------------------------------------------------
							|							|	Returns From System Call			Kernel Mode
							/							|
				''''''''''''''''''''''''''''''''		|
				'		Systemcall Table       '		|
				''''''''''''''''''''''''''''''''		|
						|	Contains pointer to the 	|
						|	corresponding 	    		|
						|	kernel function		''''''''''''''''''''''''''
						|---------------------->' Nt!NtReadVirtualMemory '
												''''''''''''''''''''''''''

	При вызове этой функции ей также передаются некоторые обязательные параметры, такие как:
		.)	дескриптор целевого процесса (handle to the target process)
		.)	исходный адрес для чтения (source address to read from)
		.)	буфер в собственном пространстве памяти для хранения считанных данных (buffer in its own memory space to store the read data)
		.)	количество байтов для чтения (number of bytes to read)

	Ниже приведен синтаксис функции ReadProcessMemory WINAPI согласно документации Microsoft

		BOOL ReadProcessMemory(
			[in]  HANDLE  hProcess,
			[in]  LPCVOID lpBaseAddress,
			[out] LPVOID  lpBuffer,
			[in]  SIZE_T  nSize,
			[out] SIZE_T  *lpNumberOfBytesRead
		);

	ReadProcessMemory — это функция API Windows, которая принадлежит библиотеке kernel32.dll.
	Таким образом, этот вызов вызывается через модуль kernel32.dll, который служит интерфейсом пользовательского режима для API Windows.
	Внутри модуль kernel32.dll взаимодействует с модулем NTDLL.DLL, который предоставляет низкоуровневый интерфейс для ядра Windows.
	Затем этот запрос функции транслируется в соответствующий вызов Native API, который является NtReadVirtualMemory.

	Инструкция syscall (System Call) запускает системный вызов с использованием параметров, заданных в предыдущих инструкциях.
	Она передает управление из пользовательского режима в режим ядра, где ядро ​​выполняет запрошенную операцию после проверки параметров и прав доступа вызывающего процесса.

	Если запрос авторизован, поток переходит из пользовательского режима в режим ядра.
	Ядро поддерживает таблицу, известную как таблица дескрипторов системных служб (SSDT) ​​или таблица syscall (таблица системных вызовов), которая представляет собой структуру данных, содержащую указатели на различные системные сервисные процедуры.
	Эти процедуры отвечают за обработку системных вызовов, выполняемых приложениями пользовательского режима.
	Каждая запись в таблице syscall соответствует определенному номеру системного вызова, а связанный указатель указывает на соответствующую функцию ядра, которая реализует запрошенную операцию.

	Системный вызов, отвечающий за ReadProcessMemory, выполняется в ядре, где используются механизмы управления памятью и изоляции процессов Windows.
	Ядро выполняет необходимые проверки, проверки доступа и операции с памятью для чтения памяти из целевого процесса.
	Ядро извлекает страницы физической памяти, соответствующие запрошенным виртуальным адресам, и копирует данные в предоставленный буфер.

	После того, как ядро ​​закончило чтение памяти, оно переводит поток обратно в пользовательский режим, и управление возвращается исходному приложению пользовательского режима.
	Затем приложение может получить доступ к данным, которые были считаны из памяти целевого процесса, и продолжить его выполнение.

	+++++++++++++++++++++++
	+ Portable Executable +
	+++++++++++++++++++++++

	Операционные системы Windows используют формат Portable Executable (PE) для инкапсуляции исполняемых программ, DLL (библиотек динамической компоновки) и других неотъемлемых компонентов системы.
	В сфере анализа вредоносных программ понимание сложного формата файла PE является незаменимым.
	Это позволяет нам получить существенные сведения о структуре исполняемого файла, операциях и потенциально вредоносных действиях, встроенных в файл.

	Файлы PE содержат широкий спектр типов данных, включая:

		-	исполняемые файлы /  executables (.exe)
		-	библиотеки динамической компоновки / dynamic link libraries(.dll)
		-	модули ядра / kernel modules (.srv)
		-	приложения панели управления / control panel applications(.cpl)
		-	и многое другое

	Формат файла PE по сути является структурой данных, содержащей важную информацию, необходимую загрузчику ОС Windows для управления исполняемым кодом, эффективно загружая его в память.

		///////////////////
		/// PE Sections ///
		///////////////////

		Структура PE также содержит таблицу разделов, элемент, состоящий из нескольких разделов, предназначенных для различных целей.
		Разделы по сути являются хранилищами, где хранится фактическое содержимое файла, включая данные, ресурсы, используемые программой, и исполняемый код.
		Раздел .text часто подвергается тщательной проверке на предмет потенциальных артефактов, связанных с атаками с внедрением.

		Обычные разделы PE включают:

			-	Text Section (.text)
				Концентратор, где находится исполняемый код программы.

			-	Data Section (.data)
				Хранилище для инициализированных глобальных и статических переменных данных.

			-	Read-only initialized data (.rdata)
				Размещает данные только для чтения, такие как константные значения, строковые литералы и инициализированные глобальные и статические переменные.

			-	Exception information (.pdata)
				Набор записей таблицы функций, используемых для обработки исключений.

			-	BSS Section (.bss)
				Содержит неинициализированные глобальные и статические переменные данных.

			-	Resource Section (.rsrc)
				Содержит ресурсы, такие как изображения, значки, строки и информацию о версии.

			-	Import Section (.idata)
				Сведения о функциях, импортированных из других DLL.

			-	Export Section (.edata)
				Сведения о функциях, экспортируемых исполняемым файлом.

			-	Relocation Section (.reloc)
				Сведения о перемещении кода и данных исполняемого файла при загрузке по другому адресу памяти.

		Мы можем визуализировать разделы переносимого исполняемого файла с помощью такого инструмента, как pestudio и/или x64dbg
		
		PeStudio	-	это инструмент анализа вредоносных программ.
		Он используется для статического анализа образцов вредоносных программ.
		Используйте этот инструмент для поиска подозрительных артефактов в исполняемом файле (.exe). (например) PE-заголовки, индикаторы, строки, импорты, экспорты, библиотеки, разделы и т. д.
		PEStudio	-	https://www.winitor.com/download

		x64dbg	-	это отладчик с открытым исходным кодом для Windows, который является популярным инструментом анализа вредоносных программ.
		Оно используется для анализа 64-битных исполняемых файлов, в то время как его аналог, x32dbg, используется для анализа 32-битных исполняемых файлов.		
		Друшими словами он используется для пошагового выполнения кода, чтобы вы могли точно видеть, что он делает.
		Отладка — это процесс просмотра исполняемых файлов, преобразованных в низкоуровневый ассемблерный код, позволяющий пользователю отладчика видеть, что происходит внутри приложения, даже если оно не является приложением с открытым исходным кодом.
		x64dbg — одно из самых популярных программных средств для отладки
		x64dbg	-	https://x64dbg.com/		

	Погружение в формат файла Portable Executable (PE) имеет решающее значение для анализа вредоносных программ, предлагая понимание структуры файла, анализа кода, функций импорта и экспорта, анализа ресурсов, методов антианализа и извлечения индикаторов компрометации.
	Наше понимание этой основы прокладывает путь для эффективного анализа вредоносных программ.

	+++++++++++++
	+ Processes +
	+++++++++++++

	Проще говоря, Processes — это экземпляр исполняемой программы.
	Он представляет собой часть выполнения программы в памяти и состоит из различных ресурсов, включая память, дескрипторы файлов, потоки и контексты безопасности.

	Каждый процесс характеризуется:

		-	A unique PID (Process Identifier)
			Уникальный идентификатор процесса (PID) назначается каждому процессу в операционной системе.
			Этот числовой идентификатор облегчает отслеживание и управление процессом операционной системой.

		-	Virtual Address Space (VAS)
			В ОС Windows каждому процессу выделяется собственное виртуальное адресное пространство, предлагающее виртуализированное представление памяти для процесса.
			VAS разделен на сегменты, включая сегменты кода, данных и стека, что позволяет процессу получать изолированный доступ к памяти.

		-	Executable Code (Image File on Disk)
			Исполняемый код или файл образа означает двоичный исполняемый файл, хранящийся на диске.
			Он содержит инструкции и ресурсы, необходимые для работы процесса.

		-	Table of Handles to System Objects
			Процессы поддерживают таблицу дескрипторов	-	справочный каталог для различных системных объектов.
			Системные объекты могут охватывать файлы, устройства, ключи реестра, объекты синхронизации и другие ресурсы.

		-	Security Context (Access Token)
			С каждым процессом связан контекст безопасности, воплощенный в токене доступа.
			Этот токен доступа инкапсулирует информацию о привилегиях безопасности процесса, включая учетную запись пользователя, под которой работает процесс, и права доступа, предоставленные процессу.

		-	One or More Threads Running in its Context
			Процессы состоят из одного или нескольких потоков, где поток воплощает единицу выполнения внутри процесса.
			Потоки обеспечивают параллельное выполнение внутри процесса и облегчают многозадачность.

	++++++++++++++++++++++++++++++
	+ Dynamic-link library (DLL) +
	++++++++++++++++++++++++++++++

    Файл PE редко содержит весь код, который ему нужен для запуска в системе самостоятельно.
    В большинстве случаев он повторно использует код, предоставленный операционной системой.
    Это делается для того, чтобы использовать меньше места и использовать структуру, заложенную операционной системой для выполнения задач, вместо того, чтобы заново изобретать велосипед.
	
	Динамически подключаемая библиотека (DLL) — это тип PE, представляющий собой «реализацию Microsoft концепции общей библиотеки в ОС Microsoft Windows».
	DLL предоставляют массив функций, которые могут быть использованы вредоносным ПО, которое мы рассмотрим позже.
	Сначала давайте разберем функции импорта и экспорта в DLL.

		////////////////////////
		/// Import Functions ///
		////////////////////////

			i.		Функции импорта — это функции, к которым двоичный файл динамически подключается из внешних библиотек или модулей во время выполнения.
					Эти функции позволяют двоичному файлу использовать функции, предлагаемые этими библиотеками.

			ii.		Во время анализа вредоносного ПО изучение функций импорта может пролить свет на внешние библиотеки или модули, от которых зависит вредоносное ПО.
					Эта информация помогает определить API, с которыми может взаимодействовать вредоносное ПО, а также ресурсы, такие как файловая система, процессы, реестр и т. д.

			iii.	Определив конкретные импортированные функции, можно определить действия, которые может выполнять вредоносное ПО, такие как файловые операции, сетевое взаимодействие, манипуляции с реестром и многое другое.

			iv.		Имена или хэши функций импорта могут служить индикаторами компрометации (IOC), которые помогают идентифицировать варианты вредоносного ПО или связанные образцы.

		Ниже приведен пример идентификации внедрения процесса с использованием импорта DLL и имен функций:

			''''''''''''''''
			' Malware file '
			' (shell.exe)  '
			''''''''''''''''
				|
				|		1) Kernel32.dll			2) Kernel32.dll			3) Kernel32.dll				4) Kernel32.dll
				|		'''''''''''''''''		''''''''''''''''''''	''''''''''''''''''''''''		''''''''''''''''''''''''
				|------>' OpenProcess() '------>' VirtualAllocEx() '--->' WriteProcessMemory() '------->' CreateRemoteThread() '
						'''''''''''''''''		''''''''''''''''''''	''''''''''''''''''''''''		''''''''''''''''''''''''

		На этой диаграмме вредоносный процесс (shell.exe) выполняет внедрение процесса для внедрения кода в целевой процесс (notepad.exe) с использованием следующих функций, импортированных из DLL kernel32.exe:

			1)	OpenProcess
				Открывает дескриптор целевого процесса (notepad.exe), предоставляя необходимые права доступа для управления его памятью.

			2)	VirtualAllocEx
				Выделяет блок памяти в адресном пространстве целевого процесса для хранения внедренного кода.

			3)	WriteProcessMemory
				Записывает нужный код в выделенный блок памяти целевого процесса.

			4)	CreateRemoteThread
				Создает новый поток в целевом процессе, указывая точку входа внедренного кода в качестве начальной точки.

		В результате внедренный код выполняется в контексте целевого процесса вновь созданным удаленным потоком.
		Этот метод позволяет вредоносному ПО запускать произвольный код в целевом процессе.

		Указанные выше функции являются функциями WINAPI (Windows API).
		Не беспокойтесь о функциях WINAPI на данный момент, так как мы подробно обсудим их позже.

		////////////////////////
		/// Export Functions ///
		////////////////////////

		Функции экспорта — это функции, которые двоичный файл предоставляет для использования другими модулями или приложениями.
		Эти функции предоставляют интерфейс для взаимодействия другого программного обеспечения с двоичным файлом.

	В контексте анализа вредоносных программ понимание функций импорта и экспорта помогает распознавать поведение, возможности и взаимодействия двоичного файла с внешними сущностями.
	Это дает ценную информацию для обнаружения угроз, классификации и оценки воздействия вредоносных программ на систему.

