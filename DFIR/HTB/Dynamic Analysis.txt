=====================================================================
* General *
***********

Когда дело доходит до области анализа вредоносных программ, динамический или поведенческий анализ представляет собой незаменимый подход в нашем следственном арсенале.
При динамическом анализе мы наблюдаем и интерпретируем поведение вредоносной программы во время ее работы или действия.
Это критический контраст со статическим анализом, где мы анализируем свойства и содержимое вредоносной программы, не выполняя ее.

Основная цель динамического анализа — документировать и понимать реальное воздействие вредоносной программы на ее среду размещения, что делает его неотъемлемой частью комплексного анализа вредоносных программ.

При выполнении динамического анализа мы инкапсулируем вредоносную программу в строго контролируемую, отслеживаемую и обычно изолированную среду, чтобы предотвратить любое непреднамеренное распространение или ущерб.
Эта среда обычно представляет собой виртуальную машину (ВМ), о которой вредоносная программа не подозревает.
Она считает, что взаимодействует с настоящей системой, в то время как мы, как исследователи, имеем полный контроль над ее взаимодействиями и можем тщательно документировать ее поведение

Процедуру динамического анализа можно разбить на следующие этапы:

	1)	Настройка среды (Environment Setup)
		Сначала мы создаем безопасную и контролируемую среду, обычно виртуальную машину, изолированную от остальной сети, чтобы предотвратить непреднамеренное заражение или распространение вредоносного ПО.
		Настройка виртуальной машины должна имитировать реальную систему, полную программного обеспечения, приложений и сетевых конфигураций, которые могут быть у реального пользователя.

	2)	Захват базовой линии (Baseline Capture)
		После настройки среды мы делаем снимок чистого состояния системы.
		Сюда входят системные файлы, состояния реестра, запущенные процессы, сетевая конфигурация и многое другое.
		Эта базовая линия служит точкой отсчета для определения изменений, внесенных вредоносным ПО после выполнения.

	3)	Развертывание инструмента (предварительное выполнение) (Tool Deployment (Pre-Execution))
		Для эффективного захвата действий вредоносного ПО мы развертываем различные инструменты мониторинга и ведения журнала.
		Такие инструменты, как Process Monitor (Procmon) из Sysinternals Suite, используются для регистрации системных вызовов, активности файловой системы, операций реестра и т. д.
		Мы также можем использовать такие утилиты, как Wireshark, tcpdump и Fiddler для захвата сетевого трафика, и Regshot для создания снимков системного реестра до и после. Наконец, такие инструменты, как INetSim, FakeDNS и FakeNet-NG, используются для имитации интернет-сервисов.

		***	Также крайне рекомендуется установить имитаторы поведения пользователя на тестируемой машине, такие как
				)	рандомное движение мышкой
				)	создание/открытие файлов с внесение данных в них и последующим сохранением
				)	создание/открытие папок
				)	имитация выхода в интерент
				)	и прочее подобное

			Дело в том, что некоторые современные зловреды перед внедрением полезной нагрузки могут проверить данную среду на "состоятельность"
			Другими словами - не является ли она "песочницей" или виртуальной машиной
			И если является, то зловред не будет внежрять нагрузку

	4)	Выполнение вредоносного ПО (Malware Execution)
		Когда наши инструменты запущены и готовы, мы приступаем к выполнению образца вредоносного ПО в изолированной среде.
		Во время выполнения инструменты мониторинга фиксируют и регистрируют все действия, включая создание процесса, изменения файлов и реестра, сетевой трафик и т. д.

	5)	Наблюдение и ведение журнала (Observation and Logging)
		Образцу вредоносного ПО разрешено выполняться в течение достаточного времени.
		Все это время наши инструменты мониторинга старательно записывают каждый его шаг, что даст нам полное представление о его поведении и образе действий.

	6)	Анализ собранных данных (Analysis of Collected Data)
		После того, как вредоносная программа завершила свою работу, мы останавливаем ее выполнение и останавливаем инструменты мониторинга.
		Теперь мы изучаем журналы и собранные данные, сравнивая состояние системы с нашим первоначальным базовым уровнем, чтобы определить изменения, внесенные вредоносной программой.

В некоторых случаях, когда вредоносное ПО особенно неуловимо или сложно, мы можем использовать среды песочницы для динамического анализа.
Песочницы, такие как Cuckoo Sandbox, Joe Sandbox или облако FireEye Dynamic Threat Intelligence, предоставляют автоматизированную, безопасную и высококонтролируемую среду для выполнения вредоносного ПО.
Они оснащены многочисленными функциями для углубленного поведенческого анализа и создают подробные отчеты о поведении вредоносного ПО в сети, взаимодействии с файловой системой, занимаемой памяти и многом другом.

Однако важно помнить, что, хотя среды песочницы являются ценными инструментами, они не являются надежными.
Некоторые продвинутые вредоносные программы могут обнаруживать среды песочницы и соответствующим образом изменять свое поведение, что затрудняет для исследователей установление их истинного

=====================================================================
* Dynamic Analysis With Noriben *
*********************************

Noriben — мощный инструмент среди известных инструментов динамического анализа, по сути действующий как оболочка Python для Sysinternals ProcMon, комплексной утилиты мониторинга системы.
Он организует работу ProcMon, уточняет вывод и добавляет слой вредоносной разведки в процесс.
Используя Noriben, мы можем более удобно фиксировать поведение вредоносных программ и понимать его более точно.

Ресурсы по Noriben	-	https://www.isec.ne.jp/wp-content/uploads/2018/01/102Noriben.pdf
						https://ghetto420.rssing.com/chan-24816411/article31.html
						https://github.com/Rurik/Noriben

Чтобы понять, как Noriben расширяет наши возможности динамического анализа, давайте сначала кратко рассмотрим ProcMon.
Этот инструмент из Sysinternals Suite отслеживает файловую систему, реестр и активность процессов/потоков в режиме реального времени.
Он сочетает в себе функции таких утилит, как Filemon, Regmon, и расширенные функции, такие как фильтрация, расширенное выделение и расширенные свойства событий, что делает его мощным инструментом мониторинга системы для анализа вредоносных программ.

Однако объем и широта информации, которую собирает ProcMon, могут быть подавляющими.
Без надлежащей фильтрации и контекстного анализа просеивание этих необработанных данных становится значительной проблемой.
Вот тут-то и вступает в дело Noriben.
Он использует ProcMon для захвата системных событий, а затем фильтрует и анализирует эти данные, чтобы извлечь значимую информацию и выявить вредоносные действия.

Далее указаны шаги использования Noriben в динамическом процессе анализа вредоносных программ:

	1)	Настройка Noriben
		Запускаем Noriben из командной строки.
		Инструмент поддерживает множество аргументов командной строки для настройки его работы.
		Например, мы можем определить продолжительность сбора данных, указать пользовательский образец вредоносного ПО для выполнения или выбрать персонализированный файл конфигурации ProcMon.

	2)	Запуск ProcMon
		После запуска Noriben запускает ProcMon с предопределенной конфигурацией.
		Эта конфигурация содержит набор фильтров, предназначенных для исключения обычной системной активности и фокусировки на потенциальных индикаторах вредоносных действий.

	3)	Выполнение образца вредоносного ПО
		При запущенном ProcMon Noriben выполняет выбранный образец вредоносного ПО.
		На этом этапе ProcMon фиксирует все системные действия, включая операции процесса, изменения файловой системы и модификации реестра.

	4)	Мониторинг и ведение журнала
		Noriben контролирует продолжительность мониторинга, и после его завершения он дает команду ProcMon сохранить собранные данные в файл CSV, а затем завершает ProcMon.

	5)	Анализ данных и отчетность
		Вот где Noriben блистает.
		Он обрабатывает CSV-файл, сгенерированный ProcMon, применяя дополнительные фильтры и выполняя контекстный анализ.
		Noriben выявляет потенциально подозрительные действия и организует их в различные категории, такие как активность файловой системы, операции процессов и сетевые соединения.
		Результатом этого процесса является понятный, читаемый отчет в формате HTML или TXT, в котором выделены поведенческие черты анализируемого вредоносного ПО.

	+++++++++++++++++++++++++++++++++++
	+ Noriben's integration with YARA +
	+++++++++++++++++++++++++++++++++++

	Интеграция Noriben с правилами YARA — еще одна примечательная функция.
	Мы можем использовать правила YARA для улучшения наших возможностей фильтрации данных, что позволит нам более эффективно выявлять интересующие нас шаблоны.

	Для демонстрационных целей мы проведем динамический анализ образца вредоносного ПО с именем shell.exe
	Выполните следующие действия:

		1)	Запустите новый интерфейс командной строки (CMD) и перейдите в каталог, где расположен Noriben

		2)	Запустите Noriben Python скрипт, как указано ниже

				C:\Folder\where\located\Noriben> python .\Noriben.py

				[*] Using filter file: ProcmonConfiguration.PMC
				[*] Using procmon EXE: C:\ProgramData\chocolatey\bin\procmon.exe
				[*] Procmon session saved to: Noriben_27_Jul_23__23_40_319983.pml
				[*] Launching Procmon ...
				[*] Procmon is running. Run your executable now.
				[*] When runtime is complete, press CTRL+C to stop logging.

		3)	Увидев запрос контроля учетных записей пользователей, выберите Да.

		4)	Перейдите в каталог, где у Вас находится зловред для анализа и активируйте его (в нашем примере это - shell.exe) двойным щелчком.

		5)	Если зловред опреедлит, что запущен в песочнице, то закройте созданное им окно.

		6)	Завершите работу ProcMon.

		7)	В командной строке, где запущен Noriben, используйте команду Ctrl+C, чтобы остановить его работу.

				[*] Termination of Procmon commencing... please wait
				[*] Procmon terminated
				[*] Saving report to: Noriben_23_Mar_25__11_47_476093.txt
				[*] Saving timeline to: Noriben_23_Mar_25__11_47_476093_timeline.csv
				[*] Exiting with error code: 0: Normal exit

		8)	Вернитесь в каталог с Noriben
			Вы увидите, что Noriben генерирует отчет .txt внутри своего каталога, обобщая всю поведенческую информацию, которую ему удалось собрать.

	Как уже обсуждалось, Noriben использует ProcMon для захвата системных событий, но затем фильтрует и анализирует эти данные для извлечения значимой информации и выявления вредоносных действий.
	Noriben может отфильтровать некоторую потенциально ценную информацию.
	Например, мы не получаем никаких полезных данных из отчета Noriben о том, как shell.exe распознал, что он функционирует в песочнице или виртуальной машине.

	Давайте воспользуемся другим подходом и вручную запустим ProcMon (доступен в C:\Tools\sysinternals), используя его конфигурацию по умолчанию.
	После этого давайте повторно запустим shell.exe.
	Это может дать нам представление о том, как shell.exe обнаруживает наличие песочницы или виртуальной машины.

	Затем давайте настроим фильтр (Ctrl+L) следующим образом и нажмем «Apply»

		-	ProcessName	is		shell.exe	then	include
		-	Operation	is		RegQueryValue	then	include
		-	Result		is		SUCCESS		then	include
		-	Path		contains	VMware		then	include

	***	Фильтр можно настраивать под Ваши нужды