Согласно Википедии, «Журналы событий регистрируют события, происходящие при выполнении системы, для предоставления контрольного следа, который может использоваться для понимания активности системы и диагностики проблем.
Они необходимы для понимания активности сложных систем, особенно в приложениях с небольшим взаимодействием с пользователем (например, серверные приложения)».

Если конечная точка сталкивается с проблемой, журналы событий можно запросить, чтобы увидеть подсказки о том, что привело к проблеме.
Операционная система по умолчанию записывает сообщения в эти журналы.

Для защитников (blue teamers) есть еще один вариант использования журналов событий.
«Объединение записей файлов журналов из нескольких источников также может быть полезным.
Этот подход в сочетании со статистическим анализом может выявить корреляции между, казалось бы, не связанными событиями на разных серверах».

Здесь в игру вступают SIEM (управление информацией о безопасности и событиями), такие как Splunk и Elastic.
Ниже представлен краткий обзор возможностей SIEM:

	-	MAIN Features
			Threat Detection
			Invictigation
			Time to Respond

	-	ADDITIONAL Features
			Basic security monitoring
			Advanced threat detection
			Forensics & Incident Response
			Log Collection
			Normalizatoin
			Notifications and alerts
			Security incident detection
			Threat response workflow

Несмотря на то, что доступ к журналам событий удаленной машины возможен, это будет невыполнимо в большой корпоративной среде.
Вместо этого можно просматривать журналы со всех конечных точек, устройств и т. д. в SIEM.
Это позволит вам запрашивать журналы с нескольких устройств вместо того, чтобы вручную подключаться к одному устройству для просмотра его журналов.

Windows — не единственная операционная система, которая использует систему журналирования.
Linux и macOS тоже это делают.
Например, система журналирования в системах Linux известна как Syslog.

Журналы событий Windows не являются текстовыми файлами, которые можно просматривать с помощью текстового редактора.
Однако необработанные данные можно преобразовать в XML с помощью API Windows.
События в этих файлах журналов хранятся в фирменном двоичном формате с расширением .evt или .evtx.
Файлы журналов с расширением .evtx обычно находятся в C:\Windows\System32\winevt\Logs.

Чтобы получить хорошую картину, вы должны сначала понять формат, в котором будет представлена ​​информация.
Windows предлагает стандартизированные средства передачи этой системной информации.

Для начала, нам нужно знать, какие элементы формируют журналы событий в системах Windows.
Вот эти элементы:
	
	-	System Logs (Системные журналы)
		Регистрируют события, связанные с сегментами операционной системы.
		Они могут включать информацию об изменениях оборудования, драйверах устройств, системных изменениях и других действиях, связанных с устройством.

	-	Security Logs (Журналы безопасности)
		Регистрируют события, связанные с действиями входа и выхода из системы на устройстве.
		Политика аудита системы определяет события.
		Журналы являются отличным источником для аналитиков для расследования попыток или успешных несанкционированных действий.

	-	Application Logs (Журналы приложений)
		Регистрируют события, связанные с приложениями, установленными в системе.
		Основные части информации включают ошибки приложений, события и предупреждения.

	-	Directory Service Events (События службы каталогов)
		Изменения и действия Active Directory регистрируются в этих журналах, в основном на контроллерах домена.
		
	-	File Replication Service Events (События службы репликации файлов)
		Регистрирует события, связанные с серверами Windows во время совместного использования групповых политик и сценариев входа в контроллеры домена, откуда пользователи могут получить к ним доступ через клиентские серверы.

	-	DNS Event Logs (Журналы событий DNS)
		DNS-серверы используют эти журналы для записи событий домена и для составления карты

	-	Custom Logs (Пользовательские журналы)
		События регистрируются приложениями, которым требуется пользовательское хранилище данных.
		Это позволяет приложениям контролировать размер журнала или прикреплять другие параметры, такие как списки контроля доступа, в целях безопасности.

В рамках этой классификации журналы событий можно дополнительно классифицировать по типам.
Типы описывают действия, которые привели к регистрации события.
Существует 5 типов событий, которые можно регистрировать, как описано в таблице ниже с docs.microsoft.com:

	A)	Error (Ошибка)
		Событие, указывающее на существенную проблему, например потерю данных или функциональности.
		Например, если служба не загружается во время запуска, регистрируется событие «Ошибка».

	B)	Warning (Предупреждение)
		Событие, которое не обязательно является существенным, но может указывать на возможную будущую проблему.
		Например, если на диске мало места, регистрируется событие «Предупреждение».
		Если приложение может восстановиться после события без потери функциональности или данных, оно, как правило, может классифицировать событие как событие «Предупреждение».

	C)	Information (Информация)
		Событие, описывающее успешную работу приложения, драйвера или службы.
		Например, если сетевой драйвер загружается успешно, может быть целесообразно зарегистрировать событие «Информация».
		Обратите внимание, что обычно нецелесообразно, чтобы настольное приложение регистрировало событие при каждом запуске.

	D)	Success Audit (Аудит успеха)
		Событие, регистрирующее успешную проверенную попытку доступа к системе безопасности.
		Например, успешная попытка пользователя войти в систему регистрируется как событие аудита успеха.

	E)	Failure Audit (Аудит отказа)
		Событие, регистрирующее неудачную проверенную попытку доступа к системе безопасности.
		Например, если пользователь пытается получить доступ к сетевому диску и ему это не удается, эта попытка регистрируется как событие аудита отказов.

Существует три основных способа доступа к этим журналам событий в системе Windows:

	-	Event Viewer (приложение на основе графического интерфейса)
	-	Wevtutil.exe (инструмент командной строки)
	-	Get-WinEvent (командлет PowerShell)

А также несколько вариантов фильтрации имеющихся лог-журналов:

	-	XPath Query
	-	Event ID

=====================================================================
* Event Logs Access ways *
**************************

	++++++++++++++++
	+ Event Viewer +
	++++++++++++++++

	В любой системе Windows Event Viewer может быть запущена простым щелчком правой кнопкой мыши по значку Windows на панели задач и выбором Event Viewer.
	Альтернативным способом запуска Event Viewer является ввод eventvwr.msc.

	Это приложение на основе графического пользовательского интерфейса, которое позволяет быстро взаимодействовать с журналами и анализировать их.
	Event Viewer имеет три панели.

		-	Панель слева предоставляет иерархический список поставщиков журналов событий.
		-	Панель посередине будет отображать общий обзор и сводку событий, относящихся к выбранному поставщику.
		-	Панель справа — это панель действий.

	Чтобы просмтреть Properties (Свойства) какого-либо журнала нужно

		1)	Найти его среди всех представленных журналов
		2)	Затем щелкнуть правой кнопкой мыши на нем, и далее затем Properties (Свойства)

	В разделе «Свойства» вы увидите местоположение журнала, размер журнала, а также время его создания, изменения и последнего доступа.
	Вы также можете увидеть максимальный установленный размер журнала и какие действия следует предпринять после выполнения критериев.
	Эта концепция известна как ротация журналов.
	Это обсуждения, которые проводятся с корпорациями разных размеров.
	Сколько времени требуется для хранения журналов и когда допустимо перезаписывать их новыми данными.

	Также стоит обратить внимание на кнопку Clear Log (Очистить журнал) в правом нижнем углу.
	Существуют законные причины использовать эту кнопку, например, во время обслуживания безопасности
	Но злоумышленники, скорее всего, попытаются очистить журналы, чтобы остаться незамеченными.
	***	Это не единственный метод удаления журналов событий для любого поставщика событий.

	Давайте сосредоточем свое внимание на средней панели. 
	Эта панель будет отображать события, относящиеся к выбранному поставщику (к примеру  Applications and Services Logs > Microsoft > Windows > PowerShell > Operational)
	Каждый столбец панели представляет определенный тип информации:

		-	Level (Уровень)
			Выделяет тип записи журнала на основе идентифицированных типов событий, указанных ранее.
			В нашем примере журнал помечен как Information (Информация)

		-	Date and Time (Дата и время)
			Выделяет время, когда событие было зарегистрировано.

		-	Source (Источник)
			Идентифицируется имя программного обеспечения, которое регистрирует событие.
			В нашем примере источником является PowerShell

		-	Event ID (Идентификатор события)
			Это предопределенное числовое значение, которое сопоставляется с определенной операцией или событием на основе источника журнала.
			Это делает идентификаторы событий не уникальными, поэтому идентификатор события 4103 на изображении выше связан с выполнением конвейера
			Но будет иметь совершенно другое значение в другом журнале событий.

		-	Task Category (Категория задачи)
			Выделяет категорию события.
			Эта запись поможет вам организовать события, чтобы средство просмотра событий могло их фильтровать.
			Источник события определяет этот столбец.

	Средняя панель имеет разделенный вид.
	Дополнительная информация отображается в нижней половине средней панели для любого события, на которое вы нажимаете.
	Дополнительная информация имеет две вкладки:
		
		«Общие»		-	это вид по умолчанию, и отображаются визуализированные данные.
		«Подробности»	-	имеет два варианта: «Дружественный вид» и «Вид XML».

	Наконец, взгляните на панель Actions (Действия) - крайне правая панель.
	Доступно много различных вариантов, но мы остановимся только на нескольких.

	Как можно заметить, вы можете открыть сохраненный журнал (Open Saved Log..) в панели «Действия».
	Это полезно, если удаленная машина недоступна.
	Журналы могут быть предоставлены аналитику.

	Функции Create Custom View (Создать настраиваемое представление) и Filter Current Log (Фильтровать текущий журнал) практически идентичны.
	Единственное различие между ними заключается в том, что переключатели By log (По журналу) и By source (По источнику) неактивны в Filter Current Log (Фильтровать текущий журнал).
	В чем причина? Фильтр, который вы можете сделать с помощью этого конкретного действия, относится только к текущему журналу.
	Следовательно, нет причин включать «по журналу» или «по источнику»
	***	Это полезно, если вы не хотите, чтобы все события, связанные с определнным журналом (к примеру - PowerShell/Operational), загромождали все пространство на панели.
		Возможно, вас интересуют только события 4104.
		Это возможно с помощью этих двух действий.

	++++++++++++++++
	+ wevеutil.exe +
	++++++++++++++++

	Хотя Event Viewer и является очень полезным инструментом, но представьте, что вам нужно сидеть и вручную просеивать сотни или даже тысячи событий (даже после фильтрации журнала).
	Не весело. Было бы неплохо, если бы вы могли писать скрипты, которые выполняли бы эту работу за вас.
	Ниже будут рассмотрены несколько инструментов, которые позволят вам запрашивать журналы событий через командную строку и/или PowerShell.

	Один из них	-	wevtutil.exe.
	
	Согласно Microsoft, инструмент wevtutil.exe «позволяет вам извлекать информацию о журналах событий и издателях.
	Вы также можете использовать эту команду для установки и удаления манифестов событий, для запуска запросов, а также для экспорта, архивации и очистки журналов».
	Для ознакомления с файлом справки данногой утилиты можно ввести следующую комнаду	-	wevtutil.exe /?
	*** Одинково работает как для CMD, так и в PS

	Если мы хотим получить справку по какому-то элементу wevtutil (к примеру - qe (query-events)), то наш запрос должен выглядить так	-	wevtutil.exe qe /?

	Более деталную информацию по данной утилите можно найти тут	-	https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/wevtutil

	++++++++++++++++
	+ Get-WinEvent +
	++++++++++++++++

	Согласно Microsoft, командлет Get-WinEvent «получает события из журналов событий и файлов журналов трассировки событий на локальных и удаленных компьютерах».
	Он предоставляет информацию о журналах событий и поставщиках журналов событий.
	Кроме того, вы можете объединить многочисленные события из нескольких источников в одну команду и отфильтровать их с помощью запросов XPath, структурированных XML-запросов и запросов хэш-таблиц.

	*** Командлет Get-WinEvent заменяет командлет Get-EventLog.

	Чтобы детально ознакомиться с возможностями Get-WinEvent рекомндуется перейти по данной ссылке	-	https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.diagnostics/get-winevent?view=powershell-5.1

	Ниже будут представленны несолкьо базовых команд

		-	Получить все журналы с компьютера
			Здесь мы получаем все журналы событий локально, и список начинается с классических журналов, за которыми следуют новые журналы событий Windows.
			*** RecordCount журнала может быть равен нулю или null.

				Get-WinEvent -ListLog *
					LogMode   MaximumSizeInBytes RecordCount LogName
					-------   ------------------ ----------- -------
					Circular            15532032       14500 Application
					Circular             1052672         117 Azure Information Protection
					Circular             1052672        3015 CxAudioSvcLog
					Circular            20971520             ForwardedEvents
					<...SNIP...>

			Чтобы узнать сколько всего журналов, необходимо добавить командлет счетчика

				Get-WinEvent -ListLog * | Measure-Object
					Count	:	397
					Average	:	
					Sum	:	
					Maximum	:	
					Minimum	:	
					Property:

		-	Получить поставщиков журналов событий и имена журналов
			Команда здесь выведет поставщиков журнала событий и их связанные журналы.
			Name	-	это поставщик, а LogLinks	-	это журнал, в который записывается.

				Get-WinEvent -ListProvider *
					Name     : .NET Runtime
					LogLinks : {Application}
					Opcodes  : {}
					Tasks    : {}

					Name     : .NET Runtime Optimization Service
					LogLinks : {Application}
					Opcodes  : {}
					Tasks    : {}
					<...SNIP...>

		-	Фильтрация журнала
			Фильтрация журнала позволяет выбирать события из журнала событий.
			Мы можем фильтровать журналы событий с помощью командлета Where-Object следующим образом:

				Get-WinEvent -LogName Application | Where-Object { $_.ProviderName -Match 'WLMS' }

   					ProviderName: WLMS

					TimeCreated                     Id LevelDisplayName Message
					-----------                     -- ---------------- -------
					12/21/2020 4:23:47 AM          100 Information
					12/18/2020 3:18:57 PM          100 Information
					12/15/2020 8:50:22 AM          100 Information
					12/15/2020 8:18:34 AM          100 Information
					12/15/2020 7:48:34 AM          100 Information
					12/14/2020 6:42:18 PM          100 Information
					12/14/2020 6:12:18 PM          100 Information
					12/14/2020 5:39:08 PM          100 Information
					12/14/2020 5:09:08 PM          100 Information

	Однако, при работе с большими журналами событий, по мнению Microsoft, неэффективно отправлять объекты по конвейеру в команду Where-Object.
	Для фильтрации журналов событий рекомендуется использовать параметр FilterHashtable командлета Get-WinEvent.
	Мы можем добиться тех же результатов, что и выше, выполнив следующую команду:
			
		Get-WinEvent -FilterHashtable @{LogName='Application'; ProviderName='WLMS';...}
			
	Структура данной комнады следующая	-	Get-WinEvent -FilterHashtable @{ <name> = <value>; [<name> = <value> ] ...}
	Рекомендации по определению хэш-таблицы:

		-	Начинайте хэш-таблицу со знака @.
		-	Заключите хэш-таблицу в фигурные скобки {}
		-	Введите одну или несколько пар ключ-значение для содержимого хэш-таблицы.
		-	Используйте знак равенства (=), чтобы отделить каждый ключ от его значения.
			
	*** Для разделения пар ключ-значение можно использовать либо ";", либо "Ввод"
			
	При построении запроса с хэш-таблицей Microsoft рекомендует создавать хэш-таблицу по одной паре ключ-значение за раз.
	Ниже приведена таблица, в которой отображаются принятые пары ключ/значение для параметра Get-WinEvent FilterHashtable.

		Key name	Value data type		Accepts wildcard characters?
		LogName		<String[]>		Yes
		ProviderName	<String[]>		Yes
		Path		<String[]>		No
		Keywords	<Long[]>		No
		ID		<Int32[]>		No
		Level		<Int32[]>		No
		StartTime	<DateTime>		No
		EndTime		<DateTime>		No
		UserID		<SID>			No
		Data		<String[]>		No
		<named-data>	<String[]>		No

	*** Event Viewer может предоставить быструю информацию о том, что вам нужно для построения вашей хэш-таблицы.

	Для получения дополнительной информации о создании запросов Get-WinEvent с FilterHashtable рекомендуется посетить следующую страницу	-	https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_hash_tables?view=powershell-7.4&viewFallbackFrom=powershell-7.1

	А для понимания того, как создавать HASH TABLES		-	https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_hash_tables?view=powershell-7.4&viewFallbackFrom=powershell-7.1

=====================================================================
* Filtering Events *
********************

	+++++++++++++++
	+ XPath Query +
	+++++++++++++++

	Теперь мы рассмотрим фильтрацию событий с помощью XPath.
	XPath (или XML Path Language) используется чтобы обеспечить стандартный синтаксис и семантику для адресации частей XML-документа и манипулирования строками, числами и логическими значениями.
	*** Журнал событий Windows поддерживает подмножество XPath 1.0.

	Более подробное описание использования XPath можно найти тут	-	https://www.w3.org/TR/1999/REC-xpath-19991116/
									-	https://learn.microsoft.com/en-us/windows/win32/wes/consuming-events#xpath-10-limitations

	Согласно документации от Microsoft, запрос события XPath начинается с '*' или 'Event'.
	Но как нам построить остальную часть запроса?
	К счастью, Event Viewer может нам в этом помочь.
	*** Обратите внимание, что и wevtutil, и Get-WinEvent поддерживают запросы XPath в качестве фильтров событий.

	В разделе Event Viewer была кратко затронута вкладка Details (обратите внимание на нижнюю половину средней панели).
	Теперь вы увидите, как информация в этом разделе может быть полезна.

	Нажмите на вкладку Details и выберите переключатель XML View.
	Не беспокойтесь, если просматриваемые вами данные журнала немного отличаются.
	Главное — понять, как использовать XML View для построения допустимого запроса XPath.

		- <Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
			- <System>
  				<Provider Name="Microsoft-Windows-Windows Defender" Guid="{11cd958a-c507-4ef3-b3f2-5fd9dfbd2c78}" /> 
  				<EventID>1151</EventID> 
  				<Version>0</Version> 
  				<Level>4</Level> 
  				<Task>0</Task> 
  				<Opcode>0</Opcode> 
 				<Keywords>0x8000000000000000</Keywords> 
				<TimeCreated SystemTime="2024-11-07T20:44:04.3427231Z" /> 
  				<EventRecordID>6369</EventRecordID> 
  				<Correlation /> 
  				<Execution ProcessID="4588" ThreadID="19600" /> 
  				<Channel>Microsoft-Windows-Windows Defender/Operational</Channel> 
  				<Computer>MJ0JKVYA.KFAero.ca</Computer> 
  				<Security UserID="S-1-5-18" /> 
  			</System>
			- <EventData>
  				<Data Name="Product Name">%%827</Data> 
  				<Data Name="Platform version">4.18.1909.6</Data> 
 				<Data Name="TargetUserName">SYSTEM</Data> 
  				<Data Name="Engine version">1.1.16400.2</Data> 
  			</EventData>
  		</Event>

	1)	Первый тег - это начальная точка.
		Это может быть либо *, либо слово <Event.
		Команда пока выглядит так:

			- Get-WinEvent
				Get-WinEvent -LogName Application -FilterXPath '*'

			- wevtutil
				wevtutil.exe qe Application /q:*

	2)	Следующий тег - System.
		Давайте добавим его.
		Лучше всего явно использовать ключевое слово System, но вместо этого можно использовать *, как и с ключевым словом Event.
		Но, запрос -FilterXPath '*/*' также будет действителен.
		Теперь наша команда будет выглядеть:

			- Get-WinEvent
				Get-WinEvent -LogName Application -FilterXPath '*/System/'

			- wevtutil
				wevtutil.exe qe Application /q:*/System
	

	3)	Далее можно испольщовать любой нужный нам тэг
		В нашем случаем мы возбмем - EventID
		Идентификатор события нашего примера = 1151.
		Давайте подставим его в команду:

			- Get-WinEvent
				Get-WinEvent -LogName Application -FilterXPath '*/System/EventID=1151'

			- wevtutil
				wevtutil.exe qe Application /q:*/System[EventID=1151] /f:text /c:1

	
	***	При использование wevtutil (в приведенной выше команде) мы использовали 2 дополнительных параметра.
		Это было сделано для извлечения только одного события и для того, чтобы оно не содержало никаких XML-тегов.

	Если вы хотите запросить другой элемент, например, Provider Name, синтаксис будет другим.
	Чтобы отфильтровать по поставщику, нам нужно использовать атрибут Name Provider

			- Get-WinEvent
				Get-WinEvent -LogName Application -FilterXPath '*/System/Provider[@Name="Microsoft-Windows-Windows Defender"]'


	Eесли вы хотите объединить 2 запроса, то это также возможно.
	Давайте построим этот запрос на основе данных, представленных выше.
	Provider Name — Microsoft-Windows-Windows Defender, а EventID = 1151.
	Таким образом, запрос XPath для Get-WinEvent будет выглядеть следующим образом:

		Get-WinEvent -LogName Application -FilterXPath '*/System/EventID=1151 и */System/Provider[@Name="Microsoft-Windows-Windows Defender"]'

	4)	Наконец, давайте обсудим, как создавать запросы XPath для элементов в EventData.
		***	Элемент EventData не всегда содержит информацию.		
		Запрос будет немного отличаться.
		
		Мы построим запрос для TargetUserName.
		В данном случае это будет System
		Запрос XPath для Get-WinEvent будет выглядеть следующим образом:

			Get-WinEvent -LogName Security -FilterXPath '*/EventData/Data[@Name="TargetUserName"]="System"' -MaxEvents 1

		***	Параметр -MaxEvents, с указанным значением, вернет количество указанных событий
			В нашем случаем будет возвращено только 1 событие.

	СУЩЕСТВЕННЫЙ НЮАНСы
	
		*)	Если поле запроса состоит из 2 слов/словосочетаний, то в запросе они разделяются [@...]=
			К примеру:

				Provider Name			-	Provider[@Name=...]
					TimeCreated SystemTime	-	TimeCreated[@SystemTime=...]

		*)	Если мы ишем данные по пользователю (к примеру SYSTEM), то запрос будет трансформирован следующим образом

			<Data Name="TargetUserName">SYSTEM</Data>	-	Data[@Name=”TargetUserName”]=”SYSTEM”

	Чтобы расширить эти знания, можно ознакомиться с официальным справочником Microsoft XPath	-	https://learn.microsoft.com/en-us/previous-versions/dotnet/netframework-4.0/ms256115(v=vs.100)

	++++++++++++
	+ EventIDs +
	++++++++++++

	Когда дело доходит до мониторинга и поиска, вам нужно знать, что вы ищете.
	Существует большое количество используемых идентификаторов событий.
	Этот раздел призван помочь вам в этой задаче.

	В этом разделе будут представлены несколько ресурсов.
	*** Обратите внимание, что это не исчерпывающий список.

	1)	Первым в списке идет The Windows Logging Cheat Sheet (Windows 7 - Windows 2012)		-	chrome-extension://efaidnbmnnnibpcajpcglclefindmkaj/https://static1.squarespace.com/static/552092d5e4b0661088167e5c/t/580595db9f745688bc7477f6/1476761074992/Windows+Logging+Cheat+Sheet_ver_Oct_2016.pdf
		Последнее обновление версии - октябрь 2016 года, но это все еще хороший ресурс.
		В документе описывается несколько вещей, которые необходимо включить и настроить
		А также какие идентификаторы событий следует искать на основе различных категорий, таких как учетные записи, процессы, очистка журнала и т. д.

		К примеру - Хотите узнать, была ли установлена ​​новая служба
		Найдите идентификатор события 7045 в системном журнале.

	2)	Далее следует «Обнаружение противника с помощью мониторинга журнала событий Windows».
		Этот ресурс АНБ также немного устарел, но достаточно хорош, чтобы построить на нем фундамент	-	https://web.archive.org/web/20190115215749/https://apps.nsa.gov/iaarchive/customcf/openAttachment.cfm?FilePath=/iad/library/ia-guidance/security-configuration/applications/assets/public/upload/Spotting-the-Adversary-with-Windows-Event-Log-Monitoring.pdf&WpKes=aF6woL7fQp3dJiqyJL2LenrLxuHC7ztGtVNK3x
		Документ охватывает некоторые концепции, затронутые в этой комнате и далее.
		Вам необходимо нажать «Получить файл», чтобы загрузить ресурс.

		К примеру, вы хотите отслеживать, было ли удалено правило брандмауэра с хоста.
		Это идентификатор события 2006/2033.

		Вот еще один ресурс, где мы можем получить список идентификаторов событий для мониторинга/охоты		-	https://attack.mitre.org/
		Каждый идентификатор ATT&CK будет содержать раздел с советами по смягчению техники и советами по обнаружению.

	3)	Последние два ресурса от Microsoft:

			-	Events to Monitor (лучшие практики по защите Active Directory)				-	https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/plan/appendix-l--events-to-monitor
			-	Справочник по аудиту и мониторингу безопасности Windows 10 и Windows Server 2016	-	


	***	Некоторые события не будут созданы по умолчанию, и некоторые функции необходимо будет включить/настроить на конечной точке
		
		Пример #1	-	ведение журнала PowerShell.
		Эту функцию можно включить через групповую политику или реестр.
			Local Computer Policy > Computer Configuration > Administrative Templates > Windows Components > Windows PowerShell

		Детально тут:

				Вот несколько ресурсов, которые подскажут как включить тут или иную функцию

			About Logging Windows		-	https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_logging_windows?view=powershell-7.4&viewFallbackFrom=powershell-7.1
			Greater Visibility Through PowerShell Logging		-	https://cloud.google.com/blog/topics/threat-intelligence/greater-visibility/
			Configure PowerShell logging to see PowerShell anomalies in Splunk UBA		-	https://docs.splunk.com/Documentation/UBA/5.0.4/GetDataIn/AddPowerShell

		Пример #2	-	аудит процессов командной строки.
		Еще одна функция для включения/настройки — Audit Process Creation, которая сгенерирует событие с идентификатором 4688.
			Local Computer Policy > Computer Configuration > Administrative Templates > System > Audit Process Creation

		Детально тут	-	https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/manage/component-updates/command-line-process-auditing#try-this-explore-command-line-process-auditing

=====================================================================
* ПРИМЕРЫ *
***********

	Execute the command from Example 1 (as is). What are the names of the logs related to OpenSSH?

		Get-WinEvent -ListLog OpenSSH*

	Using the knowledge gained on Get-WinEvent and XPath, what is the query to find WLMS events with a System Time of 2020-12-15T01:09:08.940277500Z?

		Get-WinEvent -LogName Application -FilterXPath '*/System/Provider[@Name="WLMS"] and */System/TimeCreated[@SystemTime="2020-12-15T01:09:08.940277500Z"]'


	РЕСУРСЫ для ОЗНАКОМЛЕНИЯ:

		EVTX Attack Samples	-	https://github.com/sbousseaden/EVTX-ATTACK-SAMPLES
		PowerShell <3 the Blue Team	-	https://devblogs.microsoft.com/powershell/powershell-the-blue-team/
		Tampering with Windows Event Tracing: Background, Offense, and Defense		-	https://blog.palantir.com/tampering-with-windows-event-tracing-background-offense-and-defense-4be7ac62ac63