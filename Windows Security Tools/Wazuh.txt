Во-первых, давайте разберемся, что такое решения EDR.
Endpoint detection and response (Обнаружение и реагирование на конечные точки (EDR)) — это ряд инструментов и приложений, которые отслеживают устройства на предмет активности, которая может указывать на угрозу или нарушение безопасности.
Эти инструменты и приложения обладают функциями, которые включают:

    -   Аудит устройства на предмет распространенных уязвимостей
    -   Проактивный мониторинг устройства на предмет подозрительной активности, такой как несанкционированный вход в систему, атаки методом подбора или повышение привилегий
    -   Визуализация сложных данных и событий в аккуратные и модные графики
    -   Запись обычного рабочего поведения устройства для помощи в обнаружении аномалий

Созданное в 2015 году, Wazuh — это открытое, свободно доступное и обширное решение EDR.
Его можно использовать в средах любого масштаба.
Wazuh работает по принципу взаимодествия менеджера управления (Wazuh) и агента(-ов).
Проще говоря, устройство на котором установлен Wazuh (именуемый менеджером) отвечает за управление агентами, установленными на устройствах, которые вы хотите отслеживать.

=====================================================================
* Wazuh Agents *
****************

Устройства, которые регистрируют события и процессы системы, называются агентами.
Агенты отслеживают процессы и события, происходящие на устройстве, такие как аутентификация и управление пользователями.
Агенты будут выгружать эти журналы в назначенный сборщик для обработки, например Wazuh.

Для того, чтобы Wazuh был заполнен, агенты должны быть установлены на устройствах для регистрации таких событий.
Wazuh может провести вас через процесс развертывания агента, если вы заполните некоторые предварительные условия, такие как:

    -   Операционная система
    -   Адрес сервера Wazuh, на который агент должен отправлять журналы (это может быть запись DNS или IP-адрес)
    -   В какой группе будет находиться агент — вы можете отсортировать агентов по группам в Wazuh, если хотите

Этот мастер можно запустить, перейдя в следующее место на сервере Wazuh: Wazuh -> Agents -> Deploy New Agent,

=====================================================================
* Wazuh Vulnerability Assessment & Security Events *
****************************************************

Модуль оценки уязвимостей Wazuh — это мощный инструмент, который можно использовать для периодического сканирования операционной системы агента на предмет установленных приложений и номеров их версий.

После сбора этой информации она отправляется обратно на сервер Wazuh и сравнивается с базой данных CVE для обнаружения потенциальных уязвимостей.
Например, агент имеет версию Vim, которая уязвима для CVE-2019-12735.

Модуль сканера уязвимостей выполнит полное сканирование, когда агент Wazuh впервые установлен на устройстве, и должен быть настроен на запуск с заданным интервалом
А затем каждые 5 минут (установлено по умолчанию при включении), если не изменено на другон значение

*** Настройки сервера управления Wazuh для частого аудита агентов на предмет уязвимостей находятся  -   /var/ossec/etc/ossec.conf (Linux)

Wazuh способен тестировать конфигурацию агента на соответствие определенным наборам правил.
Однако, из коробки, он, возможно, чувствителен.

Возьмем, к примеру хост Linux, на котором работает агент Wazuh.
Всего было зарегистрировано 769 событий, которые система выполняет в рамках своего ежедневного обслуживания
Эти частые действия, такие как удаление файлов, часто определяются как событие безопасности.
Эти события и связанные с ними уровни серьезности определяются наборами правил Wazuh, которые бужут рассмотрены позже.

Мы можем анализировать эти события по отдельности, выбрав раскрывающийся список событий.
Также Вы можете сортировать события на основе различных факторов, таких как временная метка, тактика или описание.

=====================================================================
* Wazuh Policy Auditing *
*************************

Wazuh способен проводить аудит и мониторинг конфигурации агента, одновременно активно записывая журналы событий.
Когда агент Wazuh установлен, выполняется аудит, в котором метрика задается с использованием нескольких фреймворков и законодательных актов, таких как NIST, MITRE и GDPR.

Wazuh представляет общую иллюстрацию журналов.
Мы можем использовать визуализации, чтобы разбить эти данные и исследовать их дальше.
Перейдите на вкладку «Модули», нажавWazuh -> Modules, и откройте модуль "Policy Monitoring" 

=====================================================================
* Monitoring Logons with Wazuh *
********************************

Монитор событий безопасности Wazuh способен активно регистрировать как успешные, так и неудачные попытки аутентификации.

К примеру, правило с идентификатором 5710 обнаруживает попытки подключения, которые не увенчались успехом для протокола SSH.
Оповещение хранится в определенном файле на сервере управления Wazuh: /var/ossec/logs/alerts/alerts.log.
Мы можем использовать команду, например grep или nano, для поиска по этому файлу на сервере управления вручную.

Оповещения можно настроить под вашу среду.
Допустим, если вошел в систему нечасто используемый пользователь, вы можете настроить Wazuh так, чтобы это оповещение имело более высокую серьезность.

Для настройки правил оповещения, перейдите на вкладку «Управление», нажав Wazuh -> Management , и откройте модуль "Rules"

=====================================================================
* Collecting Windows Logs with Wazuh *
**************************************

Все виды действий и событий захватываются и записываются в операционной системе Windows.
Это включает в себя попытки аутентификации, сетевые подключения, файлы, к которым был получен доступ, и поведение приложений и служб.
Эта информация сохраняется в журнале событий Windows с помощью инструмента Sysmon.

Мы можем использовать агент Wazuh для объединения этих событий, записанных Sysmon, для обработки в менеджере Wazuh.
Теперь нам нужно настроить как агент Wazuh, так и приложение Sysmon.
Sysmon использует правила, созданные в формате XML, для срабатывания.

Например, в представленном ниже фрагменте XML Sysmon должен отслеживать событие запуска процесса powershell.exe
Чтобы дать команду Sysmon, нам нужно запустить приложение Sysmon и предоставить вышеупомянутый файл конфигурации следующим образом: Sysmon64.exe -accepteula -i <configuration_file>.xml

    <Sysmon schemaversion="#.##"> 
        <HashAlgorithms md5 /HashAlgorithms>
        <EventFiltering>
                <!--SYSMON EVENT ID 1 : PROCESS CREATION-->
            <ProcessCreate onmatch="include">
                <Image condition="contains">powershell.exe</Image> 
            </ProcessCreate>
                <!--SYSMON EVENT ID 2 : FILE CREATION TIME RETROACTIVELY CHANGED IN THE FILESYSTEM-->
            <FileCreateTime onmatch="include">
            </FileCreateTime>
                <!--SYSMON EVENT ID 3 : NETWORK CONNECTION INITIATED-->
            <NetworkConnect onmatch="include">
            </NetworkConnect>
                <!--SYSMON EVENT ID 4 : RESERVED FOR SYSMON STATUS MESSAGES, THIS LINE IS INCLUDED FOR DOCUMENTATION PURPOSES ONLY-->
                <!--SYSMON EVENT ID 5 : PROCESS ENDED-->
            <ProcessTerminate onmatch="include">
            </ProcessTerminate>
                <!--SYSMON EVENT ID 6 : DRIVER LOADED INTO KERNEL-->
            <DriverLoad onmatch="include">
            </DriverLoad>
                <!--SYSMON EVENT ID 7 : DLL (IMAGE) LOADED BY PROCESS-->
            <ImageLoad onmatch="include">
            </ImageLoad>
                <!--SYSMON EVENT ID 8 : REMOTE THREAD CREATED-->
            <CreateRemoteThread onmatch="include">
            </CreateRemoteThread>
                <!--SYSMON EVENT ID 9 : RAW DISK ACCESS-->
            <RawAccessRead onmatch="include">
            </RawAccessRead>
                <!--SYSMON EVENT ID 10 : INTER-PROCESS ACCESS-->
            <ProcessAccess onmatch="include">
            </ProcessAccess>
                <!--SYSMON EVENT ID 11 : FILE CREATED-->
            <FileCreate onmatch="include">
            </FileCreate>
                <!--SYSMON EVENT ID 12 & 13 & 14 : REGISTRY MODIFICATION-->
            <RegistryEvent onmatch="include">
            </RegistryEvent>
                <!--SYSMON EVENT ID 15 : ALTERNATE DATA STREAM CREATED-->
            <FileCreateStreamHash onmatch="include">
            </FileCreateStreamHash>
            <PipeEvent onmatch="include">
            </PipeEvent>
        </EventFiltering>
    </Sysmon>

Теперь нам нужно настроить агент Wazuh на этом сервере Windows, чтобы он отправлял эти события на сервер управления Wazuh.
Для этого нам нужно открыть файл агента Wazuh, расположенный по адресу: C:\Program Files (x86)\ossec-agent\ossec.conf
И включить следующий фрагмент:

    <!-- Sysmon Analysis -->
        <localfile>
            <location>Microsoft-Windows-Sysmon/Operational</location>
            <log_format>eventchannel</log_format>
        </localfile>

После этого нам нужно указать серверу управления Wazuh добавить Sysmon в качестве правила для визуализации этих событий.
Это можно сделать, добавив XML-файл к локальным правилам, расположенным в /var/ossec/etc/rules/local_rules.xml

    <group name="sysmon,">
        <rule id="255000" level="12">
            <if_group>sysmon_event1</if_group>
            <field name="sysmon.image">\\powershell.exe||\\.ps1||\\.ps2</field>
            <description>Sysmon - Event 1: Bad exe: $(sysmon.image)</description>
            <group>sysmon_event1,powershell_execution,</group>
        </rule>
    </group>

Чтобы это вступило в силу ужно будет перезапустить сервер Wazuh Management.
После этого мы можем вернуться к нашему серверу Wazuh Management и заметить, что данные были получены от агента.

=====================================================================
* Collecting Linux Logs with Wazuh *
************************************

Сбор журналов с агента Linux — это простой процесс, похожий на сбор событий с агента Windows.
Мы будем использовать службу сбора журналов Wazuh для создания записи на агенте, чтобы указать, какие журналы следует отправлять на сервер управления Wazuh.

Например, мы будем отслеживать журналы веб-сервера Apache2.
Для начала давайте настроим службу сбора журналов на сервере Linux, на котором запущен агент Wazuh.

Wazuh поставляется со множеством правил, которые позволяют Wazuh анализировать файлы журналов, и их можно найти в /var/ossec/ruleset/rules.
Некоторые распространенные приложения включают:

    -   Docker
    -   FTP
    -   WordPress
    -   SQL Server
    -   MongoDB
    -   Firewalld
    -   And many, many more (approximately 900).

Однако вы всегда можете создать свои собственные правила.
Как было упомянуто выше, в нашем варианте Wazuh будет переваривать логи Apache2, используя набор правил 0250-apache_rules.xml.
Этот набор правил может анализировать логи apache2 на предмет предупреждений и сообщений об ошибках
Для этого, нам нужно будет вставить это в агент Wazuh, который отправляет логи в файл конфигурации серверов управления Wazuh, расположенный в /var/ossec/etc/ossec.conf:

    <!-- Apache2 Log Analysis -->
    <localfile>
        <location>/var/log/example.log</location>
        <log_format>syslog</log_format>
    </localfile>

И потом перезапустить агент Linux, на котором запущена служба Apache2.

=====================================================================
* Auditing Commands on Linux with Wazuh *
*****************************************

Wazuh использует пакет "auditd", который можно установить на агентах Wazuh, работающих в операционных системах Debian/Ubuntu и CentOS.
Мы будем рассматривать на примере системы Ubuntu.
Auditd отслеживает определенные действия и события в системе и записывает их в файл журнала.

Также мы можем использовать модуль сбора журналов на агенте Wazuh, чтобы прочитать этот файл журнала и отправить его на сервер управления Wazuh для обработки.

Сначала нам нужно будет установить пакет "auditd" и плагин "auditd".
Возможно, он уже установлен в вашей системе; однако давайте установим его, чтобы быть 100% уверенным, что он точно установлен в нашей системе.

    1)  Сперва выполним команду
            sudo apt-get install Auditd audispd-plugins
    2)  А также включим эту службу для работы в данный момент, и при загрузке
            sudo systemctl enable Auditd.service & sudo systemctl start Auditd.service
    3)  Затем нам нужно будет настроить "auditd", чтобы создать правило для команд и событий, которые мы хотим, чтобы он отслеживал.
        *** В нашем примере мы скажем Auditd отслеживать все команды, выполняемые от имени root.
            Вы также можете расширить (по своему желанию) это для отслеживания таких команд, как tcpdump, netcat или файлов catting, таких как /etc/passwd, которые являются признаками нарушения.

Правила Auditd находятся в следующем каталоге: /etc/audit/rules.d/audit.rules.
Мы будем добавлять наши правила вручную, добавив в конец файла следующий набор команд

        -a exit,always -F arch=64 -F euid=0 -S execve -k audit-wazuh-c

В результате, файл может выглядет слебующим образом

    ## First rule - delete all
    -D

    ## Increase the buffers to survive stress events.
    ## Make this bigger for busy systems
    -b 8192

    ## This determine how long to wait in burst of events
    --backlog_wait_time 0

    ## Set failure mode to syslog
    -f 1

    -a exit,always -F arch=b64 -F euid=0 -S execve -k  audit-wazuh-c

Теперь нам нужно будет информировать аудиты об этом новом правиле, поэтому давайте выполним эту команду, чтобы теперь прочитать новый файл audit.rules, который мы добавили ранее.

    sudo auditctl -R /etc/audit/rules.d/audit.rules, 

Теперь давайте настроим систему, на которой запущен агент Wazuh, и на которой мы хотим отслеживать эти события.
В этом случае мы будем отслеживать хост Linux, поэтому, нам нужно будет настроить агент Wazuh для обнаружения этого нового файла журнала, который генерируется auditd,
Для этого необходимо добавить следующий фрагмент в конфигупационный файл /var/ossec/etc/ossec.conf

    <localfile>
        <location>/var/log/audit/audit.log</location>
        <log_format>audit</log_format>
    </localfile>

=====================================================================
* Wazuh API *
*************

    ++++++++++++++++++++++++
    + Using Our Own Client +
    ++++++++++++++++++++++++

    Сервер управления Wazuh имеет богатый и обширный API, позволяющий взаимодействовать с сервером управления Wazuh с помощью командной строки.
    Поскольку сервер управления Wazuh требует аутентификации, мы должны сначала аутентифицировать нашего клиента.

    Для этого мы будем использовать машину Linux с установленным инструментом curl для взаимодействия с API сервера управления Wazuh.

    Сначала нам нужно будет аутентифицировать себя, предоставив действительный набор учетных данных конечной точке аутентификации.
    После аутентификации сервер управления Wazuh выдаст нам токен (похожий на сеанс), который нам нужно будет предоставить для дальнейшего взаимодействия.
    Мы можем сохранить этот токен как переменную среды на нашей машине Linux, как в приведенном ниже фрагменте:

        TOKEN=$(curl -u : -k -X GET "https://WAZUH_MANAGEMENT_SERVER_IP:55000/security/user/authenticate?raw=true")

        *** Заменив WAZUH_MANAGEMENT_SERVER_IP на IP-адрес сервера управления Wazuh (например, 10.10.150.238)

    Крайне желательно необходимо подтвердить, что мы успешно прошли аутентификацию и получили токен от сервера управления Wazuh, используем следующую команду

        curl -k -X GET "https://WAZUH_MANAGEMENT_SERVER_IP:55000/" -H "Authorization: Bearer $TOKEN"

    Ответ, на запрос подтверждения аутентификации может выглядеть следующим образом

        {
            "data": {
                "title": "Wazuh API",
                "api_version": "4.0.0",
                "revision": 4000,
                "license_name": "GPL 2.0",
                "license_url": "https://github.com/wazuh/wazuh/blob/master/LICENSE",
                "hostname": "wazuh-master",
                "timestamp": "2021-10-25T07:05:00+0000"
            },
            "error": 0
        }

    Мы можем использовать стандартные методы HTTP-запросов, такие как GET/POST/PUT/DELETE, указав соответствующую опцию после -X, например -X GET

        curl -k -X GET "https://WAZUH_MANAGEMENT_SERVER_IP:55000/manager/status?pretty=true" -H "Authorization: Bearer $TOKEN"

    Например, давайте используем API Wazuh для вывода некоторых статистических данных и важной информации о сервере управления Wazuh, включая отслеживаемые службы и некоторые общие настройки сервера управления Wazuh:

        curl -k -X GET "https://WAZUH_MANAGEMENT_SERVER_IP:55000/manager/configuration?pretty=true§ion=global" -H "Authorization: Bearer $TOKEN"

            {
                "data": {
                    "affected_items": [
                        {
                            "wazuh-agentlessd": "running",
                            "wazuh-analysisd": "running",
                            "wazuh-authd": "running",
                            "wazuh-csyslogd": "running",
                            "wazuh-dbd": "stopped",
                            "wazuh-monitord": "running",
                            "wazuh-execd": "running",
                            "wazuh-integratord": "running",
                            "wazuh-logcollector": "running",
                            "wazuh-maild": "running",
                            "wazuh-remoted": "running",
                            "wazuh-reportd": "stopped",
                            "wazuh-syscheckd": "running",
                            "wazuh-clusterd": "running",
                            "wazuh-modulesd": "running",
                            "wazuh-db": "running",
                            "wazuh-apid": "stopped"
                        }
                    ],
                    "total_affected_items": 1,
                    "total_failed_items": 0,
                    "failed_items": []
                },
                "message": "Processes status were successfully read in specified node",
                "error": 0
            }

    Или, возможно, мы можем использовать API сервера управления Wazuh для взаимодействия с агентом:

        curl -k -X GET "https://WAZUH_MANAGEMENT_SERVER_IP:55000/agents?pretty=true&offset=1&limit=2&select=status%2Cid%2Cmanager%2Cname%2Cnode_name%2Cversion&status=active" -H "Authorization: Bearer $TOKEN"

            {
                "data": {
                    "affected_items": [
                        {
                            "node_name": "worker2",
                            "status": "active",
                            "manager": "wazuh-worker2",
                            "version": "Wazuh v3.13.1",
                            "id": "001",
                            "name": "wazuh-agent1"
                        }
                    ],
                    "total_affected_items": 9,
                    "total_failed_items": 0,
                    "failed_items": []
                },
                "message": "All selected agents information was returned",
                "error": 0
            }

    +++++++++++++++++++++++++++++
    + Using Wazuh's API Console +
    +++++++++++++++++++++++++++++

    Wazuh имеет мощную, интегрированную консоль API на веб-сайте Wazuh для запроса серверов управления и агентов.
    Хотя она не так обширна, как использование вашей собственной среды (где вы можете создавать и запускать скрипты с помощью python, например), она удобна.
    
    Чтобы найти эту консоль API, нам нужно открыть категорию "Tools"
    Вы увидите несколько примеров запросов, которые вы можете запустить.
    Просто выберите строку и нажмите зеленую стрелку запуска, чтобы запустить запрос

    *** Напоминание: синтаксис для выполнения запросов использует те же веб-методы (т. е. GET/PUT/POST) и конечные точки (т. е. /manager/info), которые вы бы использовали с curl.
        Вы можете просмотреть некоторые дополнительные параметры конечных точек API, следуя подробной документации API Wazuh здесь

=====================================================================
* Generating Reports with Wazuh *
*********************************

Wazuh имеет модуль отчетности, который позволяет просматривать обобщенную разбивку событий, произошедших на агенте.
Сначала нам нужно будет выбрать представление для создания отчетов.

Допустим Вы хотите создать отчет о событиях безопасности за последние 24 часа.
Для этого мне нужно будет открыть представление: 1. Modules -> 2. Security Events
Теперь, если в течение последних 24 часов были оповещения, можно будет такой отчет
*** Если кнопка формирования отчета неактивна, то это охначает, что данные отчета отсутствуют, поэтому вам необходимо либо изменить запрос, либо расширить диапазон дат.

Генерация отчета может занять от пары секунд до нескольких минут (в зависимости от объема данных, которые необходимо обработать).
Подождав некоторое время, можно перейти к панели обзора отчетов Wazuh -> Management -> Reporting -> Status and Reports

На панели обзора отчетов перечислены все сгенерированные отчеты.
Чтобы загрузить отчет, нажмите значок сохранения справа от отчета, расположенного под заголовком «Actions».

=====================================================================
* Loading Sample Data *
***********************

Сервер управления Wazuh поставляется с образцами данных, включенными в установку, которые можно загрузить в удобное для вас время.
Поэтому, если вы хотите импортировать гораздо больше данных, чтобы продемонстрировать расширяемость Wazuh, выполните следующие действия:

    1)  Откройте вкладку «Wazuh» в заголовке.
    2)  Выделите «Settings».
    3)  Выберите заголовок «Sample Data».
    4)  Нажмите кнопку «Add Data» на соответствующих трех карточках, чтобы импортировать данные.

Данные будут успешно импортированы, когда кнопка на карте скажет «Remove data»

Вернитесь на панель управления Wazuh, чтобы увидеть недавно импортированные данные.
Обратите внимание, что вам нужно будет поиграть с диапазоном дат.
Абсолютный минимум, требуемый для отображения выборки, должен быть "Last 7 days+", и обновите панель управления, чтобы это вступило в силу.